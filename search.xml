<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>交换两个变量的值的几种方法</title>
      <link href="/star/2023/07204.html"/>
      <url>/star/2023/07204.html</url>
      
        <content type="html"><![CDATA[<p><code>JavaScript扩展1--这篇主要是交换两个变量的值的几种方法的总结</code></p><span id="more"></span><h2 id="交换两个变量的值的几种方法"><a href="#交换两个变量的值的几种方法" class="headerlink" title="交换两个变量的值的几种方法"></a>交换两个变量的值的几种方法</h2><h3 id="方法1-设置一个中间变量"><a href="#方法1-设置一个中间变量" class="headerlink" title="方法1  设置一个中间变量"></a>方法1  设置一个中间变量</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token keyword">let</span> temp <span class="token operator">=</span> cup1cup1 <span class="token operator">=</span> cup2cup2 <span class="token operator">=</span> tempconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法2-数组的解构赋值"><a href="#方法2-数组的解构赋值" class="headerlink" title="方法2   数组的解构赋值"></a>方法2   数组的解构赋值</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token punctuation">[</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>cup2<span class="token punctuation">,</span>cup1<span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法3-放在一个数组，通过索引交换"><a href="#方法3-放在一个数组，通过索引交换" class="headerlink" title="方法3  放在一个数组，通过索引交换"></a>方法3  放在一个数组，通过索引交换</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">]</span>cup2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cup1 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="方法4"><a href="#方法4" class="headerlink" title="方法4"></a>方法4</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> cup1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span><span class="token keyword">let</span> cup2 <span class="token operator">=</span> <span class="token string">"b"</span><span class="token punctuation">;</span>cup1 <span class="token operator">=</span> <span class="token punctuation">[</span>cup2<span class="token punctuation">,</span>cup2<span class="token operator">=</span>cup1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cup1<span class="token punctuation">,</span>cup2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaScript扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造函数&amp;数据常用函数</title>
      <link href="/star/2023/072043.html"/>
      <url>/star/2023/072043.html</url>
      
        <content type="html"><![CDATA[<h2 id="构造函数-数据常用函数"><a href="#构造函数-数据常用函数" class="headerlink" title="构造函数&amp;数据常用函数"></a>构造函数&amp;数据常用函数</h2><p><code>这篇总结主要讲解了构造函数&amp;数据常用函数，讲解了对象与数组的多种方法</code></p><span id="more"></span><h3 id="1-创建对象三种方式"><a href="#1-创建对象三种方式" class="headerlink" title="1.创建对象三种方式"></a>1.创建对象三种方式</h3><p><strong>字面量创建对象</strong>：<code>let  对象名  = &#123; &#125; </code></p><p><strong>利用new   object  创建对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  对象名  =  <span class="keyword">new</span>  <span class="title class_">Object</span>();</span><br><span class="line">对象名.<span class="property">uname</span> = <span class="string">&#x27;pink&#x27;</span> </span><br><span class="line">对象名.<span class="property">sayHi</span>   =  <span class="keyword">function</span>(<span class="params"></span>) &#123;输出对象&#125; </span><br></pre></td></tr></table></figure><p><strong>利用构造函数创建对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>  构造函数名（属性值<span class="number">1</span>,属性值<span class="number">2</span>） &#123;</span><br><span class="line">            <span class="variable language_">this</span>.属性<span class="number">1</span> = 值；</span><br><span class="line">            <span class="variable language_">this</span>.属性<span class="number">2</span> = 值；</span><br><span class="line">            <span class="variable language_">this</span>.方法 = <span class="keyword">function</span>(<span class="params"></span>)  &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span>   构造函数名（属性值<span class="number">1</span>,属性值<span class="number">2</span>）;</span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span>   构造函数名（属性值<span class="number">1</span>,属性值<span class="number">2</span>）;</span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span>   构造函数名（属性值<span class="number">1.</span>属性值<span class="number">2</span>）;</span><br><span class="line"><span class="comment">//这里的this指向a，b，c</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Goods</span>(<span class="params">name,price,count</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span>= name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span>= price;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">count</span>= count</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> xm = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&#x27;小米&#x27;</span>,<span class="number">1999</span>,<span class="number">20</span>)</span><br><span class="line"><span class="keyword">const</span> hw = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&#x27;华为&#x27;</span>,<span class="number">3999</span>,<span class="number">59</span>)</span><br><span class="line"><span class="keyword">const</span> vivo = <span class="keyword">new</span> <span class="title class_">Goods</span>(<span class="string">&#x27;vivo&#x27;</span>,<span class="number">1888</span>,<span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(xm);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hw);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(vivo);</span><br></pre></td></tr></table></figure><h3 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h3><p>是什么？是一种特殊的函数，主要用来初始化对象，可以快速创建多个类似的对象<br><strong>返回值是新创造的对象</strong><br>new关键字调用函数的行为称为<strong>实例化</strong><br><strong>规范：</strong><br>                <code>1.命名首字母大写</code><br>                <code>2.只能用new操作符来执行</code><br><code>实例化执行过程</code>:<br>                你先写了一个函数，但是这个函数没有被调用,你在下方写了一个 <code>let a = new obj()</code>，然而此时会调用此函数，但是调用此函数之前，这个‘new’ 会先一步为<code>obj()</code>创建了一个新对象，之后才会调用函数，由于创建了一个新对象，this指向就会指向于obj这个新对象，然后就开始执行这个函数的代码，<code>new obj(实参1，实参2)</code>传入这个构造函数中，<code>function(形参1，形参2) &#123;this.name=name&#125;</code>,传入后，进行赋值，最终返回一个新对象</p><p><strong>原型链：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*为什么要用原型链？</span></span><br><span class="line"><span class="comment">一切的起源是因为你创建了一个普通函数，此时普通函数中的this指向是window，同时拥有多个属性与方法，同时你又想要使用这些属性与方法，于是你通过new关键字创建了一个实例对象，此时的this指向则不是指向window，而是指向这个实例对象，然而函数中的方法是引用数据类型，每次声明的实例对象里面的方法都会在堆空间重新开辟了一个新的空间，因此你创建n个实例对象，就开辟了n个堆空间，这就容易造成内存浪费。</span></span><br><span class="line"><span class="comment">此时你又不想每创建一个实例对象，就开辟一个新的方法的堆空间，你就寻思着让所有实例对象里面的方法地址指向同一个方法的地址，于是，你将构造函数里的方法在外面封装成一个函数，同时将这个函数赋值给构造函数里面的方法，由于函数是值数据类型，赋值的是地址，即让所有的实例对象里面的方法都指向这一个地址，因此就只会在创建函数(这个函数就是实例对象的方法)时，创建一个堆内存，并且将地址给到以后每个使用这个方法的实例对象，在此，又出现了一个新的问题，如果你实例对象里面有n个方法呢？你再去外面封装n个函数，那么就容易出现全局变量名的污染</span></span><br><span class="line"><span class="comment">此时你又不想造成变量污染，那怎么办呢？此时你就可以利用面向对象中的封装性，将这n个方法封装在一个对象里面，此时暴露在全局的变量就只会是一个对象名，因此，就避免了变量污染*/</span></span><br></pre></td></tr></table></figure><h3 id="3-实例成员-静态成员"><a href="#3-实例成员-静态成员" class="headerlink" title="3.实例成员&amp;静态成员"></a>3.实例成员&amp;静态成员</h3><h4 id="实例成员"><a href="#实例成员" class="headerlink" title="实例成员"></a>实例成员</h4><p><code>构造函数创造的对象称为实例对象</code><br><code>实例对象的属性和方法就称为实例成员(实例属性和实例方法)</code></p><p><strong>说明：</strong><br><code>1.两个实例化对象给构造函数传入参数，创建的结构相同，但是不是同一个对象</code><br><code>2.构造函数创建的实例对象彼此独立，互不影响</code><br><code>3.this指向实例化对象</code></p><h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p><code>构造函数的属性和方法称为静态成员（静态属性和静态方法）</code><br><code>this指向构造函数</code></p><h2 id="内置构造函数"><a href="#内置构造函数" class="headerlink" title="内置构造函数"></a>内置构造函数</h2><h3 id="1-引用类型"><a href="#1-引用类型" class="headerlink" title="1.引用类型"></a>1.引用类型</h3><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p><strong>静态方法</strong><br><code>1.获取对象的键值对</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.Object.keys(对象) 获得所有的键</span><br><span class="line">2.Object.values(对象)  获得所有的值</span><br><span class="line">3.返回的是一个数组</span><br></pre></td></tr></table></figure><p><code>2.拷贝对象</code><br><code>Object.assign(拷贝对象给谁,被拷贝的对象)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">name</span>:<span class="string">&#x27;pink&#x27;</span>,<span class="attr">age</span>:<span class="number">6</span>&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj,o)</span><br></pre></td></tr></table></figure><p><code>3.给实例化对象新增属性</code><br><code>Object.assign(给哪个对象添加,&#123;实例属性：值&#125;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;<span class="attr">name</span>:<span class="string">&#x27;pink&#x27;</span>,<span class="attr">age</span>:<span class="number">6</span>&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(o,&#123;<span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><h5 id="实例方法（实例化对象只能用实例化方法）"><a href="#实例方法（实例化对象只能用实例化方法）" class="headerlink" title="实例方法（实例化对象只能用实例化方法）"></a>实例方法（实例化对象只能用实例化方法）</h5><p><code>1.forEach（一般用于全选框）</code><br>筛选数组,将满足条件的元素放入新数组中，返回筛选之后的新数组,如果没有符合条件的元素则返回空数组<br>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.除了抛出异常以外，没有办法中止或跳出 循环</span><br><span class="line">2.无法 break ，可以用 try/catch 中 throw new Error 来停止</span><br><span class="line">3.Error对象：js的内置对象,表示错误的对象</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">45</span>, <span class="number">60</span>, <span class="number">88</span>, <span class="number">90</span>, <span class="number">20</span>]</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(item === <span class="number">60</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> index</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">&#125;<span class="keyword">catch</span>(error) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>语法：forEach(function(item,index,arr) &#123; &#125;)</code><br><strong>场景：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>改变数组的某个属性，例如一点击全选，单选框为<span class="literal">true</span></span><br><span class="line"><span class="number">2.</span>给对象数组添加或删除某个属性，例如新增假期属性，工资奖励属性，删除假期属性</span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">&#x27;a&#x27;</span>,<span class="attr">age</span>:<span class="number">16</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="attr">select</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">&#x27;b&#x27;</span>,<span class="attr">age</span>:<span class="number">16</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="attr">select</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">&#x27;c&#x27;</span>,<span class="attr">age</span>:<span class="number">16</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="attr">select</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>:<span class="string">&#x27;d&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>,<span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,<span class="attr">select</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">select</span> = <span class="literal">true</span>)</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">price</span> = <span class="number">100</span>)</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span>=&gt;</span><span class="keyword">delete</span> item.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br></pre></td></tr></table></figure><p><code>2.map</code>迭代数组，返回新数组<br>创建一个新数组，这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成。<br><code>语法：map(function(item,index,arr) &#123; &#125;)</code><br><strong>实际应用场景</strong>：映射数组（需要使用新数组）<br><strong>通过map方法渲染，需要和join(‘’)配合使用</strong></p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">必须使用新数组时</span><br><span class="line">应用：有一个对象数组里面是商品信息。如果原价就不变，如果vip用户则<span class="number">88</span>折</span><br><span class="line">        forEach和map最大的区别</span><br><span class="line">        foreach只会修改原来的数组，不会产生新的堆地址</span><br><span class="line">        map需要得到一个新的堆地址</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;食品&#x27;</span>,<span class="attr">price</span>:<span class="number">188</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;手机&#x27;</span>,<span class="attr">price</span>:<span class="number">2888</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;家具&#x27;</span>,<span class="attr">price</span>:<span class="number">588</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>:<span class="string">&#x27;玩具&#x27;</span>,<span class="attr">price</span>:<span class="number">99</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(arr))</span><br><span class="line"><span class="keyword">let</span> arr2 = arr1.<span class="title function_">map</span>(<span class="function"><span class="params">item</span>=&gt;</span>item.<span class="property">price</span>*=<span class="number">0.88</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//map方法</span></span><br><span class="line">    <span class="comment">//    let arr1 = arr.map(item=&gt;&#123;</span></span><br><span class="line">    <span class="comment">//     return &#123;</span></span><br><span class="line">    <span class="comment">//         name:item.name,</span></span><br><span class="line">    <span class="comment">//         price:item.price*0.88</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//    &#125;)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr,arr2)</span><br></pre></td></tr></table></figure><p><code>3.filter</code>过滤数组，返回新数组<br>创建给定数组一部分的浅拷贝，其包含通过所提供函数实现的测试的所有元素。<br>返回值：一个新的、由通过测试的元素组成的数组，如果没有任何数组元素通过测试，则返回空数组<br>语法：<code>filter(function(item,index,arr) &#123; &#125;)</code><br><code>注意点:</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1)filter()方法不会对空数组进行检测</span><br><span class="line">(2)filter()方法不会改变原始数组</span><br></pre></td></tr></table></figure><p><code>4.every（小选框）</code><br>语法：<code>every(function(item,index,arr) &#123; &#125;)</code><br><code>若收到一个空数组，此方法在任何情况下都会返回 true，有一项返回 false ，则整体为 false</code></p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isBigEnough</span>(<span class="params">element, index, array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].<span class="title function_">every</span>(isBigEnough);   <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].<span class="title function_">every</span>(isBigEnough); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>5.some（非空判断）</code><br>语法：<code>some(function(item,index,arr) &#123; &#125;)</code><br><code>有一项返回 true ，则整体为 true</code></p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Checks whether an element is even</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">even</span> = (<span class="params">element</span>) =&gt; element % <span class="number">2</span> === <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">some</span>(even));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>6.find</code><br>返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。<br>语法：<code>find(function(item,index,arr) &#123; &#125;)</code></p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">用对象的属性查找数组里的对象</span><br><span class="line"><span class="keyword">const</span> inventory = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;apples&#x27;</span>, <span class="attr">quantity</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;bananas&#x27;</span>, <span class="attr">quantity</span>: <span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;cherries&#x27;</span>, <span class="attr">quantity</span>: <span class="number">5</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isCherries</span>(<span class="params">fruit</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> fruit.<span class="property">name</span> === <span class="string">&#x27;cherries&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(inventory.<span class="title function_">find</span>(isCherries));</span><br><span class="line"><span class="comment">// &#123; name: &#x27;cherries&#x27;, quantity: 5 &#125;</span></span><br><span class="line"></span><br><span class="line">使用箭头函数和解构赋值</span><br><span class="line"><span class="keyword">const</span> inventory = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;apples&#x27;</span>, <span class="attr">quantity</span>: <span class="number">2</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;bananas&#x27;</span>, <span class="attr">quantity</span>: <span class="number">0</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&#x27;cherries&#x27;</span>, <span class="attr">quantity</span>: <span class="number">5</span>&#125;</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> result = inventory.<span class="title function_">find</span>(<span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> name === <span class="string">&#x27;cherries&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">// &#123; name: &#x27;cherries&#x27;, quantity: 5 &#125;</span></span><br></pre></td></tr></table></figure><p><code>7.findIndex</code><br><code>findIndex()</code>方法返回数组中满足提供的测试函数的第一个元素的索引。若没有找到对应元素则返回 -1。<br><code>语法：findIndex(function(item,index,arr) &#123; &#125;)</code></p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isLargeNumber</span> = (<span class="params">element</span>) =&gt; element &gt; <span class="number">13</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">findIndex</span>(isLargeNumber));</span><br><span class="line"><span class="comment">// Expected output: 3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line"><span class="title function_">findIndex</span>(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123; <span class="comment">/* … */</span> &#125; )</span><br><span class="line"><span class="title function_">findIndex</span>(<span class="function">(<span class="params">element, index</span>) =&gt;</span> &#123; <span class="comment">/* … */</span> &#125; )</span><br><span class="line"><span class="title function_">findIndex</span>(<span class="function">(<span class="params">element, index, array</span>) =&gt;</span> &#123; <span class="comment">/* … */</span> &#125; )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回调函数</span></span><br><span class="line"><span class="title function_">findIndex</span>(callbackFn)</span><br><span class="line"><span class="title function_">findIndex</span>(callbackFn, thisArg)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 内联回调函数</span></span><br><span class="line"><span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">element</span>) &#123; <span class="comment">/* … */</span> &#125;)</span><br><span class="line"><span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">element, index</span>) &#123; <span class="comment">/* … */</span> &#125;)</span><br><span class="line"><span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">element, index, array</span>)&#123; <span class="comment">/* … */</span> &#125;)</span><br><span class="line"><span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">element, index, array</span>) &#123; <span class="comment">/* … */</span> &#125;, thisArg)</span><br><span class="line">callback</span><br><span class="line">针对数组中的每个元素，都会执行该回调函数，执行时会自动传入下面三个参数：</span><br><span class="line"></span><br><span class="line">element</span><br><span class="line">当前元素。</span><br><span class="line"></span><br><span class="line">index</span><br><span class="line">当前元素的索引。</span><br><span class="line"></span><br><span class="line">array</span><br><span class="line">调用findIndex的数组。</span><br><span class="line"></span><br><span class="line">thisArg</span><br><span class="line">可选。执行callback时作为<span class="variable language_">this</span>对象的值。</span><br></pre></td></tr></table></figure><p><code>8.reduce累计器</code><br>经常用于求和<br>语法：<code>arr.reduce(function(sum,item,index)&#123;&#125;,初始值始值)</code><br>没写初始值的话，就只算数组的和<br>写了初始值，算完数组还得加上初始值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">&#123;<span class="attr">name</span>:<span class="string">&#x27;食品&#x27;</span>,<span class="attr">price</span>:<span class="number">188</span>,<span class="attr">select</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="attr">name</span>:<span class="string">&#x27;手机&#x27;</span>,<span class="attr">price</span>:<span class="number">2888</span>,<span class="attr">select</span>:<span class="literal">false</span>&#125;,</span><br><span class="line">&#123;<span class="attr">name</span>:<span class="string">&#x27;家具&#x27;</span>,<span class="attr">price</span>:<span class="number">588</span>,<span class="attr">select</span>:<span class="literal">true</span>&#125;,</span><br><span class="line">&#123;<span class="attr">name</span>:<span class="string">&#x27;玩具&#x27;</span>,<span class="attr">price</span>:<span class="number">99</span>,<span class="attr">select</span>:<span class="literal">true</span>&#125;</span><br><span class="line">]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">sum,item</span>)=&gt;</span>item.<span class="property">select</span>?sum+item.<span class="property">price</span>:sum,<span class="number">0</span>))</span><br></pre></td></tr></table></figure><p><code>9.join</code><br>将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串，用逗号或指定的分隔符字符串分隔。如果数组只有一个元素，那么将返回该元素而不使用分隔符。<br><code>用于把数组中的所有元素转换为一个字符串 </code><br><code>语法：数组.join(&#39;间隔字符&#39;)</code><br><code>a.实现字符串的翻转</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;加油，奥里给!&#x27;</span></span><br><span class="line"><span class="keyword">let</span> a = str.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [<span class="string">&#x27;Wind&#x27;</span>, <span class="string">&#x27;Water&#x27;</span>, <span class="string">&#x27;Fire&#x27;</span>];</span><br><span class="line">a.<span class="title function_">join</span>();      <span class="comment">// &#x27;Wind,Water,Fire&#x27;</span></span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>);  <span class="comment">// &#x27;Wind, Water, Fire&#x27;</span></span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&#x27; + &#x27;</span>); <span class="comment">// &#x27;Wind + Water + Fire&#x27;</span></span><br><span class="line">a.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);    <span class="comment">// &#x27;WindWaterFire&#x27;</span></span><br></pre></td></tr></table></figure><p><code>10.concat</code><br>用于合并两个或多个数组，返回一个新数组,不会改变原数组<br>语法：<code>arr1.concat(arr2,arr3)</code></p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">连接<span class="number">2</span>个数组</span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;f&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> array3 = array1.<span class="title function_">concat</span>(array2);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array3);</span><br><span class="line"><span class="comment">// Expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">连接<span class="number">3</span>个数组</span><br><span class="line">以下代码将三个数组合并为一个新数组：</span><br><span class="line"><span class="keyword">const</span> num1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> num2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">const</span> num3 = [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numbers = num1.<span class="title function_">concat</span>(num2, num3);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers);</span><br><span class="line"><span class="comment">// results in [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">将值连接到数组</span><br><span class="line"><span class="keyword">const</span> letters = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="keyword">const</span> alphaNumeric = letters.<span class="title function_">concat</span>(<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(alphaNumeric);</span><br><span class="line"><span class="comment">// results in [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><code>11.slice</code><br>截取slice（begin,end）       返回截取的新数组<br>截取以begin开头，但取不到end<br>返回一个新的数组，不改变原数组</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> animals = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;elephant&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// Expected output: Array [&quot;camel&quot;, &quot;duck&quot;, &quot;elephant&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(animals.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>));</span><br><span class="line"><span class="comment">// Expected output: Array [&quot;camel&quot;, &quot;duck&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>12.sort</code><br>对数组元素排序   <code> 数组名.sort();</code><br>解决sort()不能对多个两位数与个位数排序问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">sort</span>(<span class="params"><span class="keyword">function</span>(a,b)</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>  a - b;    <span class="comment">//升序顺序排列       反之    b-a    则是降序的顺序排列</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象数组排序，形参a,b,都会拿到数组元素的每项数据，会改变原数组</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arr.sort() 对数组进行排序（会改变原数组）</span></span><br><span class="line">    <span class="keyword">const</span> arr = [<span class="number">80</span>, <span class="number">90</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">77</span>, <span class="number">88</span>]</span><br><span class="line">    arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a - b</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">对象数组排序</span><br><span class="line"><span class="keyword">const</span> arr1 = [</span><br><span class="line">      &#123;<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">price</span>:<span class="number">2355</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">name</span>:<span class="number">3</span>,<span class="attr">price</span>:<span class="number">5355</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">name</span>:<span class="number">5</span>,<span class="attr">price</span>:<span class="number">6154</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">name</span>:<span class="number">2</span>,<span class="attr">price</span>:<span class="number">2755</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">name</span>:<span class="number">4</span>,<span class="attr">price</span>:<span class="number">6355</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">    arr1.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>b.<span class="property">price</span> - a.<span class="property">price</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr1)</span><br><span class="line"></span><br><span class="line">出生排序</span><br><span class="line"><span class="keyword">const</span> arr2 = [</span><br><span class="line">      &#123;<span class="attr">name</span>:<span class="number">1</span>,<span class="attr">data</span>:<span class="string">&#x27;2000-12-08&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">name</span>:<span class="number">3</span>,<span class="attr">data</span>:<span class="string">&#x27;2003-11-08&#x27;</span>&#125;,</span><br><span class="line">      &#123;<span class="attr">name</span>:<span class="number">5</span>,<span class="attr">data</span>:<span class="string">&#x27;1998-10-08&#x27;</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    arr2.<span class="title function_">sort</span>(<span class="function">(<span class="params">a,b</span>)=&gt;</span>+<span class="keyword">new</span> <span class="title class_">Date</span>(a.<span class="property">data</span>) - +<span class="keyword">new</span> <span class="title class_">Date</span>(b.<span class="property">data</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)</span><br></pre></td></tr></table></figure><p><code>13.reverse</code><br> 颠倒数组元素    无参数    <code>数组名.reverse();</code><br><strong>返回值</strong>：颠倒后的数组<br>改变原数组<br><code>如果你希望reverse不改变原数组，请使用toReversed()方法</code></p><p><code>14.splice</code><br>删除或替换，会改变原数组<br>返回的是被删除&#x2F;修改的值<br><code>语法：splice（第几个开始，要删除的个数，修改的值）</code><br>如果要删除的个数是 0 或者负数，则不移除元素，这种情况下，至少应添加一个新元素。</p><p><code>15.数组.flat(深度)</code>    进行数组降维<br>复杂的嵌套数组（三维数组）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>, [<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">1</span>))<span class="comment">//[1, 2, 3, 4, [5, 6]]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">2</span>)) <span class="comment">//[1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr[<span class="number">2</span>][<span class="number">2</span>][<span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>没有返回值，修改数组本身</p><p><code>16.toString()</code><br>返回一个字符串，表示指定的数组及其元素</p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;1a&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array1.<span class="title function_">toString</span>());</span><br><span class="line"><span class="comment">// Expected output: &quot;1,2,a,1a&quot;</span></span><br></pre></td></tr></table></figure><p><code>17.Array.isArray() </code><br>用于确定传递的值是否是一个 Array<br><code>语法：Array.isArray(数组)</code>      返回值是布尔值</p><p><code>18.indexOf(要查找的元素，从哪里开始)</code><br>返回在数组中可以找到给定元素的第一个索引，如果不存在，则返回 -1</p><p><strong>示例：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> beasts = [<span class="string">&#x27;ant&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>, <span class="string">&#x27;camel&#x27;</span>, <span class="string">&#x27;duck&#x27;</span>, <span class="string">&#x27;bison&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;bison&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Start from index 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;bison&#x27;</span>, <span class="number">2</span>));</span><br><span class="line"><span class="comment">// Expected output: 4</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(beasts.<span class="title function_">indexOf</span>(<span class="string">&#x27;giraffe&#x27;</span>));</span><br><span class="line"><span class="comment">// Expected output: -1</span></span><br></pre></td></tr></table></figure><h5 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h5><p>let 真数组 &#x3D; Array.from(伪数组)<br><strong>伪数组转换为真数组</strong>，伪数组的本质是对象</p><h3 id="2-包装类型"><a href="#2-包装类型" class="headerlink" title="2.包装类型"></a>2.包装类型</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><p>1.<code>字符串恒定性</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1)字符串类似于数组，也有长度和下标</span><br><span class="line">(2)字符串不可以被直接修改</span><br><span class="line">(3)字符串所有的方法都不会修改字符串本身，而是得到新的字符串</span><br></pre></td></tr></table></figure><p><code>2.length获取字符串长度</code></p><p><code>字符串.split(&#39;分隔符&#39;)</code><br> <code>用分隔符切割字符串，得到切割之后的数组</code><br><code>语法：字符串名.split()</code><br>主要用于切割网址，得到参数对象<br><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;http://www.baidu.com?name=张三&amp;age=20&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">split</span>()) <span class="comment">// [&#x27;http://www.baidu.com?name=张三&amp;age=20&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">split</span>(<span class="string">&#x27;?&#x27;</span>))<span class="comment">//[&quot;http://www.baidu.com&quot;,&quot;name=张三&amp;age=20&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>))<span class="comment">//[&quot;http://www.baidu.com&quot;,&quot;name=张三&quot;,&quot;age=20&quot;]</span></span><br></pre></td></tr></table></figure><p><code>3.字符串.substring(截取第一个字符串的索引号,结束的索引号)</code><br><strong>用于字符串截取</strong><br><code>4.start位置开始，end结束，但是end取不到，与slice基本相同，但不接受负值</code><br><strong>应用场景</strong>：截取部分字符串，进行替换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> phone = <span class="string">&#x27;13512345678&#x27;</span></span><br><span class="line"><span class="keyword">let</span> a = phone.<span class="title function_">replace</span>(phone.<span class="title function_">substring</span>(<span class="number">3</span>,<span class="number">7</span>),<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure><p><code>5.startsWith(检测的字符串[,检测的位置索引号])</code><br>检测是否以某字符串开头，返回true和false</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;传智播客传递知识&#x27;</span></span><br><span class="line"><span class="comment">// 1. startsWith(检测字符，[检测位置])</span></span><br><span class="line"><span class="comment">// 检测是否以某个字符开头，返回布尔值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;传&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;智&#x27;</span>))  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;传&#x27;</span>, <span class="number">1</span>))  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">startsWith</span>(<span class="string">&#x27;传&#x27;</span>, <span class="number">4</span>))  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>6.includes(搜索的字符串[,检测位置索引号])</code><br><code>判断一个字符串是否包含在另一个字符串中</code><br>返回值true和false</p><p><strong>搜索的字符串严格区分大小写</strong></p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str1 = <span class="string">&quot;To be, or not to be, that is the question.&quot;</span></span><br><span class="line"><span class="comment">// 3. includes(搜索的字符，[检测位置])</span></span><br><span class="line"><span class="comment">// 判断一个字符串是否 包含 在另外一个字符串中，返回布尔值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">includes</span>(<span class="string">&#x27;to be&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">includes</span>(<span class="string">&#x27;to be or&#x27;</span>))  <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">includes</span>(<span class="string">&#x27;To be&#x27;</span>))  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str1.<span class="title function_">includes</span>(<span class="string">&#x27;To be&#x27;</span>, <span class="number">1</span>))  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><code>7.字符串.indexOf(&#39;查找字符串&#39;)</code><br>检测查找字符串在字符串中的首字母下标<br>返回在字符串中可以找到给定元素的第一个索引，如果不存在，则返回 -1<br>查找字符串不仅仅可以写一个字的字符串，还可以去查找多个字的字符串</p><p><code>8.字符串.trim()</code> 去字符串首尾空格</p><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><p><code>toFixed(保留几位)</code><br>设置保留小数位的长度</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深浅拷贝</title>
      <link href="/star/2023/072034.html"/>
      <url>/star/2023/072034.html</url>
      
        <content type="html"><![CDATA[<h2 id="深浅拷贝"><a href="#深浅拷贝" class="headerlink" title="深浅拷贝"></a>深浅拷贝</h2><p><code>这篇总结深度讲解了深浅拷贝，希望能帮到你</code></p><span id="more"></span><p>这篇文章，我说说深浅拷贝，虽然很多人说它只针对引用类型，但是</p><p>1.<code>深拷贝和浅拷贝是只针对Object和Array这样的引用数据类型的</code>,同时，</p><p>2.<code>它只有当拷贝引用数据类型时，拷贝才存在浅拷贝与深拷贝之分。</code></p><p>他们两个都会开辟一个新的内存空间，浅拷贝中的数据是<code>值类型时</code>，他会拷贝他的值，拷贝的数据是引用类型时，则是他的地址，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:&#123;</span><br><span class="line">        <span class="attr">d</span>:<span class="number">4</span>,</span><br><span class="line">        <span class="attr">f</span>:<span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assgin</span>(&#123;&#125;,obj)</span><br><span class="line"><span class="comment">/*此时里面的a，b都是值类型，当你这个obj这个对象被obj2浅拷贝过去，</span></span><br><span class="line"><span class="comment">当obj2修改a，b时，是影响不到obj中的a,b的，如果是修改c的数据，</span></span><br><span class="line"><span class="comment">那么就会影响到obj中c的数据，因为c拷贝的是地址。同时，有些人在想，</span></span><br><span class="line"><span class="comment">当他利用obj2.c = &#123;d:5,f:888&#125;,他说这么写，obj2的数据明明改变了，</span></span><br><span class="line"><span class="comment">obj1为啥不变？拜托大哥，麻烦你把堆和栈搞明白了再学后面的，</span></span><br><span class="line"><span class="comment">这样修改是修改的是整个对象，也就是说，地址都变了，还怎么相互影响？*/</span></span><br></pre></td></tr></table></figure><p>深拷贝呢?</p><p>它同样会开辟一个新的空间，只不过他拷贝引用类型的时候拷贝的不再是他的地址，而是他的数据！因此，无论你如何修改他都不会影响原来的数据</p><h4 id="如何进行浅拷贝？"><a href="#如何进行浅拷贝？" class="headerlink" title="如何进行浅拷贝？"></a>如何进行浅拷贝？</h4><p><strong>拷贝对象</strong><br>                <code>方法1:Object.assign(拷贝对象给谁,被拷贝的对象)</code><br>                <code>方法2:展开运算符 &#123;...被拷贝的对象&#125;</code><br><strong>拷贝数组</strong><br>                <code>方法1:Array.prototype.concat() </code><br>                <code>方法2:展开运算符[...arr]</code></p><p><code>此时大多数人都有一个困惑点，在想直接赋值是不是浅拷贝，我可以狠狠的自信的告诉你，不是！不要再认为直接赋值是浅拷贝了，直接赋值拿到的是地址，修改会影响原来的数据</code></p><h4 id="如何进行深拷贝"><a href="#如何进行深拷贝" class="headerlink" title="如何进行深拷贝 ?"></a>如何进行深拷贝 ?</h4><p><strong>常见方法</strong><br><code>方法1：通过递归实现深拷贝</code><br><code>方法2：lodash/cloneDeep</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let 新对象 =  _.cloneDeep(老对象)</span><br></pre></td></tr></table></figure><p><code>方法3：通过JSON.parse(JSON.stringify(js对象))实现</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let 新对象 = JSON.parse(JSON.stringify(js对象))</span><br></pre></td></tr></table></figure><p>在此，我强调一下，利用JSON实现的深拷贝，并非真正意义上的深拷贝。为什么呢？有以下几点原因！</p><p>1.如果obj里面存在时间对象,JSON.parse(JSON.stringify(obj))之后，时间对象变成了字符串。<br>2.如果obj里有RegExp、Error对象，则序列化的结果将只得到空对象。<br>3.如果obj里有函数，undefined，则序列化的结果会把函数， undefined丢失。<br>4.如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null。<br>5.JSON.stringify()只能序列化对象的可枚举的自有属性。<br>6.如果obj中的对象是有构造函数生成的，则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor。<br>7.如果对象中存在循环引用的情况也无法正确实现深拷贝。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>盒子水平垂直居中</title>
      <link href="/star/2023/0720324.html"/>
      <url>/star/2023/0720324.html</url>
      
        <content type="html"><![CDATA[<h2 id="盒子水平垂直居中"><a href="#盒子水平垂直居中" class="headerlink" title="盒子水平垂直居中"></a>盒子水平垂直居中</h2><p><code>这篇总结主要讲解了盒子水平垂直居中的几种方法？</code></p><span id="more"></span><p>方法1：子绝父相+margin:left&#x2F;top; 固定宽高的盒子居中</p><p>方法2：子绝父相+transfrom</p><p>方法3：子绝父相(子盒子上下左右都赋值为0)+margin:auto;</p><p>方法4：flex布局，给父盒子添加flex布局，同时在弹性容器(父盒子)内设置主轴居中，侧轴居中</p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 方法1 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .father &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            position: relative;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin: 0 auto;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            width: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            height: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            background-color: pink;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .son &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            position: absolute;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            left: 50%;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            top: 50%;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin-left: -50px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin-top: -50px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            width: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            height: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            background-color: black;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125; */</span></span></span><br><span class="line"><span class="language-css"> </span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 方法2</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .father &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            position: relative;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin: 0 auto;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            width: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            height: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            background-color: pink;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .son &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            position: absolute;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            left: 50%;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            top: 50%;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            transform: translate(-50%,-50%);</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            width: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            height: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            background-color: black;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125;  */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 方法3</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .father &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            position: relative;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin: 0 auto;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            width: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            height: 200px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            background-color: pink;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .son &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            position: absolute;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            top: 0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            bottom: 0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            left: 0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            right: 0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin: auto;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            width: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            height: 100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            background-color: black;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 方法4 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 需求:请你写出父子关系盒子居中4种方法 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 提示: 定位+margin  定位+transfrom  定位+方位名词0  flex布局 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流与防抖</title>
      <link href="/star/2023/072038.html"/>
      <url>/star/2023/072038.html</url>
      
        <content type="html"><![CDATA[<h2 id="节流与防抖"><a href="#节流与防抖" class="headerlink" title="节流与防抖"></a>节流与防抖</h2><p><code>这篇总结主要讲解了节流与防抖的使用以及源码分析</code></p><span id="more"></span><h3 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h3><p><strong>单位时间内，频繁触发事件，只会触发最后一次</strong><br><code>应用场景：输入框搜索</code><br><code>1.函数防抖流程 ：</code><br>声明全局变量存储定时器ID<br>每一次触发事件, 先清除上一次定时器。 然后将事件处理代码放入本次定时器中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入文本&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="comment">/* </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">     1.函数防抖 :  单位时间内，频繁触发事件，只会触发最后一次</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">     2.经典应用场景 ： 输入框输入事件</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">     3.函数防抖流程 ：</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            3.1 声明全局变量存储定时器ID</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            3.2 每一次触发事件, 先清除上一次定时器。 然后将事件处理代码放入本次定时器中</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> timeID</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="built_in">clearTimeout</span>(timeID)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        timeID = <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>),<span class="number">500</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><code>2.lodash实现函数防抖</code><br><code>引用lodash库</code><br><code>语法：_.debounce(事件处理函数,防抖间隔时间)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">第一步：引入lodash库</span><br><span class="line">&lt;script src=<span class="string">&quot;lodash.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">第二步：</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入文本&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/* </span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">     1.函数防抖 :  单位时间内，频繁触发事件，只会触发最后一次</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        2.经典应用场景 ： 输入框输入事件</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        3.函数防抖流程 ：</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            3.1 声明全局变量存储定时器ID</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">            3.2 每一次触发事件, 先清除上一次定时器。 然后将事件处理代码放入本次定时器中</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">let</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>,_.<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;,<span class="number">500</span>))</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>3.自己封装一个函数防抖</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入文本&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 利用防抖实现性能优化</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//需求：键盘文字防抖处理</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> input = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">callback, time</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> timeID</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="built_in">clearTimeout</span>(timeID)</span></span><br><span class="line"><span class="language-javascript">        timeID = <span class="built_in">setTimeout</span>(callback, time)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    input.<span class="title function_">addEventListener</span>(<span class="string">&#x27;input&#x27;</span>,<span class="title function_">debounce</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(input.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">500</span>))</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>单位时间内，频繁触发事件，只会触发一次<br>应用场景：高频事件，降帧处理（滚动条，鼠标移动）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">loadeddata事件：视频加载好了触发</span><br><span class="line">timeupdate事件：视频播放时间变化了触发</span><br><span class="line">currentTime： 属性会以秒为单位返回当前媒体元素的播放时间。设置这个属性会改变媒体元素当前播放位置。</span><br></pre></td></tr></table></figure><p>1.函数节流流程<br>                 声明全局变量存储上一次触发交互时间<br>                每一次触发事件, 获取当前时间  与 上一次时间做比较。判断是否超过节流间隔<br>                如果 超过节流时间，则执行事件处理代码。 并且存储本次触发时间。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> timeID = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!timeID) &#123;</span><br><span class="line">        timeID = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        timeID = <span class="literal">null</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">        i++</span><br><span class="line">        &#125;,<span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.<code>lodash实现函数节流</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>,_.<span class="title function_">throttle</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    i++</span><br><span class="line">&#125;,<span class="number">1000</span>))</span><br></pre></td></tr></table></figure><p>3.自己封装一个函数节流</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">callback, time</span>) &#123;</span><br><span class="line">      <span class="comment">// 1.声明一个变量储存id</span></span><br><span class="line">      <span class="keyword">let</span> timeID = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 2.开始节流</span></span><br><span class="line">        <span class="keyword">if</span> (!timeID) &#123;</span><br><span class="line">          timeID = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            timeID = <span class="literal">null</span></span><br><span class="line">            <span class="title function_">callback</span>()</span><br><span class="line">          &#125;, time)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, fn)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高阶函数&amp;Set&amp;var/let/const的区别</title>
      <link href="/star/2023/072041.html"/>
      <url>/star/2023/072041.html</url>
      
        <content type="html"><![CDATA[<h2 id="高阶函数-Set-var-let-const的区别"><a href="#高阶函数-Set-var-let-const的区别" class="headerlink" title="高阶函数&amp;Set&amp;var&#x2F;let&#x2F;const的区别"></a>高阶函数&amp;Set&amp;var&#x2F;let&#x2F;const的区别</h2><p><code>这篇总结主要讲解了高阶函数&amp;Set&amp;var/let/const的区别</code></p><span id="more"></span><h3 id="1-闭包函数"><a href="#1-闭包函数" class="headerlink" title="1.闭包函数"></a>1.闭包函数</h3><p><strong>是什么？</strong><code>一个函数对周围状态的引用捆绑在一起，内层函数中访问到其外层函数的作用域</code><br>闭包&#x3D;内层函数+外层函数的变量<br><strong>作用</strong>：<code>解决全局变量污染</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">10</span></span><br><span class="line">    fuction <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fn</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fun = <span class="title function_">outer</span>()</span><br><span class="line"><span class="title function_">fun</span>()</span><br></pre></td></tr></table></figure><p><strong>闭包应用</strong><br>            <code>1.实现数据私有</code><br>            <code>2.可能会内存泄漏</code></p><h3 id="2-递归函数"><a href="#2-递归函数" class="headerlink" title="2.递归函数"></a>2.递归函数</h3><p>函数自己调用自己，他的功能十分强大，自己去查文档去了解了解</p><h2 id="数据类型Set与Map"><a href="#数据类型Set与Map" class="headerlink" title="数据类型Set与Map"></a>数据类型Set与Map</h2><p><strong>Set数组类型</strong><br><strong>语法</strong>：<code>const set = new Set(数组)</code><br>由于是Set类型，而不是数组类型，因此想要使用数组的方法，利用Array.from(set)<br>Set相当于是数组类型, 和数组Array唯一的区别是不能存储重复元素<br><strong>场景 :</strong>  <code>数组去重</code>     <code>let newArr = [ ...new Set(需要去重的数组) ]</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>,]);</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// //并集</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Set</span>([...a, ...b]));</span><br><span class="line"></span><br><span class="line"><span class="comment">//交集</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(</span><br><span class="line">    [...a].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> b.<span class="title function_">has</span>(item))</span><br><span class="line">));</span><br><span class="line"><span class="comment">//差集</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(</span><br><span class="line">    [...a].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !b.<span class="title function_">has</span>(item))</span><br><span class="line">));</span><br></pre></td></tr></table></figure><p>map内置对象自己去查文档，与set的语法差不多</p><h2 id="var-let-const"><a href="#var-let-const" class="headerlink" title="var/let/const"></a><code>var/let/const</code></h2><h3 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h3><p>let声明的变量，<br>        1.具有块级块级作用域，只在所处于的块级有效<br>        2.变量名不能重复声明<br>        3.不存在变量提升<br>        4.具有暂时性死区<br><code>比如就是在if语句（块级作用域）中，外面定义了var a = 1，里面再写一个a=3；后面写一个let  a;，此时if里面的a = 3就与let  a;进行绑定，无法再去访问外部的那个a,这就叫暂时性死区</code></p><h3 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h3><p><code>const声明常量，常量就是值（内存地址）是不可变化的量</code><br>        1.具有块级作用域<br>        2.声明常量时必须赋予初始值<br>        3.常量的变量名一般大写（潜规则）<br>        4.变量名不能重复声明<br>        5.常量赋值后，值不能修改<br>基本数据类型的值不能修改，因为在修改的过程中改变了内存地址<br>在数组，对象中，能修改里面的值，但重新赋值（开辟新的内存地址）后，则是会报错</p><h3 id="let-const-var的区别"><a href="#let-const-var的区别" class="headerlink" title="let const  var的区别"></a><code>let const  var</code>的区别</h3><p><code>1.使用var声明的变量，其作用域是在该语句所在函数内，且存在变量提升</code><br><code>2.使用let声明的变量，其作用域是在该语句所在代码块内，且不在变量提升</code><br><code>3.使用const声明的常量，其作用域是在该语句所在代码块内，且不在变量提升，值不可更改</code></p><h2 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h2><p><strong>语法</strong>：<code>...</code>      例如：<code>...arr</code><br>不会修改原数组<br>只存在于数组<br>返回的不是一个数组</p><p><strong>运用场景</strong>  求数组最大值&#x2F;最小值   合并数组等</p><p><strong>合并数组的三种方法</strong><br>        <code>数组3 = 数组1.push(...数组2)</code><br>        <code>数组3 = 数组1.concat(数组2)</code><br>        <code>数组1 = [...数组2, ...数组3]</code></p><p><code>浅拷贝—对象展开运算符</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue配置项</title>
      <link href="/star/2023/072053.html"/>
      <url>/star/2023/072053.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue配置项（实例属性）"><a href="#Vue配置项（实例属性）" class="headerlink" title="Vue配置项（实例属性）"></a><code>Vue</code>配置项（实例属性）</h3><p><code>这篇总结主要介绍Vue配置项</code></p><span id="more"></span><h4 id="1-el-挂载点"><a href="#1-el-挂载点" class="headerlink" title="1. el :  挂载点"></a>1. el :  挂载点</h4><p>推荐使用  id  选择器<br>不可以是 HTML 和 Body</p><p><strong>写法：</strong><br><code>方法一</code>：直接在data对象种直接指定容器<code>el:&#39;#root&#39;</code><br><code>方法二</code>：<code>Vue . $mount(&#39;#root&#39;)</code></p><h4 id="2-data-数据存储"><a href="#2-data-数据存储" class="headerlink" title="2. data : 数据存储"></a>2. data : 数据存储</h4><p>语法： 模板语法 <code>&#123;&#123; data数据 &#125;&#125;</code><br>特点：响应式，data数据变化了，页面会自动更新</p><p>写法：<br><code>第一种对象式</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">data</span>:&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;某某&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>第二种函数式</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;黑马&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br><code>由Vue管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再指向Vue实例了,而是指向window，都必须要写成普通函数</code></p><h4 id="3-methods-存储方法"><a href="#3-methods-存储方法" class="headerlink" title="3. methods     存储方法"></a>3. methods     存储方法</h4><p><code>this指向  vue实例</code><br>如何在在<code>methods</code>中访问<code>vue</code>数据？   <code>this.属性名</code></p><p><strong>注意</strong></p><p><code>1.使用的事件的回调需要配置在methods对象中，最终会在vm上</code><br><code>2.methods中配置的函数，不要用箭头函数！否则this就不是vm了</code><br><code>3.methods中配置的函数，都是被vue所管理的函数，this的指向是vm  或  组件实例对象</code></p><h4 id="4-computed-计算属性"><a href="#4-computed-计算属性" class="headerlink" title="4. computed    计算属性"></a>4. computed    计算属性</h4><p>作用： 解决模板语法冗余</p><p>原理：<code>底层借助了Obeject.defineproperty方法提供的getter和setter。</code></p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写  只用get方法时才能简写</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    <span class="comment">//简写</span></span><br><span class="line">    <span class="title function_">fullName</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">xing</span> + <span class="variable language_">this</span>.<span class="property">ming</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全写</span></span><br><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">      <span class="attr">fullName</span>:&#123;</span><br><span class="line">          <span class="title function_">get</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">          <span class="title function_">set</span>(<span class="params">value</span>)&#123;&#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//value就是你修改的值----fullName</span></span><br><span class="line"><span class="comment">//也就是说你计算的那个计算的属性的当时的状态</span></span><br><span class="line"><span class="comment">//get方法必须写return</span></span><br><span class="line"><span class="comment">//set则是不写</span></span><br></pre></td></tr></table></figure><p><strong>优势：</strong></p><p>与methods相比，内部有缓存机制，保存了第一次读取时的数据，以后只有依赖数据未发生改变，就不会调用getter，直接读取缓存，效率更高，调试方便</p><p><strong>get函数什么时候执行？</strong><br><code>1.初次读取时会执行一次</code><br><code>2.当依赖的数据发生改变时会再次调用</code></p><p><code>计算属性虽然在书写的时候是一个函数，但最终还是会被vue处理成一个属性，直接写他的方法名即可</code></p><h4 id="5-watch-侦听器"><a href="#5-watch-侦听器" class="headerlink" title="5. watch : 侦听器"></a>5. watch : 侦听器</h4><p>作用 ： 侦听<code>vue</code>中某一个数据变化<br>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深度监听   写在Vue实例里面</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">         data中的数据属性: &#123;</span><br><span class="line">              <span class="attr">immediate</span>:<span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">              <span class="comment">//什么时候调用handler？当被监视的属性发生改变时</span></span><br><span class="line">              <span class="comment">//参数 newValue 新值 oldValue旧值</span></span><br><span class="line">              <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">                        <span class="title function_">log</span>(newValue,oldValue)</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line"><span class="comment">//写在Vue实例外面</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;data中的数据属性&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">immediate</span>: <span class="literal">true</span>, <span class="comment">//初始化时让handler调用一下</span></span><br><span class="line">            <span class="comment">//什么时候调用handler？当被监视的属性发生改变时</span></span><br><span class="line">            <span class="comment">//参数 newValue 新值 oldValue旧值</span></span><br><span class="line">            <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">                         <span class="title function_">log</span>(newValue,oldValue)</span><br><span class="line">      &#125;</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure><p>​</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简写  即不进行深度监听才能使用简写</span></span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">     <span class="comment">//完整</span></span><br><span class="line">     <span class="comment">/*hot: &#123;</span></span><br><span class="line"><span class="comment">     //immediate:true,//初始化时，让handler调用以下</span></span><br><span class="line"><span class="comment">     //handler什么时候调用？当hot发生改变时</span></span><br><span class="line"><span class="comment">     handler(newValue, oldValue) &#123;</span></span><br><span class="line"><span class="comment">     console.log(&#x27;hot被修改了&#x27;, newValue, oldValue);</span></span><br><span class="line"><span class="comment">     &#125;</span></span><br><span class="line"><span class="comment">     &#125;*/</span></span><br><span class="line">     <span class="comment">//简写</span></span><br><span class="line">     <span class="title function_">hot</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hot被修改了&#x27;</span>, newValue, oldValue);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 写在外面</span></span><br><span class="line">vm.$watch(<span class="string">&#x27;hot&#x27;</span>, <span class="keyword">function</span> (<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hot被修改了&#x27;</span>, newValue, oldValue);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>应用场景</code>：  数据的变化 需要执行相同的业务(实时监听数据的变化)</p><p><strong>何时被调用？</strong></p><p>1.当被监视的属性发生改变时<br>2.<code>immediate</code>为true时，初始化自动调用</p><p><strong>注意：</strong><br>1.当监视属性变化时，handler回调函数自动调用<br>2.监视的属性必须存在，才能监视</p><h5 id="watch与computed之间的区别"><a href="#watch与computed之间的区别" class="headerlink" title="watch与computed之间的区别"></a>watch与computed之间的区别</h5><p><code>1.computed能完成的功能，watch都可以完成</code><br><code>2.watch能完成的功能，computed不一定能完成，例如watch可以进行异步操作</code><br><code>3.计算属性是无法维护异步操作的数据的</code><br>两个重要的原则<br><code>1.所被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件对象</code><br><code>2.所有不被vue所管理的函数（定时器的回调函数，ajax的回调函数 promise的回调函数等），最好写成箭头函数，这样的this才指向vm 或 组件实例对象</code></p><h4 id="6-name"><a href="#6-name" class="headerlink" title="6. name:"></a>6. name:</h4><p><code>vue-devtools工具中的组件名由name决定</code></p><p><strong>命名规范：</strong><br><code>大驼峰 + 横杠命名法</code><br><code>多个单词组成</code></p><h4 id="7-components-注册组件"><a href="#7-components-注册组件" class="headerlink" title="7. components    注册组件"></a>7. components    注册组件</h4><p>当你创建了一个父子组件，在父组件中使用子组件，如何使用？</p><p>1.导入子组件<br>2.在components中注册子组件<br>3.在模板中使用子组件</p><h4 id="8-props-传值接收"><a href="#8-props-传值接收" class="headerlink" title="8. props  传值接收"></a>8. props  传值接收</h4><p>父给传子传值，使用props接收</p><h4 id="9-directives-自定义指令"><a href="#9-directives-自定义指令" class="headerlink" title="9. directives  自定义指令"></a>9. directives  自定义指令</h4><p><strong>自定义语法何时会被调用？</strong><br>1.指令与元素成功绑定时<br>2.指令所在模板被重新解析时 </p><p>两种注册方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//局部指令  写在Vue实例</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">directives</span>:&#123;</span><br><span class="line">    指令名 : &#123;</span><br><span class="line">        <span class="comment">// (1)inserted : 指令第一次使用执行</span></span><br><span class="line">        <span class="title function_">inserted</span>(<span class="params">el,binding</span>)&#123;</span><br><span class="line">           <span class="comment">// el是指令所在的dom , binding.value是指令值</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// (2)update : 指令值变化</span></span><br><span class="line">        <span class="title function_">update</span>(<span class="params">el,binding</span>)&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 全局指令       全局自定义指令(在main.js注册,任何组件使用</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>( <span class="string">&#x27;指令名&#x27;</span> , &#123;</span><br><span class="line">     <span class="title function_">inserted</span>(<span class="params">el,binding</span>)&#123;&#125;,</span><br><span class="line">     <span class="title function_">update</span>(<span class="params">el,binding</span>)&#123;&#125;</span><br><span class="line">&#125; )</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>配置对象中常用的3种回调名：</strong><br><code>1.bind函数：指令与元素成功绑定时调用</code><br><code>2.inserted函数：指令被添加在标签上时，自动被调用</code><br><code>3.update函数：指令所在模板结构被重新调用</code></p><p>这里面的回调函数，同样是能收到element,binding两个参数</p><p><strong>备注</strong><br>1.指定定义时不加v-，但使用时要加v-<br>2.指令名如果是多个单词，要使用<code>kebeb-case</code>命名方式，不要使用<code>camelCase</code>命名</p><h4 id="10-filters过滤器"><a href="#10-filters过滤器" class="headerlink" title="10. filters过滤器"></a>10. filters过滤器</h4><p>语法：<br>第一步：在data配置项中，配置    data数据中的属性名<br>第二步：data数据中的属性名  |  filters中的方法名<br>第三步：创建filters配置项，方法名(data数据中的属性名)，这里面是形参</p><p>1.只能使用在插值表达式和v-bind属性绑定<br>2.过滤器应该添加在表达式的尾部，由管道符进行调试   <code>|</code><br><code>3.filters与data配置项同级，过滤器必须要有返回值 return</code><br>4.使用filters，最终的值是filters的返回值，而不是data中的属性名的值<br>过滤器函数形参中的val，永远都是管道符前面的那个值<br>5.本质是一个函数，并且只支持在vue2使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name | a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span> <span class="comment">//data中的属性名 | filters中的方法名</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>:<span class="string">&#x27;hello vue&#x27;</span>    <span class="comment">//配置数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">filters</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">a</span>(<span class="params">val</span>) &#123;   <span class="comment">//val拿到data中的属性名</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//charAt(索引值)，获取字符串对应的字符</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//toUpperCase()，让字符串大写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">let</span> first = val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//sclice(从哪截取，到哪结束)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">let</span> last = val.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;last&#125;</span>`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="私有过滤器和全局过滤器"><a href="#私有过滤器和全局过滤器" class="headerlink" title="私有过滤器和全局过滤器"></a>私有过滤器和全局过滤器</h5><p><strong>私有过滤器</strong>：在filters配置项中定义的过滤器方法，只能在当前的vm实例所控制的el区域使用<br><strong>全局过滤器</strong>：在vue实例对象外部定义的方法，能够让所有vue实例都能使用</p><p>语法：<code>Vue.filter(全局过滤器的方法名，全局过滤器的处理函数)</code></p><p>例如：<code>Vue.filter(&#39;方法名&#39;,(data中配置属性名)=&gt;&#123; return 返回值 &#125;)</code></p><p><strong>注意</strong>：<br><code>1.全局过滤器的单词是filter，最后面没有s</code><br><code>2.全局需要定义在vue实例对象的前面，因为js是单线程的</code><br><code>3.如果全局过滤器和私有过滤器名字一致，此时按照就近原则，调用私自的过滤器，不会调用全局的过滤器</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name | a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name | a&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">//全局过滤器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&#x27;a&#x27;</span>,<span class="function">(<span class="params">val</span>)=&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>() + val.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>:<span class="string">&#x27;hello vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//私有过滤器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//在调用时，采取就近原则，调取自身的过滤器</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">filters</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">a</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//charAt(索引值)，获取字符串对应的字符</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//toUpperCase()，让字符串大写</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">let</span> first = val.<span class="title function_">charAt</span>(<span class="number">0</span>).<span class="title function_">toUpperCase</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="comment">//sclice(从哪截取，到哪结束)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">let</span> last = val.<span class="title function_">slice</span>(<span class="number">1</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;first&#125;</span><span class="subst">$&#123;last&#125;</span>`</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&#x27;#root2&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>:<span class="string">&#x27;sb，今天不开心&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="11-mixin混入-配置项"><a href="#11-mixin混入-配置项" class="headerlink" title="11. _mixin混入(配置项)"></a>11. <code>_mixin</code>混入(配置项)</h4><p><strong>功能</strong>：可以将多个组件共用的配置提取成一个混入对象，再将这个混合对象引入<br><code>data中的数据比mixin传过来的数据优先级更高</code><br><code>在写mixins配置项时，一定要记得加s</code><br><strong>步骤</strong><br>1.创建一个混入文件，<code>mixin.js</code><br>2.在混入文件中定义混合，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mixin = &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;...&#125;,</span><br><span class="line">  <span class="attr">methods</span>:&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在需要是使用混入的组件中，使用混入，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>全局混入：在main中引入mixin   <span class="keyword">import</span> &#123;mixin&#125; <span class="keyword">from</span> <span class="string">&#x27;../mixin&#x27;</span></span><br><span class="line">          在main中配置mixin    <span class="title class_">Vue</span>.<span class="title function_">mixin</span>(mixin)</span><br><span class="line"><span class="number">2.</span>局部混入：在局部组件中引入mixin</span><br><span class="line">          在局部组件中配置<span class="attr">mixins</span>:[<span class="string">&#x27;xxx&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web APIs</title>
      <link href="/star/2023/07207.html"/>
      <url>/star/2023/07207.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web-APIs"><a href="#Web-APIs" class="headerlink" title="Web APIs"></a>Web APIs</h1><p><code>Web APIs主要总结了DOM和BOM的相关语法与使用</code></p><span id="more"></span><p>​使用js去操作html元素<br>​DOM(文档对象模型)，BOM(浏览器对象模型)</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="1-1DOM的认知"><a href="#1-1DOM的认知" class="headerlink" title="1.1DOM的认知"></a>1.1DOM的认知</h3><p><strong>是什么？</strong>：DOM是浏览器提供的一套专门用来操作网页内容的功能，用于开发网页内容特效和实现用户交互<br><strong>DOM树</strong>：将html文档以树状结构直观表现出来，文档树直观体现了标签与标签的关系<br><strong>DOM对象</strong>：浏览器根据html生成的标签生成js对象，即把网页内容当对象来处理<br><strong>document</strong>：是<code>dom</code>里提供的一个对象，网页所有内容都在<code>document</code>里面</p><h3 id="1-2DOM获取元素"><a href="#1-2DOM获取元素" class="headerlink" title="1.2DOM获取元素"></a>1.2DOM获取元素</h3><h4 id="获取DOM对象"><a href="#获取DOM对象" class="headerlink" title="获取DOM对象"></a>获取DOM对象</h4><p><strong>选择匹配第一个元素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.querySelecter(&#x27;css选择器&#x27;)</span><br><span class="line">参数：包含一个或多个有效的css选择器的字符串</span><br><span class="line">返回css选择器匹配的第一个元素，如果没匹配到，则返回null</span><br></pre></td></tr></table></figure><p><strong>选择匹配多个元素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">document.querySelecterAll(&#x27;css选择器&#x27;)</span><br><span class="line">参数：包含一个或多个有效的css选择器的字符串</span><br><span class="line">返回一个伪数组</span><br></pre></td></tr></table></figure><p><strong>了解</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.document.getElementById(&#x27;css选择器&#x27;)</span><br><span class="line">根据id获取一个id元素</span><br><span class="line">2.document.getElementByTagName(&#x27;div&#x27;)</span><br><span class="line">根据标签获取一类元素，获取页面所有div</span><br><span class="line">3.document.getElementByClassName(&#x27;w&#x27;)</span><br><span class="line">根据类名获取此类名的所有元素，获取所有类名为w</span><br></pre></td></tr></table></figure><h3 id="1-3设置-修改DOM元素内容"><a href="#1-3设置-修改DOM元素内容" class="headerlink" title="1.3设置&#x2F;修改DOM元素内容"></a>1.3设置&#x2F;修改DOM元素内容</h3><p><strong>document.write() 方法</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.只能将文本内容最追加body中</span><br><span class="line">2.文本中包含的标签会解析</span><br></pre></td></tr></table></figure><p><strong>对象.innerText 属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.能将文本内容添加到任意标签位置</span><br><span class="line">2.文本包含的标签不会被解析</span><br></pre></td></tr></table></figure><p><strong>对象.innerHTML属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.能将文本内容添加到任意标签位置</span><br><span class="line">2.文本包含的标签会被解析</span><br></pre></td></tr></table></figure><h3 id="1-4设置-修改DOM元素属性"><a href="#1-4设置-修改DOM元素属性" class="headerlink" title="1.4设置&#x2F;修改DOM元素属性"></a>1.4设置&#x2F;修改DOM元素属性</h3><p><strong>设置&#x2F;修改元素常用属性(元素自带的属性)</strong><br>对象.属性名&#x3D;属性值<br>例如：<code>img</code>内部还有的属性<code>src</code>等，先获取过来后，<code>img.src=’./images/.png‘</code></p><p><strong>设置&#x2F;修改元素样式属性(css属性)</strong><br><code>通过style属性操作css</code><br><code>对象.style.样式属性 = ‘值’</code><br><strong>注意</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.修改样式通过style属性引出</span><br><span class="line">2.如果属性有-连接符，需要转换为小驼峰命名法</span><br><span class="line">3.赋值的时候不要忘记加单位</span><br></pre></td></tr></table></figure><p><strong>通过类名（className）操作css</strong><br><code>对象.className = &#39;类名1  类名2&#39;</code><br><strong>注意</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">className是使用新值换旧值，会把之前的类干掉，如果需要保存之前的那个类，则也要把之前的类写在className中</span><br></pre></td></tr></table></figure><p><strong>通过classList操作类控制css</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">对象.classList.add(&#x27;类名&#x27;)      追加一个类</span><br><span class="line">对象.classList.remove(&#x27;类名&#x27;)   删除一个类</span><br><span class="line">对象.classList.toggle(&#x27;类名&#x27;)   切换一个类</span><br></pre></td></tr></table></figure><p><strong>设置&#x2F;修改表单元素属性(表单自带的属性)</strong><br>对象.属性名 &#x3D; 属性值<br><code>特殊:对象.属性名 = true/false    例如：disabled，checked，selected</code></p><h3 id="1-5定时器-间歇函数"><a href="#1-5定时器-间歇函数" class="headerlink" title="1.5定时器-间歇函数"></a>1.5定时器-间歇函数</h3><p>每隔一段时间会自动调用<br><strong>1.开始定时器</strong><br><code>setInterval(函数,间隔时间)</code><br><code>setInterval(function()&#123;&#125;,间歇时间)</code><br>单位：毫秒   1000毫秒&#x3D;1秒<br><strong>2.关闭定时器</strong><br><code>let 变量名 = setInterval(函数,间隔时间)</code><br><code>clearInterval(变量名)</code></p><h3 id="1-6DOM事件基础"><a href="#1-6DOM事件基础" class="headerlink" title="1.6DOM事件基础"></a>1.6DOM事件基础</h3><p>事件监听语法：<code>对象.addEventListener(&#39;事件&#39;,要执行的函数)</code><br><strong>事件三要素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.事件源：被哪个dom元素触发</span><br><span class="line">2.事件：用哪种事件触发</span><br><span class="line">3.事件调用的函数：触发了要做什么事</span><br></pre></td></tr></table></figure><p><strong>事件类型</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.鼠标事件</span><br><span class="line">click  点击</span><br><span class="line">mouseenter 鼠标经过   没有冒泡效果</span><br><span class="line">mouseleave  鼠标离开   没有冒泡效果</span><br><span class="line">mousemove  鼠标移动</span><br><span class="line"></span><br><span class="line">2.焦点事件</span><br><span class="line">focus  获得焦点</span><br><span class="line">blur  失去焦点</span><br><span class="line"></span><br><span class="line">3.键盘事件</span><br><span class="line">Keydown  键盘按下触发</span><br><span class="line">Keyup  键盘抬起触发</span><br><span class="line"></span><br><span class="line">4.文本事件</span><br><span class="line">input 用户输入</span><br><span class="line">change</span><br></pre></td></tr></table></figure><h3 id="1-7高阶函数"><a href="#1-7高阶函数" class="headerlink" title="1.7高阶函数"></a>1.7高阶函数</h3><p>可以被简单理解为函数的高级应用<br><strong>1.函数表达式</strong><br>把函数当值来看就是高阶函数<br><code>let fn = function()&#123;&#125;</code><br><strong>2.回调函数</strong><br>把函数1作为参数传递给函数2时，称函数1为回调函数</p><h3 id="1-8环境对象-this"><a href="#1-8环境对象-this" class="headerlink" title="1.8环境对象 this"></a>1.8环境对象 this</h3><p><code>this   他就是一个对象     谁调用，this就指向谁</code></p><p><code>直接调用函数，其实就相当于window.函数，所以this指代window</code></p><h3 id="1-9排他编程思想"><a href="#1-9排他编程思想" class="headerlink" title="1.9排他编程思想"></a>1.9排他编程思想</h3><p>如何使用：<br>1.干掉所有人<br>​     使用for循环</p><p>2.复活他自己<br>     通过this或者下标找到自己或者对应的元素</p><h3 id="1-10DOM节点操作"><a href="#1-10DOM节点操作" class="headerlink" title="1.10DOM节点操作"></a>1.10DOM节点操作</h3><p><strong>DOM节点</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DOM树里面的每一个内容都称之为节点</span><br><span class="line">1.元素节点  所以html标签  html是根节点</span><br><span class="line">2.属性节点  所以html标签内部的属性</span><br><span class="line">3.文本节点 所有文本</span><br></pre></td></tr></table></figure><h4 id="1-增"><a href="#1-增" class="headerlink" title="1.增"></a>1.增</h4><p><strong>第一步：创建节点</strong><br><code>let 对象 = document.createElement(&#39;标签名&#39;)</code><br><strong>第二步：增加节点</strong><br>方法1：插入到父元素的最后一个子元素：<br><code>父元素.appendChild(子元素)</code><br>方法2：插入到父元素中某个子元素的前面：<br><code>父元素.insertBefore(子元素，在哪个元素前面)</code><br><strong>克隆节点</strong><br>同样也是需要上面的两步走<br><strong>特殊情况下，我们新增节点，按照如下操作</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.复制一个原有的节点</span><br><span class="line">2.把复制的节点放入到指定的元素内部</span><br><span class="line">let对象=克隆对象.cloneNode(布尔值)</span><br><span class="line">cloneNode会克隆出一个跟原标签一样的元素，括号内传入布尔值</span><br><span class="line">3.若为true，则代表克隆时会包含后代节点一起克隆</span><br><span class="line">4.若为false，则代表克隆时，只克隆当前，不包含后代节点</span><br><span class="line">默认：false</span><br></pre></td></tr></table></figure><h4 id="2-删"><a href="#2-删" class="headerlink" title="2.删"></a>2.删</h4><p>在js原生DOM中，删除元素必须通过父元素删除<br>语法：<strong>父元素.removeChild(子元素)</strong><br><strong>注意：</strong><br>如果不存在父子关系则删除不成功<br>删除节点和隐藏节点（display:none）有区别：隐藏则还存在，删除则在html中删除节点</p><h4 id="3-查"><a href="#3-查" class="headerlink" title="3.查"></a>3.查</h4><p><strong>父节点查找</strong><br><code>parentNode 属性</code><br>返回最近一级的父节点   找不到返回null</p><p><code>子元素.parentNode</code></p><p><strong>子节点查找</strong><br><code>父元素.children</code>  （重点）  仅获得所有元素节点,返回的还是一个伪数组<br><code>childNodes</code>     获得所有子节点，包括文本节点（空格，换行），注释节点</p><p><strong>兄弟节点查找</strong><br>1.下一个兄弟节点    <code>nextElementSibling 属性</code><br>2.上一个兄弟节点    <code>previousElementSibling 属性</code></p><h2 id="1-11-时间对象"><a href="#1-11-时间对象" class="headerlink" title="1.11 时间对象"></a>1.11 时间对象</h2><p>时间对象：<strong>用来表示时间的对象</strong><br><strong>作用：可以得到当前系统时间</strong><br><strong>如何使用</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.实例化</span><br><span class="line">在代码中发现了new关键字，一般将这个操作称为实例化</span><br><span class="line"></span><br><span class="line">2.获得当前的时间：</span><br><span class="line">let  date  =  new   Date()</span><br><span class="line"></span><br><span class="line">3.获得指定的时间：</span><br><span class="line">let date  =  new  Date(&#x27;2022-07-01&#x27;)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.小括号为空，则是得到当前的时间</span><br><span class="line">2.小括号里面写上时间，可以返回指定的时间</span><br><span class="line">时间对象方法</span><br></pre></td></tr></table></figure><h2 id="1-12-时间对象方法"><a href="#1-12-时间对象方法" class="headerlink" title="1.12 时间对象方法"></a>1.12 时间对象方法</h2><h3 id="1-常用方法"><a href="#1-常用方法" class="headerlink" title="1.常用方法"></a>1.常用方法</h3><p>date（方法名，方法名可以是任意的）.getFullyear()<br>date.getMonth()           获取当月（0-11）从0开始的，如果参数是5月，输出则是4月,记得月份+1<br>date.getDate()     获取当天日期<br>date.getDay()      获取星期几    0-6    与month一样  0是周日，周一是1，周六是6<br>date.getHours    获取小时 0-23<br>date.getMinutes      获取分钟 0-59<br>date.getSeconds    获取秒 0-59<br>利用对象.innerHTML &#x3D; ‘ ‘     将时间带入html页面中</p><h3 id="1-时间戳"><a href="#1-时间戳" class="headerlink" title="1.时间戳"></a>1.时间戳</h3><p>时间戳<br>不需要new创建对象<br><strong>简单写法（常用）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let  date1  =  +new   Date();</span><br><span class="line">这里面的+new   Date()    返回的就是总的毫秒数</span><br></pre></td></tr></table></figure><p><strong>H5新增的    获取总的毫秒数（不需要new创建对象）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">con.log(Date.now());</span><br></pre></td></tr></table></figure><p><strong>只能得到当前的时间戳，前面两种可以返回指定的时间戳</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">d = parseInt(总秒数/60/60/24)     计算天数</span><br><span class="line">h = parseInt(总秒数/60/60%24)    计算小时</span><br><span class="line">m = parseInt(总秒数/60%60)      计算分</span><br><span class="line">s = parseInt(总秒数%60)      计算秒</span><br><span class="line">toLocaleString()`方法返回该日期对象的字符串</span><br></pre></td></tr></table></figure><h2 id="1-12DOM事件高级"><a href="#1-12DOM事件高级" class="headerlink" title="1.12DOM事件高级"></a>1.12DOM事件高级</h2><h3 id="1-事件对象"><a href="#1-事件对象" class="headerlink" title="1.事件对象"></a>1.事件对象</h3><p><strong>获取事件对象</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">事件对象就是一个对象</span><br><span class="line">在事件绑定的回调函数的第一个参数就是事件对象</span><br><span class="line">事件对象一般命名为e,ev,event</span><br></pre></td></tr></table></figure><p><strong>事件对象的常用属性</strong>   e.事件属性<br>type  获取当前的事件类型<br><strong>鼠标事件</strong>     e.鼠标事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clientX/clientY   获取光标对于浏览器可见窗口左上角的位置</span><br><span class="line">offsetX/offsetY    获取光标相对于DOM元素左上角的位置     &lt;div&gt;&lt;/div&gt;    就是在这个div左上角的距离</span><br><span class="line">pageX/pageY 获取光标相对于文档坐标</span><br></pre></td></tr></table></figure><p><strong>键盘事件</strong>  e.key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key 用户按下的键盘键的值</span><br><span class="line">例如：e.key===&#x27;enter&#x27;</span><br></pre></td></tr></table></figure><h3 id="2-事件流"><a href="#2-事件流" class="headerlink" title="2.事件流"></a>2.事件流</h3><p>捕获阶段   –&gt; 事件目标 –&gt;   冒泡阶段<br><strong>捕获阶段</strong>  从父到子   <code>document -&gt;html -&gt;body -&gt;div</code><br>事件捕获：<code>addEventListener第三个参数传入true</code>，代表捕获阶段触发（很少使用）<br><code>若传入false代表冒泡阶段触发，默认false</code><br><strong>冒泡阶段</strong>  从子到父   <code>div -&gt; body -&gt; html -&gt; document</code><br>事件冒泡：当一个元素触发事件后，会依次调用所有父级元素的同名事件<br><strong>阻止事件流</strong><br><code>事件对象.stopPropagation()</code><br>​此方法可以阻断事件流动传播，对于冒泡与捕获都有效<br><code>事件对象.preventDefault()</code><br>​阻止默认行为，比如链接点击不跳转，表单域的跳转<br><strong>事件委托</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">事件委托是给父级添加事件 而不是孩子添加事件</span><br><span class="line">事件对象.target.style.color = &#x27;red&#x27;</span><br><span class="line">孩子相当于      事件对象.target</span><br></pre></td></tr></table></figure><h2 id="1-13网页特效"><a href="#1-13网页特效" class="headerlink" title="1.13网页特效"></a>1.13网页特效</h2><h3 id="1-滚动事件和加载事件"><a href="#1-滚动事件和加载事件" class="headerlink" title="1.滚动事件和加载事件"></a>1.滚动事件和加载事件</h3><p><strong>滚动事件</strong><br>事件名  scroll<br><code>window.addEventListener(&#39;scroll&#39;,function()&#123;&#125;)</code><br><strong>加载事件</strong><br><code>load加载事件</code>      <strong>事件名 load</strong><br><code>window.addEventListener(&#39;load&#39;,function()&#123;&#125;)</code>     等着整个页面加载完毕才回去执行<br><strong>使用场景</strong><br>有些时候需要等页面资源全部处理完了做一些事情<br>老代码喜欢将scrpt写在head中，这时候直接找DOM元素找不到<br><strong>DOMContentLoaded加载事件</strong><br>在html被加载完后去执行，不需要等待css，图片等完全加载<br><code>document.addEventListener(&#39;DOMContentLoaded&#39;,function()&#123;&#125;)</code></p><h3 id="2-元素大小和位置"><a href="#2-元素大小和位置" class="headerlink" title="2.元素大小和位置"></a>2.元素大小和位置</h3><p><strong>scroll （配合offset使用）</strong><br><code>获取宽高（了解）</code><br>获取元素内容的宽高（不包含滚动条），返回值不带单位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrollWidth </span><br><span class="line">scrollHight</span><br></pre></td></tr></table></figure><p><code>获取位置</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">获取元素内容向左向上滚出去看不到的距离</span><br><span class="line">scrollLeft和scrollTop</span><br><span class="line">这两个属性是可以修改的</span><br><span class="line">第一步：先做页面滚动事件，给window添加滚动事件</span><br><span class="line">第二步：得到页面滚动距离</span><br><span class="line">document.documentElement    是html标签</span><br><span class="line">document.documentElement.scrollTop  &gt;= sk.offsetTop</span><br></pre></td></tr></table></figure><p><strong>offset  （配合scroll使用）</strong><br>自动获取某个盒子到顶部的距离<br><strong>获取宽高</strong>：获取元素盒子的宽高，包括元素自身设置的宽高，padding，border</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">offsetWidth</span><br><span class="line">offsetHeight</span><br></pre></td></tr></table></figure><p><code>获取位置</code><br><code>获取元素距离自己定位父级元素的左，上距离，如果父亲没有定位就以body为主</code><br>offsetLeft和offsetTop<br>注意是只读属性  不能修改</p><p><strong>client</strong><br><code>获取宽高</code><br>获取元素的浏览器可视区部分宽高，不包含滚动条和border等<br><code>clientWidth和clientHeight</code><br><code>获取位置</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">获取左边框和上边框宽度</span><br><span class="line">clientLeft和clientTop   只读属性</span><br><span class="line">resize事件</span><br><span class="line">会在窗口尺寸改变的时候触发事件</span><br><span class="line">检测屏幕宽度</span><br><span class="line">let  w  =  document.documentElement.clientWidth</span><br></pre></td></tr></table></figure><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h2 id="Window对象"><a href="#Window对象" class="headerlink" title="Window对象"></a>Window对象</h2><h3 id="BOM（浏览器对象模型）"><a href="#BOM（浏览器对象模型）" class="headerlink" title="BOM（浏览器对象模型）"></a>BOM（浏览器对象模型）</h3><p>BOM是<strong>浏览器对象模型</strong><br><strong>​window是浏览器内置中的全局对象</strong>，我们所学的所有Web APIs的知识内容都是基于window对象实现的<br>​<strong>window对象包括</strong>：<code>document, navigator,location,history,screen</code><br><code>​document是实现DOM的基础，他其实是依附于window的属性</code><br>​注：依附于window对象的所有属性和方法，使用时可以省略window</p><h3 id="定时器-延迟函数"><a href="#定时器-延迟函数" class="headerlink" title="定时器-延迟函数"></a>定时器-延迟函数</h3><p><strong>语法</strong>：<code>setTimeout</code>（回调函数，等待毫秒数）</p><p><code>setTimeout</code>仅仅只执行一次，可以理解为把一段代码延迟执行<br><strong>清除延迟函数</strong><br><code>clearTimeout（）</code>  清除延时函数<br><code>1.let timer = setTimeout（回调函数，等待毫秒数）</code><br><code>2.clearTimeout(timer)</code></p><h3 id="递归函数"><a href="#递归函数" class="headerlink" title="递归函数"></a>递归函数</h3><p>自己调用自己</p><h3 id="js执行机制"><a href="#js执行机制" class="headerlink" title="js执行机制"></a>js执行机制</h3><p>同步和异步<br><strong>同步任务</strong><br>前一个任务结束，才会执行后一个任务<br><strong>异步任务</strong><br>js异步是回调函数实现的<br>分为以下三种：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">普通事件：click，resize等</span><br><span class="line">资源加载：load，error等</span><br><span class="line">定时器：setInterval   setTimeout等</span><br></pre></td></tr></table></figure><p><strong>js的执行机制</strong></p><p>1.先执行执行栈中的同步任务<br>2.异步任务放入任务队列中<br>3.一旦执行栈中的所有同步任务执行完毕，系统就会依次读取任务队列中的异步任务<br>结束等待状态，进入执行栈，开始执行</p><p>event loop（事件循环）：<br>1.主线程执行完毕，查询任务队列，取出一个任务，推入主线程处理<br>2.重复该动作<br>异步队列中，谁先触发就先进入主线程，就先执行谁</p><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p><code>location对象</code>，它拆分保存了URL地址的各个组成部分<br><code>使用方式</code>：<br>location.属性<br>location.方法<br><strong>常用属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.href属性获取完整的URL地址，对其赋值时用于地址的跳转</span><br><span class="line">2.search属性获取地址中携带的参数，符号?后面部分</span><br><span class="line">3.hash属性获取地址中的哈希值，符号#后面的部分</span><br><span class="line">4.reload()方法用来刷新当前页面</span><br><span class="line">传入参数true是强制刷新  </span><br><span class="line">默认是false，刷新</span><br></pre></td></tr></table></figure><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><p><strong>该对象下记录了浏览器自身的相关信息</strong><br>常用属性和方法：<br>通过userAgent检测浏览器的版本及平台</p><h3 id="histroy对象"><a href="#histroy对象" class="headerlink" title="histroy对象"></a>histroy对象</h3><p><strong>该对象与浏览器地址栏的操作相对应，如前进，后退，历史记录等</strong><br>方法和属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">back()     后退功能</span><br><span class="line">forward()    前进功能</span><br><span class="line">go(参数)     参数是1前进1个页面，-1则是后退一个页面</span><br></pre></td></tr></table></figure><h2 id="swiper插件"><a href="#swiper插件" class="headerlink" title="swiper插件"></a>swiper插件</h2><p>这个自己去了解一下，后面的框架组件库不需要自己写，自己引用即可</p><h2 id="本地存储"><a href="#本地存储" class="headerlink" title="本地存储"></a>本地存储</h2><h3 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h3><p><strong>特性</strong><br>​1.生命周期永久生效，除非手动删除，否则关闭页面也会存在<br>​2.可以多窗口（页面）共享（同一浏览器可以共享）<br>​3.以键值对的形式存储使用<br><strong>声明</strong>  <code>localStorage.setitem(&#39;key&#39;,&#39;value&#39;)</code><br><strong>存储，获取，删除简单数据类型</strong><br>​<code>存储数据  localStorage.setItem(&#39;键&#39;,&#39;值&#39;)</code><br>​<code>删除数据  localStorage.removeltem(&#39;键&#39;)</code><br><strong>存储，获取，删除复杂数据类型</strong></p><p><strong>存储数据</strong><br>本地只能存储字符串，无法存储复杂数据类型，需要将复杂数据类型转换为JSON字符串，在存储本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">JSON   属性和值都是双引号包含</span><br><span class="line">JSON.stringify（复杂数据类型）</span><br><span class="line">将复杂数据类型转换为JSON字符串，在存储本地</span><br><span class="line">JSON.parse（JSON字符串）</span><br><span class="line">将JSON字符串转换成对象    取出时使用</span><br><span class="line">例如</span><br><span class="line">let obj = &#123;</span><br><span class="line">    uname:&#x27;pink&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    address:&#x27;北京</span><br><span class="line">&#125;</span><br><span class="line">localStorage.setItem(&#x27;obj&#x27; , JSON.stringify(obj))</span><br><span class="line">获取数据 JSON.parse( localStorage.getItem(&#x27;键&#x27;))</span><br></pre></td></tr></table></figure><h3 id="sessionStorage-了解"><a href="#sessionStorage-了解" class="headerlink" title="sessionStorage(了解)"></a>sessionStorage(了解)</h3><p><strong>特性</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.生命周期为关闭窗口</span><br><span class="line">2.在同一个页面下数据可共享</span><br><span class="line">3.以键值对的形式存储使用</span><br><span class="line">4.用法与localStorage基本相同</span><br></pre></td></tr></table></figure><p><strong>使用方法与localStorage一样</strong></p><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>1.表单验证：用户名表单只能输入英文字母，数字或者下划线，昵称输入框中可以输入中文（匹配）<br>2.过滤掉页面内容中的一些敏感词（替换），或从字符串中获取我们想要的特定部分（提取）等</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p><strong>第一步：声明变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">方法一：new一个RegExp对象</span><br><span class="line">let  变量名   =   new   RegExp(/表达式/)</span><br><span class="line"></span><br><span class="line">方法二：字面量声明</span><br><span class="line">let  变量名  =  /表达式/</span><br></pre></td></tr></table></figure><p><strong>第二步：检测</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.变量名.text(要被检测的字符串)</span><br><span class="line">是变量名的变量值被text方法里面的值检测</span><br><span class="line">变量名的变量值是否包含在text方法里面的字符串里面</span><br><span class="line">如果匹配成功，则返回的是一个true，反之返回false</span><br><span class="line"></span><br><span class="line">2.变量名.exec(被检测的字符串) </span><br><span class="line">如果匹配成功，则返回的是一个数组，反之返回null</span><br><span class="line">是变量名的变量值被exec方法里面的值检测</span><br><span class="line">变量名的变量值是否包含在exec方法里面的字符串里面</span><br></pre></td></tr></table></figure><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p><strong>普通字符：</strong><br>大多数字符仅能描述他们本身，这些字符称作普通字符，例如所有的字母<br>数字，也就是说普通字符只能够匹配字符串中与他们相同的字符</p><p><strong>元字符（特殊字符）</strong><br>是一些具有特殊含义的字符，可以极大的提高了灵活性和强大的匹配能力，比如：规定用户只能输入26个英文字母，普通字符的话abcdefg……但元字符写法[a-z]</p><h4 id="边界符-（表示位置，开头和结尾，必须用什么开头，用什么结尾）"><a href="#边界符-（表示位置，开头和结尾，必须用什么开头，用什么结尾）" class="headerlink" title="边界符  （表示位置，开头和结尾，必须用什么开头，用什么结尾）"></a>边界符  （表示位置，开头和结尾，必须用什么开头，用什么结尾）</h4><p>用来提示字符所处的位置<br>^        表示匹配行首的文本（以谁开始）     &#x2F;^前端&#x2F;<br>$        表示匹配结尾的文本（以谁结尾）    &#x2F;前端$&#x2F;<br>如果^ 和 $  一起使用则是精确定位           &#x2F;^前端$&#x2F;</p><h4 id="量词-表示重复次数"><a href="#量词-表示重复次数" class="headerlink" title="量词    (表示重复次数)"></a>量词    (表示重复次数)</h4><p>设定某个模式出现的次数</p><p>(*)            重复0次或者更多次              &#x2F;a *&#x2F;<br>(+)            重复1次或者更多次              &#x2F;a +&#x2F;<br>？             重复0次或者1次                   &#x2F;^a ?$&#x2F;<br>{n}           重复n次                                 &#x2F;^a {次数}$&#x2F;<br>{n,}          重复n次或更多次                  &#x2F;^a {次数，}$&#x2F;<br>{n,m}       重复n到m次                          &#x2F;^a {次数，}$&#x2F;<br>注意：符号两边千万不要出现空格</p><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><p><strong>[]匹配字符集合</strong><br>后面是字符串只要包含abc中任意一个字符，都返回true</p><p>1.在[] 里面加  -   连字符<br>表示一个范围<br>[a-z]       表示a-z取一个<br>[1-9]       表示大小写都可以取一个<br>[a-zA-Z]    表示1-9取一个</p><p>2.在[] 里面加  ^  取反符<br>[ ^1-9]       匹配除去1-9以外的字符</p><p>3 . 匹配   除换行符   以外的任何单个字符</p><p>4 .预定义：指的是某些常见模式的简写方式<br>\d       相当于[0-9]<br>\D      相当于[ ^ 0-9 ]<br>\w      相当于[A-Za-z0-9_]         匹配任意字母，数字，下划线_<br>\W      相当于[ ^A-Za-z0-9_]    匹配    除任意字母，数字，下划线     以外的字符<br>\s      相当于[\t\r\n\v\f]            匹配空格 （换行符、制表符，空格符等）<br>\S      相当于[ ^\t\r\n\v\f]         匹配非空格 （换行符、制表符，空格符等）   的字符</p><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><p>&#x2F;表达式&#x2F;修饰符<br>i     正则匹配时，字母不区分大小写        ignore<br>g     匹配所有满足正则表达式的效果       global</p><p>replace    替换符<br><strong>字符串.replace(&#x2F;正则表达式&#x2F;,’替换文本’)</strong></p><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><h3 id="回流与重绘"><a href="#回流与重绘" class="headerlink" title="回流与重绘"></a>回流与重绘</h3><p>html进行结构排版  生成DOM树<br>css进行样式排版  生成样式规则<br>根据DOM树和样式规则生成渲染树<br>回流：根据渲染树，得到节点的位置大小<br>重绘：根据计算和获取的信息对页面进行绘制<br>最后显示在页面</p><h3 id="排他思想"><a href="#排他思想" class="headerlink" title="排他思想"></a>排他思想</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>4<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>5<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;button&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; btn.<span class="property">length</span>;i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        btn[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span>(<span class="keyword">let</span> j = <span class="number">0</span>;j &lt; btn.<span class="property">length</span>;j++ )&#123;</span></span><br><span class="line"><span class="language-javascript">                btn[j].<span class="property">className</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            btn[i].<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;pink&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125; </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="window-BOM-包括"><a href="#window-BOM-包括" class="headerlink" title="window(BOM)包括"></a>window(BOM)包括</h3><p>navigator对象<br>location对象<br>histroy对象<br>document对象<br>screen对象</p><h3 id="js运行机制"><a href="#js运行机制" class="headerlink" title="js运行机制"></a>js运行机制</h3><p>1）所有的同步任务都在主线程上执行，行成一个执行栈。<br>2）除了主线程之外，还存在一个任务列队，只要异步任务有了运行结果，就在任务列队中植入一个时间标记。<br>3）主线程完成所有任务(执行栈清空），就会读取任务列队，先执行微任务队列在执行宏任务队列。<br>4）重复上面三步。<br>只要主线程空了，就会读取任务列队，这就是js的运行机制，也被称为 event loop（事件循环）</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebRTC</title>
      <link href="/star/2023/0720589.html"/>
      <url>/star/2023/0720589.html</url>
      
        <content type="html"><![CDATA[<h3 id="WebRTC"><a href="#WebRTC" class="headerlink" title="WebRTC"></a>WebRTC</h3><p><code>这篇总结主要介绍一下WebRTC</code></p><span id="more"></span><p>WebRTC是基于navigator.mediaDevices中的getUserMedia()方法实现的</p><p>直播RTMP  单项传播</p><p>视频&#x2F;语音WebRTC     双向传播</p><h1 id="WebRTC配合websocket"><a href="#WebRTC配合websocket" class="headerlink" title="WebRTC配合websocket"></a>WebRTC配合websocket</h1><p>是一个互联网浏览器间的实时通信平台</p><p>WebRTC虽然冠以’web’之名，但不仅仅受限于传统互联网应用或浏览器的终端运行环境，实际上无论终端环境是浏览器，桌面应用，移动设备，只要ip连接可到达且符合WebRTC规范就可以互通</p><h3 id="前端获取摄像头流程"><a href="#前端获取摄像头流程" class="headerlink" title="前端获取摄像头流程"></a>前端获取摄像头流程</h3><p>1.初始化button，video控件<br>2.绑定打开摄像头响应事件onOpenCamera<br>3.如果要打开摄像头则点击”打开摄像头按钮”，触发onOpenCamera事件的调用<br>4.当触发onOpenCamera调用时：<br>    a.设置约束条件，即<strong>getUserMedia</strong>函数的入参<br>    b.getUserMedia有两种情况，一是正常打开摄像头，使用handleSuccess处理：一种是打开摄像头失败，使用handleError处理<br>    c.当正常打开摄像头时，则将getUserMedia返回的stream对象赋值给video控件的srcObject,即可将视频显示出来</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">html文件</span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;vid&quot;</span> <span class="attr">autoplay</span> <span class="attr">playsinline</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>打开摄像头<span class="tag">&lt;<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">js文件</span><br><span class="line"><span class="keyword">const</span> constrains = &#123;</span><br><span class="line">    <span class="attr">audio</span>:<span class="literal">true</span>,</span><br><span class="line">    <span class="attr">video</span>:&#123;<span class="attr">width</span>:<span class="number">1200</span>,<span class="attr">height</span>:<span class="number">720</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//获取成功的结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleSuccess</span>(<span class="params">stream</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#vid&#x27;</span>)</span><br><span class="line">    video.<span class="property">srcObject</span> = stream</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//失败的结果</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleError</span>(<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*他这个就是利用navigator.mediaDevices.getUserMedia(constrains)的成功拿到它成功的结果，</span></span><br><span class="line"><span class="comment">而constrains配置项则是指定了请求的媒体类型和相对应的参数，例如是音频还是视频？</span></span><br><span class="line"><span class="comment">分辨率是多少？分辨率的最大值是多少，最小值是多少？同时能设置你所理想的值通过ideal*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onOpenCamera</span>(<span class="params"></span>)&#123;</span><br><span class="line">    navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(constrains)</span><br><span class="line">        .<span class="title function_">then</span>(handleSuccess)</span><br><span class="line">        .<span class="title function_">catch</span>(handleError)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,onOpenCamera)</span><br></pre></td></tr></table></figure><h3 id="前端获取音频流程"><a href="#前端获取音频流程" class="headerlink" title="前端获取音频流程"></a>前端获取音频流程</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">html文件</span><br><span class="line">&lt;radio id=<span class="string">&quot;rad&quot;</span> autoplay controls&gt;&lt;/radio&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;播放录音&lt;button&gt;</span><br><span class="line"></span><br><span class="line">js文件</span><br><span class="line">const constrains = &#123;</span><br><span class="line">    audio:true,</span><br><span class="line">    video:&#123;width:1200,height:720&#125;</span><br><span class="line">    &#125;</span><br><span class="line">//获取成功的结果</span><br><span class="line">function handleSuccess(stream) &#123;</span><br><span class="line">    const video = document.querySelector(&#x27;#rad&#x27;)</span><br><span class="line">    audio.srcObject = stream</span><br><span class="line">&#125;</span><br><span class="line">//失败的结果</span><br><span class="line">function handleError(error) &#123;</span><br><span class="line">    console.log(error)</span><br><span class="line">&#125;</span><br><span class="line">/*他这个就是利用navigator.mediaDevices.getUserMedia(constrains)的成功拿到它成功的结果，</span><br><span class="line">而constrains配置项则是指定了请求的媒体类型和相对应的参数，例如是音频还是视频？分辨率是多少？</span><br><span class="line">分辨率的最大值是多少，最小值是多少？同时能设置你所理想的值通过ideal*/</span><br><span class="line">function onOpenCamera()&#123;</span><br><span class="line">    navigator.mediaDevices.getUserMedia(constrains)</span><br><span class="line">        .then(handleSuccess)</span><br><span class="line">        .catch(handleError)</span><br><span class="line">&#125;</span><br><span class="line">document.querySelector(&#x27;#btn&#x27;).addEventListener(&#x27;click&#x27;,onOpenCamera)</span><br></pre></td></tr></table></figure><h3 id="navigator-mediaDevices-getUserMedia"><a href="#navigator-mediaDevices-getUserMedia" class="headerlink" title="navigator.mediaDevices.getUserMedia()"></a>navigator.mediaDevices.getUserMedia()</h3><p>用于获取媒体流，用于音视频采集和播放。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">navigator.mediaDevices.getUserMedia(constraints)返回的是一个promise对象，使用then可以拿到他成功的结果，而他的成功的结果即视频的实时流</span><br></pre></td></tr></table></figure><p>constraints这个形参是一个对象<br>1.可以配置是否显示音频&#x2F;视频</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; audio: true, video: true &#125;</span><br></pre></td></tr></table></figure><p>2.同样可以配置屏幕的分辨率，浏览器会尝试满足</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;audio: true,video: &#123; width: 1280, height: 720 &#125;&#125;</span><br></pre></td></tr></table></figure><p>3.同样可以强制要求配置你的分辨率的最大值&#x2F;最小值，浏览器会强制满足</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">以下参数表示要求获取最低为 1280x720 的分辨率</span><br><span class="line">&#123;audio: true,</span><br><span class="line">  video: &#123;width: &#123; min: 1280 &#125;,height: &#123; min: 720 &#125;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><p>4.在第三点的强制下，可能会满足不了，因此promise会返回失败的结果，因此我们可以给他设置一个理想值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;audio: true,</span><br><span class="line">  video: &#123;</span><br><span class="line">    width: &#123; min: 1024, ideal: 1280, max: 1920 &#125;,</span><br><span class="line">    height: &#123; min: 776, ideal: 720, max: 1080 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.开启前置摄像头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; audio: true, video: &#123; facingMode: &quot;user&quot; &#125; &#125;</span><br></pre></td></tr></table></figure><p>6.开启后置摄像头</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; audio: true, video: &#123; facingMode: &#123; exact: &quot;environment&quot; &#125; &#125; &#125;</span><br></pre></td></tr></table></figure><p>视频完整代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//html   </span></span><br><span class="line"><span class="comment">//playsinline该属性标识内联播放，如果不设置，那么它将会全屏播放</span></span><br><span class="line">&lt;video id=<span class="string">&quot;vid&quot;</span> autoplay playsinline&gt;&lt;/video&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;打开摄像头&lt;button&gt;</span><br><span class="line">//js</span><br><span class="line">document.querySelector(&#x27;#btn&#x27;).addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="line">    navigator.mediaDevices.getUserMedia(a).then(res=&gt;&#123;</span><br><span class="line">    //res则是成功的一个媒体内容的流.</span><br><span class="line">    //因此你此时只需要把这个媒体内容的流.赋值给video的实时流即可</span><br><span class="line">          document.querySelector(&#x27;#vid&#x27;).srcObject = res</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(null)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>音频完整代码与视频一致，只需要将video改为audio即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio id=<span class="string">&quot;rad&quot;</span> autoplay controls&gt;&lt;/audio&gt;</span><br><span class="line">&lt;button id=&quot;btn&quot;&gt;播放录音&lt;button&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    navigator.mediaDevices.getUserMedia(&#123;audio:true&#125;)</span><br><span class="line">    .then(res=&gt;&#123;</span><br><span class="line">        document.querySelector(&#x27;#btn&#x27;).addEventListener(&#x27;click&#x27;,()=&gt;&#123;</span><br><span class="line">          document.querySelector(&#x27;#rad&#x27;).srcObject = res</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="前端同时打开摄像头与麦克风"><a href="#前端同时打开摄像头与麦克风" class="headerlink" title="前端同时打开摄像头与麦克风"></a>前端同时打开摄像头与麦克风</h4><p>直接把constraints这个形参中的audio与video都为true即可</p>]]></content>
      
      
      <categories>
          
          <category> Web前端扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/star/2023/0720588.html"/>
      <url>/star/2023/0720588.html</url>
      
        <content type="html"><![CDATA[<h3 id="websocket"><a href="#websocket" class="headerlink" title="websocket"></a>websocket</h3><p><code>这篇总结主要介绍一下websocket</code></p><span id="more"></span><h2 id="常见的消息推送方案"><a href="#常见的消息推送方案" class="headerlink" title="常见的消息推送方案"></a>常见的消息推送方案</h2><p>1.轮询<br>2.长轮询<br>3.SSE<br>4.websocket</p><h3 id="轮询方式"><a href="#轮询方式" class="headerlink" title="轮询方式"></a>轮询方式</h3><p>轮询：指的是浏览器以指定的时间间隔向服务器发出http请求，服务器实时返回数据给浏览器</p><p>长轮询：浏览器发出ajax请求，服务器端接收请求后，如果没有数据，则会阻塞请求直到有数据或者超时才会返回</p><h3 id="SSE-server-sent-event-：服务器发送事件"><a href="#SSE-server-sent-event-：服务器发送事件" class="headerlink" title="SSE(server-sent event)：服务器发送事件"></a>SSE(server-sent event)：服务器发送事件</h3><p>1.SSE在服务器和客户端之间打开了一个单项通道，是服务器给浏览器的</p><p>2.服务器响应的不再是一次性的数据包，即不是把数据一次性返回回来，而是text&#x2F;event-stream类型的数据流信息</p><p>3.服务器有数据变更时将以数据流式传输到客户端（数据流式指的就是有源源不断的数据从服务器响应给客户端）</p><h2 id="websocket-1"><a href="#websocket-1" class="headerlink" title="websocket"></a>websocket</h2><h3 id="1-websocket介绍"><a href="#1-websocket介绍" class="headerlink" title="1.websocket介绍"></a>1.websocket介绍</h3><p>是什么？websocket是一种基于TCP连接上进行<strong>全双工协议</strong></p><p>什么是<strong>全双工协议</strong>？：允许数据在两个方向上同时传输</p><p>什么是<strong>半双工协议</strong>？：允许数据在两个方向上传输，但是同一个时间段内只允许一个方向上传输</p><h3 id="2-websocket原理"><a href="#2-websocket原理" class="headerlink" title="2.websocket原理"></a>2.websocket原理</h3><p>浏览器给服务器发送http的协议请求，这个请求头中带有UPgrade.websocket，要求将协议升级为websocket协议。服务器响应头中的响应状态码为101 Switching Protocls，此时就将http协议转换为websocket协议了。再让浏览器发送下一次请求时开始，都是发送的websocket协议的请求了</p><h3 id="3-浏览器websocket-API-即前端应该怎么做？"><a href="#3-浏览器websocket-API-即前端应该怎么做？" class="headerlink" title="3.浏览器websocket API  (即前端应该怎么做？)"></a>3.浏览器websocket API  (即前端应该怎么做？)</h3><h4 id="1-websocket-相关事件"><a href="#1-websocket-相关事件" class="headerlink" title="1.websocket 相关事件"></a>1.websocket 相关事件</h4><p>open事件          ws.onopen          连接建立时触发</p><p>message事件   ws.onmessage    浏览器接收到服务器发送的数据时触发</p><p>close事件          ws.onclose           连接关闭时触发</p><p>error事件          ws.onerror           在WebSocket连接发生错误时触发。</p><h4 id="2-websocket-对象提供的方法"><a href="#2-websocket-对象提供的方法" class="headerlink" title="2.websocket 对象提供的方法"></a>2.websocket 对象提供的方法</h4><p>send(数据)    通过websocket对象调用该方法发送数据给服务器</p><h4 id="3-步骤："><a href="#3-步骤：" class="headerlink" title="3.步骤："></a>3.步骤：</h4><p>1.创建websocket对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="variable constant_">URL</span>)</span><br><span class="line">ws.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//连接建立时给个消息提示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn1&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">//拿到点击后输入框数据</span></span><br><span class="line">     <span class="keyword">let</span> msg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">value</span></span><br><span class="line">     <span class="comment">// 发送消息，调用ws对象的send方法，发送输入框数据</span></span><br><span class="line">     ws.<span class="title function_">send</span>(msg)</span><br><span class="line">     <span class="comment">//渲染页面</span></span><br><span class="line">     content.<span class="property">innerHTML</span> += <span class="string">`用户：<span class="subst">$&#123;msg&#125;</span> &lt;br&gt;`</span></span><br><span class="line">   &#125;</span><br><span class="line">ws.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">evt</span>)&#123;</span><br><span class="line">    <span class="comment">//通过evt.data可以获取服务器发送的数据。同时通过evt.data渲染数据</span></span><br><span class="line">&#125;</span><br><span class="line">ws.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//连接关闭时给个消息提示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>URL这个参数该如何去写？</strong><br>格式：协议:&#x2F;&#x2F;ip地址&#x2F;访问路径<br>协议：协议名应为ws</p><h3 id="4-原生js实现机器人客服"><a href="#4-原生js实现机器人客服" class="headerlink" title="4.原生js实现机器人客服"></a>4.原生js实现机器人客服</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入聊天内容&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn1&quot;</span>&gt;</span>发送消息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn2&quot;</span>&gt;</span>退出聊天室<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> content = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.content&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.与服务器进行WebSocket链接</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// wss://echo.websocket.org : 这个接口你给它发什么，它就回复你什么</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> ws = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://echo.websocket.org&#x27;</span>) <span class="comment">// 建立与服务端地址的连接</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.连接成功回调</span></span></span><br><span class="line"><span class="language-javascript">      ws.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 如果执行此函数 表示与服务器建立关系成功</span></span></span><br><span class="line"><span class="language-javascript">        content.<span class="property">innerHTML</span> += <span class="string">&#x27;提示：&lt;p style=&quot;color:red&quot;&gt;websockt链接成功&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//3.发送消息</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn1&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1111</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> msg = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 发送消息</span></span></span><br><span class="line"><span class="language-javascript">        ws.<span class="title function_">send</span>(msg)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//渲染页面</span></span></span><br><span class="line"><span class="language-javascript">        content.<span class="property">innerHTML</span> += <span class="string">`用户：<span class="subst">$&#123;msg&#125;</span> &lt;br&gt;`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//4.接收消息</span></span></span><br><span class="line"><span class="language-javascript">      ws.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// event中的data就是服务器发过来的消息</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(event);</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        content.<span class="property">innerHTML</span> += <span class="string">`服务器：<span class="subst">$&#123;event.data&#125;</span> &lt;br&gt;`</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//5.关闭连接</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn2&#x27;</span>).<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        ws.<span class="title function_">close</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//6.成功关闭链接回调</span></span></span><br><span class="line"><span class="language-javascript">      ws.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 关闭连接成功</span></span></span><br><span class="line"><span class="language-javascript">        content.<span class="property">innerHTML</span> += <span class="string">&#x27;提示：&lt;p style=&quot;color:red&quot;&gt;websockt关闭成功&lt;/p&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-vue中如何使用？"><a href="#5-vue中如何使用？" class="headerlink" title="5.vue中如何使用？"></a>5.vue中如何使用？</h3><p>下载：使用vue ui安装，或<code>npm i socket.io-client</code></p><ul><li><p>1.连接服务器</p><ul><li><code>const socket = io(&#39;http://118.24.62.36:8888&#39;)</code></li><li>机器人聊天客服的网址是：<a href="http://118.24.62.36:8888/">http://118.24.62.36:8888</a></li></ul></li><li><p>2.连接成功回调</p><ul><li><pre><code class="javascript">socket.on(&#39;connect&#39;, () =&gt; &#123;   console.log(&#39;建立连接成功了&#39;)&#125;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 3.接收服务器消息</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    socket.on(&#x27;message&#x27;, msg =&gt; &#123;&#125;)</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>4.给服务器发消息</p><ul><li><pre><code class="javascript">socket.emit(&#39;message&#39;, &#123;  // 消息  msg: &#39;消息内容&#39;,  // 时间戳  timestamp: Date.now()&#125;)<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 5.断开链接</span><br><span class="line"></span><br><span class="line">  - ```javascript</span><br><span class="line">    socket.disconnect()</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;student-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">van-nav-bar</span></span></span><br><span class="line"><span class="tag">      <span class="attr">fixed</span></span></span><br><span class="line"><span class="tag">      <span class="attr">left-arrow</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">click-left</span>=<span class="string">&quot;$router.back()&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">title</span>=<span class="string">&quot;机器人&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">van-nav-bar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;item in message&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 左侧是机器人 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;chat-item left&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:key</span>=<span class="string">&quot;item.timestamp&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">v-if</span>=<span class="string">&quot;item.isStu === true&quot;</span></span></span><br><span class="line"><span class="tag">        &gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-image</span> <span class="attr">fit</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">round</span> <span class="attr">:src</span>=<span class="string">&quot;littleQ&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-pao&quot;</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 右侧是当前用户 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-item right&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.timestamp&quot;</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chat-pao my&quot;</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">van-image</span> <span class="attr">fit</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">round</span> <span class="attr">:src</span>=<span class="string">&quot;self&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;reply-container van-hairline--top&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">van-search</span> <span class="attr">v-model.trim</span>=<span class="string">&quot;word&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;说点什么...&quot;</span> @<span class="attr">search</span>=<span class="string">&quot;send&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">van-search</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 导入精美的图片</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> littleQ <span class="keyword">from</span> <span class="string">&#x27;@/assets/student.jpg&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> self <span class="keyword">from</span> <span class="string">&#x27;@/assets/teacher.png&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// socket.io的客户端</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> io <span class="keyword">from</span> <span class="string">&#x27;socket.io-client&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;student&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  data () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">word</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: [], <span class="comment">// 聊天信息</span></span></span><br><span class="line"><span class="language-javascript">      littleQ, <span class="comment">// 机器人</span></span></span><br><span class="line"><span class="language-javascript">      self, <span class="comment">// 自己</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">socket</span>: <span class="literal">undefined</span> <span class="comment">// socket对象</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  created () &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.开始连接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">socket</span> = <span class="title function_">io</span>(<span class="string">&#x27;http://118.24.62.36:8888&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.链接成功回调</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">on</span>(<span class="string">&#x27;connect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;建立连接成功了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.接收服务器返回数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">on</span>(<span class="string">&#x27;message&#x27;</span>, <span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收到消息了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;msg:&#x27;</span>, msg)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        ...msg,</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 是机器人</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">isStu</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//4.发送消息</span></span></span><br><span class="line"><span class="language-javascript">    send () &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">word</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">word</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">socket</span>.<span class="title function_">emit</span>(<span class="string">&#x27;message&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 消息</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="variable language_">this</span>.<span class="property">word</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 时间戳</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>()</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 本地数组也要更新</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">message</span>.<span class="title function_">push</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">msg</span>: <span class="variable language_">this</span>.<span class="property">word</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 时间戳</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">timestamp</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 不是机器人</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isStu</span>: <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">word</span> = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.student-container</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#fafafa</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">46px</span> <span class="number">0</span> <span class="number">50px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.van-nav-bar</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#3296fa</span>;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.van-nav-bar__title</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.van-icon</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.chat-list</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow-y</span>: scroll;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.chat-item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.van-image</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">vertical-align</span>: top;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.chat-pao</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">vertical-align</span>: top;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-width</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">max-width</span>: <span class="number">70%</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">min-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">line-height</span>: <span class="number">38px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">0.5px</span> solid <span class="number">#c2d9ea</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#e0effb</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">word-break</span>: break-all;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &amp;<span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">top</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-top</span>: <span class="number">0.5px</span> solid <span class="number">#c2d9ea</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-right</span>: <span class="number">0.5px</span> solid <span class="number">#c2d9ea</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="number">#e0effb</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">      <span class="selector-class">.chat-pao</span><span class="selector-class">.my</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: <span class="number">#9eea6a</span>;</span></span><br><span class="line"><span class="language-css">        &amp;<span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="number">#9eea6a</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.chat-item</span><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.chat-pao</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      &amp;<span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">right</span>: -<span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.chat-item</span><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: left;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.chat-pao</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      &amp;<span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">left</span>: -<span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">135deg</span>);</span></span><br><span class="line"><span class="language-css">      &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.reply-container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">44px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web前端扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>whistle</title>
      <link href="/star/2023/072058489.html"/>
      <url>/star/2023/072058489.html</url>
      
        <content type="html"><![CDATA[<h1 id="Whistle"><a href="#Whistle" class="headerlink" title="Whistle"></a>Whistle</h1><p><code>Whistle他是一个基于node.js的网络调试工具</code></p><span id="more"></span><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h4 id="一-安装"><a href="#一-安装" class="headerlink" title="一.安装"></a>一.安装</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i -g whistle   <span class="comment">//下载whistle</span></span><br><span class="line">npm i -g whistle &amp;&amp; w2 start --init   <span class="comment">//下载whistle并初始化whistle</span></span><br></pre></td></tr></table></figure><h4 id="二-启动-停止-重启"><a href="#二-启动-停止-重启" class="headerlink" title="二.启动&#x2F;停止&#x2F;重启"></a>二.启动&#x2F;停止&#x2F;重启</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">w2 start      启动</span><br><span class="line">w2 restart    重启</span><br><span class="line">w2 stop       停止</span><br><span class="line">w2 add        添加规则</span><br></pre></td></tr></table></figure><h4 id="三-手机或电脑配置代理"><a href="#三-手机或电脑配置代理" class="headerlink" title="三.手机或电脑配置代理"></a>三.手机或电脑配置代理</h4><p>网络 &gt; 代理 &gt; 使用服务器代理</p><h4 id="四-安装浏览器插件-Proxy-SwitchyOmega"><a href="#四-安装浏览器插件-Proxy-SwitchyOmega" class="headerlink" title="四.安装浏览器插件 Proxy SwitchyOmega"></a>四.安装浏览器插件 Proxy SwitchyOmega</h4><p><a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif</a></p><p>无法下载可使用链接: <a href="https://pan.baidu.com/s/1f5RH-lo2Xk7fkcpEI4hXpg">https://pan.baidu.com/s/1f5RH-lo2Xk7fkcpEI4hXpg</a> 提取码: yjjq</p><h2 id="二-高级"><a href="#二-高级" class="headerlink" title="二.高级"></a>二.高级</h2><h4 id="1-请求转发-解决数据模拟"><a href="#1-请求转发-解决数据模拟" class="headerlink" title="1.请求转发(解决数据模拟)"></a>1.请求转发(解决数据模拟)</h4><p>将请求的数据替换为本地文件，也就是说，你请求的那个网站，他不会跳转到那个网址，而是会转到你本地的文件中，去读取你的数据</p><p>就是我们一开始写项目时，后端不能立即把接口写出来，而只是给我们数据结构，因此我们的只能使用mock.js插件去模拟数据，而有了whistle。我们则无需等待数据。自己写点数据，并发送请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">后端接口(不是随便写的接口，是后台给我们的)   本地文件</span><br><span class="line"><span class="attr">https</span>:<span class="comment">//api/getList                     file://user/Desktop/test.json</span></span><br></pre></td></tr></table></figure><p>如果浏览器是在访问<code>https://api/getList</code>这个链接，就让他转移到<code>file://user/Desktop/test.json</code>去读取数据</p><h4 id="2-请求转发-解决线下调试线上"><a href="#2-请求转发-解决线下调试线上" class="headerlink" title="2.请求转发(解决线下调试线上)"></a>2.请求转发(解决线下调试线上)</h4><p>这个就是你的项目上线了，但是你的某个文件出现了问题，然而你知道是哪个文件出现了问题，但是你只能操作开发环境的代码，但是你开发环境的代码改好了，线上仍然会有问题，此时，whistle它出现了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">线上某个项目的路径         本地代码路径</span><br><span class="line">https://api/getList.js   file://user/Desktop/getList.js</span><br></pre></td></tr></table></figure><p>此时，你就能通过网址访问线上是，你的线上<code>https://api/getList.js</code>这个文件，会接入到本地项目的<code>file://user/Desktop/getList.js</code>文件，你改变本地的这个文件，你线上的文件也会改变。从而达到线下文件调试线上项目环境。通过debugger调试</p><h4 id="3-请求转发-解决跨域"><a href="#3-请求转发-解决跨域" class="headerlink" title="3.请求转发(解决跨域)"></a>3.请求转发(解决跨域)</h4><p>就是我随便请求一个网址，他会自动的帮我们请求到配置的网址</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我的网址                    后端提供的接口</span><br><span class="line"><span class="attr">http</span>:<span class="attr">localhost</span>:<span class="number">8000</span>/list   <span class="attr">https</span>:<span class="comment">//hhh/list</span></span><br></pre></td></tr></table></figure><p>本地是不是<code>localhost:8000</code>？我访问<code>http:localhost:8000/list</code> 是不是不会跨域，而我再配置，让访问<code>http:localhost:8000/list </code>时，自动访问<code>https://hhh/list</code>，是不是就不会有跨越问题了</p><h4 id="4-注入html，css，js"><a href="#4-注入html，css，js" class="headerlink" title="4.注入html，css，js"></a>4.注入html，css，js</h4><p>注入css，在Rules配置中配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">百度网址        本地css文件</span><br><span class="line">www.baidu.com  css://user/list.css</span><br></pre></td></tr></table></figure><p>将本地文件注入进去，从而改变百度文字颜色</p><p>注入js，在Values配置中配置<br>1.创建两个Values，第一个存储js源码，第二个则是实例化</p><p>2.在Rules配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">你需要引入的网址    引入的js文件</span><br><span class="line">www.<span class="property">baidu</span>.<span class="property">com</span>      <span class="attr">jsPrepend</span>:<span class="comment">//&#123;第一个存储源码的名字&#125;  //引入源码</span></span><br><span class="line">www.<span class="property">baidu</span>.<span class="property">com</span>      <span class="attr">jsPrepend</span>:<span class="comment">//&#123;第二个存储源码的名字&#125;  //引入实例</span></span><br><span class="line">www.<span class="property">baidu</span>.<span class="property">com</span>      <span class="attr">log</span>:<span class="comment">//                            //在whistle中也打印log</span></span><br></pre></td></tr></table></figure><p>注意：插件vConsole</p><h4 id="5-使用log功能打印日志"><a href="#5-使用log功能打印日志" class="headerlink" title="5.使用log功能打印日志"></a>5.使用log功能打印日志</h4><p>移动端无法使用浏览器调试台，whistle解决了这个问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">指定对应的网址</span><br><span class="line">www.<span class="property">baidu</span>.<span class="property">com</span>      <span class="attr">log</span>:<span class="comment">//                            //在whistle中也打印log</span></span><br></pre></td></tr></table></figure><h4 id="6-解决跨域"><a href="#6-解决跨域" class="headerlink" title="6.解决跨域"></a>6.解决跨域</h4><p>方法1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要跨域的网址    解决跨域的属性</span><br><span class="line">http://user/list resCors://*</span><br></pre></td></tr></table></figure><p>方法2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">自己的ip与端口                需要跨域的网址</span><br><span class="line">http://localhost:8080/list   http://user/list</span><br></pre></td></tr></table></figure><p>注意：<br>1.图片跨域devserver无法解决<br>2.devserver解决跨域，并且改配置文件，需要重新启动<br>3.如果需求切换用户，则需要修改cookie然后重新启动webpack，等待时间长<br>4.如果将代理由开发环境切为线上环境（如定位线上bug），又需要改proxy，还要修改cookie<br>5.当在微前端场景跳转时页面会白，如ke.qq.com对应项目A，ke.qq.com&#x2F;course&#x2F; 对应项目B,此时跳转后，本地没有启动B项目，页面会空白</p><p><code>ignore//*</code> 是一种规则配置，用于忽略特定的请求或响应。</p><p>1.设置静态文件转发, heimahr.itheima.net localhost:9528 ，检查项目是否转发成功<br>2.去掉项目代理，即webpack的proxy<br>3.设置接口忽略规则 heimahr.itheima.net&#x2F;api&#x2F; ignore:&#x2F;&#x2F;*<br>4.发现图片无法显示，设置图片显示规则<br>5.热更新失效，给devserver加disableHostCheck: true<br>6.填写readme</p><p>队友如何使用？</p><p>1.创建一个配置项级别文件     .whistle.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span>.<span class="property">name</span> = <span class="string">&#x27;xx开发环境&#x27;</span></span><br><span class="line"><span class="keyword">export</span>.<span class="property">rules</span> = <span class="string">`</span></span><br><span class="line"><span class="string">后端接口地址   本地端口地址</span></span><br><span class="line"><span class="string">后端接口地址/api  ignore://*   忽略掉后缀为api的路径，因为本地没有api路径</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><p>2.w2 add</p>]]></content>
      
      
      <categories>
          
          <category> Web前端扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vsCode代码片段配置</title>
      <link href="/star/2023/0720374.html"/>
      <url>/star/2023/0720374.html</url>
      
        <content type="html"><![CDATA[<h2 id="vsCode代码片段配置"><a href="#vsCode代码片段配置" class="headerlink" title="vsCode代码片段配置"></a>vsCode代码片段配置</h2><p><code>本篇主要是用于提高代码编写速度对vsCode代码片段配置的总结</code></p><span id="more"></span><p><strong>vsCode代码片段配置本质上就是JSON文件的配置</strong></p><p>“Print to console”代码片段名称<br>“scope”代码作用范围<br>“prefix”代码片段的总名称<br>“body”具体代码片段内容<br>“description” 代码描述</p><p>情况1：如果只有一行代码，这里面每一行需要用” “包裹</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如：<span class="string">&quot;第一行&quot;</span></span><br></pre></td></tr></table></figure><p>情况2：如果有多行代码，想要换行，需要换行的话，每一行代码需要用逗号隔开</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;第一行&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;第二行&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;第三行&quot;</span></span><br></pre></td></tr></table></figure><p>情况3：默认是<a href="https://so.csdn.net/so/search?q=%E5%B7%A6%E5%AF%B9%E9%BD%90&spm=1001.2101.3001.7020">左对齐</a>。每一行是已经被逗号隔开了，但是这个代码块会向左对齐，但是我们平常代码块都不会都想做对齐，而是呈现嵌套状，因此可以在每行代码块内打空格，来防止左对齐</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;第一行&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;     第二行&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;     第三行“</span></span><br></pre></td></tr></table></figure><p>情况4：光标前往指定位置，$1 $2等等,  代码快捷生成后，会定在$1的位置，按tab键会定在$2的位置</p><p>参考代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;js-jc1&quot;</span>: &#123;   <span class="comment">//代码片段总称</span></span><br><span class="line"><span class="string">&quot;scope&quot;</span>: <span class="string">&quot;javascript,typescript,vue&quot;</span>,  <span class="comment">//使用范围</span></span><br><span class="line"><span class="string">&quot;prefix&quot;</span>: <span class="string">&quot;f&quot;</span>,     <span class="comment">//代码片段简称 即在js中输入一个f，就会自动生成for循环</span></span><br><span class="line"><span class="string">&quot;body&quot;</span>: [</span><br><span class="line"><span class="string">&quot;for(let i = 1;i &lt; ;i++) &#123;&quot;</span>,   </span><br><span class="line">                 <span class="string">&quot; &quot;</span>,         <span class="comment">//代码由引号包裹，换行由逗号隔开</span></span><br><span class="line">            <span class="string">&quot;&#125;&quot;</span>  </span><br><span class="line">],</span><br><span class="line"><span class="string">&quot;description&quot;</span>: <span class="string">&quot;for循环&quot;</span>   <span class="comment">//描述</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 因此，打出ve，那么代码片段则会自动生成</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vsCode代码片段配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>作用域&amp;箭头函数&amp;解构</title>
      <link href="/star/2023/072037.html"/>
      <url>/star/2023/072037.html</url>
      
        <content type="html"><![CDATA[<h2 id="作用域-箭头函数-解构"><a href="#作用域-箭头函数-解构" class="headerlink" title="作用域&amp;箭头函数&amp;解构"></a>作用域&amp;箭头函数&amp;解构</h2><p><code>这篇总结主要讲解了作用域&amp;箭头函数&amp;解构的使用</code></p><span id="more"></span><h3 id="1-作用域"><a href="#1-作用域" class="headerlink" title="1.作用域"></a>1.作用域</h3><h4 id="局部作用域：分为函数作用域与块级作用域"><a href="#局部作用域：分为函数作用域与块级作用域" class="headerlink" title="局部作用域：分为函数作用域与块级作用域"></a>局部作用域：分为函数作用域与块级作用域</h4><p><code>函数作用域</code>：函数内部的代码块称为函数作用域<br><strong>注意：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.函数内部声明的变量，在函数外部无法被访问</span><br><span class="line">2.函数的形参也是函数内部的局部变量</span><br><span class="line">3.不同函数内部声明的变量无法相互访问</span><br><span class="line">4.函数执行完毕后,函数内部的变量实际被清空了</span><br></pre></td></tr></table></figure><p><code>块作用域</code>：被{  }包裹的代码块称为块作用域   if语句   for语句 部分有大括号的函数<br><strong>注意：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.let声明的变量会生成块作用域，var则不会</span><br><span class="line">2.const声明的常量也会产生块级作用域</span><br><span class="line">3.不同代码块之间的变量无法相互访问</span><br><span class="line">4.推荐使用const或let</span><br></pre></td></tr></table></figure><h4 id="全局作用域：标签内部-js文件"><a href="#全局作用域：标签内部-js文件" class="headerlink" title="全局作用域：&lt;script&gt;标签内部.js文件"></a>全局作用域：<code>&lt;script&gt;标签内部</code>.js文件</h4><p><strong>注意：</strong>尽可能少的声明全局变量，防止全局变量污染</p><h3 id="2-作用域链"><a href="#2-作用域链" class="headerlink" title="2.作用域链"></a>2.作用域链</h3><p>是什么？<code>本质是底层的变量查找机制</code><br>在函数被执行时，会优先查找当前作用域中的变量，如果没找到，则依次向上查找<br>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.嵌套关系的作用域串联起来形成了作用域链</span><br><span class="line">2.相同作用域中按照从小到大的规则查找变量</span><br><span class="line">3.子作用域能够访问父作用域，而父不可访问子</span><br></pre></td></tr></table></figure><h3 id="3-js垃圾回收机制：简称GC"><a href="#3-js垃圾回收机制：简称GC" class="headerlink" title="3.js垃圾回收机制：简称GC"></a>3.js垃圾回收机制：简称GC</h3><p><strong>内存的生命周期：</strong><br><code>内存分配：当我们声明变量，函数，对象时，系统会自动为他们分配内存</code><br><code>内存使用：即读写内存，也就是使用变量，函数</code><br><code>内存回收：使用完毕后，由垃圾回收器自动回收不再使用的内存</code><br><strong>说明：</strong><br><code>1.全局变量一般不会被回收（关闭页面，则被回收）</code><br><code>2.一般情况下，局部变量的值，不用了，会被回收</code></p><p><strong>内存泄漏</strong>：程序中分配的内存由于某种原因程序未释放或无法释放叫做内存泄漏</p><h3 id="4-变量提升（预解析）"><a href="#4-变量提升（预解析）" class="headerlink" title="4.变量提升（预解析）"></a>4.变量提升（预解析）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.仅仅存在于var声明的变量</span><br><span class="line">2.只提升到当前作用域的最前面</span><br><span class="line">3.只提升声明，不提升变量</span><br></pre></td></tr></table></figure><h2 id="二-函数进阶-箭头函数"><a href="#二-函数进阶-箭头函数" class="headerlink" title="二.函数进阶(箭头函数)"></a>二.函数进阶(箭头函数)</h2><h3 id="1-函数提升"><a href="#1-函数提升" class="headerlink" title="1.函数提升"></a>1.函数提升</h3><p>1.<code>会把所有函数声明提升到当前作用域的最前面</code><br><code>2.只提升函数声明，不提升函数调用</code><br><code>注意：函数表达式不存在函数提升</code></p><h3 id="2-函数参数"><a href="#2-函数参数" class="headerlink" title="2.函数参数"></a>2.函数参数</h3><h4 id="动态参数：arguments"><a href="#动态参数：arguments" class="headerlink" title="动态参数：arguments"></a>动态参数：arguments</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.返回的是一个伪数组</span><br><span class="line">2.只存在于函数当中</span><br><span class="line">3.作用是动态获取函数的实参</span><br><span class="line">4.利用for循环依次得到传递过来的实参</span><br></pre></td></tr></table></figure><h4 id="剩余参数-推荐使用-ES6新增"><a href="#剩余参数-推荐使用-ES6新增" class="headerlink" title="剩余参数(推荐使用,ES6新增)"></a>剩余参数(推荐使用,ES6新增)</h4><p><code>语法： ...  例如：...arr</code><br><code>返回的是一个真数组</code><br><code>只存在于函数当中</code><br><code>...是语法符号，置于最末函数形参之前，用于获取多余参数</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function fun(a,b,...arr) &#123;&#125;</span><br><span class="line">fun(1,2,3,4,5)</span><br><span class="line">实参1给了形参a</span><br><span class="line">实参2给了形参b</span><br><span class="line">实参3，4，5则都给了...arr</span><br></pre></td></tr></table></figure><h4 id="展开运算符"><a href="#展开运算符" class="headerlink" title="展开运算符"></a>展开运算符</h4><p><code>语法： ...  例如：...arr</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.不会修改原数组</span><br><span class="line">2.运用场景  求数组最大值/最小值   合并数组等</span><br><span class="line">3.只存在于数组</span><br><span class="line">4.返回的不是一个数组</span><br></pre></td></tr></table></figure><h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><p><code>语法：()=&gt;&#123;&#125;</code><br>1.<code>只有一个形参时可以省略小括号</code>：x &#x3D;&gt;{}<br><code>2.只有一行代码时，可以省略大括号，并且无需写return</code>：x &#x3D;&gt; x<br><code>3.箭头函数可以返回一个对象</code><br><code>4.加括号的函数体返回的是一个对象字面量的表达式</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">fn</span> = (<span class="params">uname</span>) =&gt; (&#123;<span class="attr">name</span>:uname&#125;)</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;刘德华&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>使用场景</strong>：替代需要匿名函数的地方，用于函数表达式</p><p><strong>箭头函数参数</strong><br><code>1.没有arguments动态参数</code><br><code>2.有剩余参数  ...arr</code></p><p><strong>箭头函数this</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.箭头函数不绑定this关键字，箭头函数中的this，指向的是上一层作用域的this执向</span><br><span class="line">2.箭头函数适合与this无关的回调，定时器，数组方法的回调</span><br><span class="line">3.箭头函数不适合与this有关的回调，构造函数，事件回调，对象的方法</span><br><span class="line">4.箭头函数不能作为构造函数，因为构造函数的new关键字会改变this指向，而箭头函数没有自己的this，则改变不了this的指向</span><br></pre></td></tr></table></figure><h2 id="三-解构赋值"><a href="#三-解构赋值" class="headerlink" title="三.解构赋值"></a>三.解构赋值</h2><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>是什么？将数组的单元值快速批量的去赋值给一系列的变量的简洁语法<br>1.let [a,b,c] &#x3D; [1,2,3]<br>2.在这个数组里面，a,b,c与1,2,3一一对应      d则返回undefined<br>let [a,b,c,d] &#x3D; [1,2,3]<br>3.变量少，单元值多，则只返回应有的变量，多的单元值则不返回<br>剩余参数解决  const [a,b,…c] &#x3D; [1,2,3,4]<br>4.防止有undefined传递单元值，可以设置默认值<br>const [a &#x3D; 1,b&#x3D;2] &#x3D; [1]<br>5.按需导入赋值<br>const [a,b,  ,d] &#x3D; [1,2,3,4]<br>返回1,2,4<br>6.多维数组解构<br>const [a,b,[c,d]] &#x3D; [1,2,[3,4]]<br><strong>交换2个变量</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;(这里必须打分号)</span><br><span class="line">[a,b]=[b,a]</span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p>1.语法：const {uname,age} &#x3D; {uname:’pink’,age:’18’}</p><p><strong>注意</strong><br>变量名与属性名必须相同<br>解构的变量名不能和外面的变量名冲突<br>对象中找不到与解构赋值的变量名相同的属性名，则会返回undefined<br>2.<strong>改变对象解构的变量名</strong><br>const {uname：username,age} &#x3D; {uname:’pink’,age:’18’}<br>3.<strong>解构数组对象</strong><br>const [{uname,age}] &#x3D; [{uname:’pink’,age:6}]<br>4.<strong>多级对象解构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;name,<span class="attr">family</span>:&#123;m,f,s&#125;,age&#125; = &#123;</span><br><span class="line">           <span class="attr">name</span>:<span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">           <span class="attr">family</span>:&#123;</span><br><span class="line">                      <span class="attr">m</span>:<span class="string">&#x27;妈妈&#x27;</span>,</span><br><span class="line">                      <span class="attr">f</span>:<span class="string">&#x27;爸爸&#x27;</span>,</span><br><span class="line">                      <span class="attr">s</span>:<span class="string">&#x27;妹妹&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">age</span>:<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><p>5.<strong>数组多级对象解构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [&#123;name,<span class="attr">family</span>:&#123;m,f,s&#125;,age&#125;] = [&#123;</span><br><span class="line">           <span class="attr">name</span>:<span class="string">&#x27;pink&#x27;</span>,</span><br><span class="line">           <span class="attr">family</span>:&#123;</span><br><span class="line">                      <span class="attr">m</span>:<span class="string">&#x27;妈妈&#x27;</span>,</span><br><span class="line">                      <span class="attr">f</span>:<span class="string">&#x27;爸爸&#x27;</span>,</span><br><span class="line">                      <span class="attr">s</span>:<span class="string">&#x27;妹妹&#x27;</span></span><br><span class="line">           &#125;,</span><br><span class="line">           <span class="attr">age</span>:<span class="number">6</span>&#125;]</span><br></pre></td></tr></table></figure><h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">&#123;name,age&#125;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(name,age)</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="title function_">fn</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;1&#x27;</span>,<span class="attr">age</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><p>1.当函数的“参数是对象类型”的时候，就可以对参数进行解构。一般会封装发送ajax请求的函数，ajax参数一般是对象类型函数参数解构实际开发中有什么好处?<br>2 .登录函数: 参数是用户名和密码<br><strong>参数是对象obj的弊端</strong> :<br>     a.阅读性不高 : 阅读性不高，不知道这个接口参数到底是什么?b.会增加参数误传的风险(2)使用</p><p><strong>解构赋值接收参数</strong><br>1.阅读性高 :一看形参就知道你传的是是什么<br>2.避免参数误传导致bug</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于a标签的禁用</title>
      <link href="/star/2023/07203244.html"/>
      <url>/star/2023/07203244.html</url>
      
        <content type="html"><![CDATA[<h1 id="关于a标签的禁用"><a href="#关于a标签的禁用" class="headerlink" title="关于a标签的禁用"></a>关于a标签的禁用</h1><p><code>这篇总结主要讲解了a标签的禁用应该如何实现？</code></p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.点击验证码 </span></span><br><span class="line"><span class="comment">    5秒倒计时：  05秒后获取验证码</span></span><br><span class="line"><span class="comment">    细节：上一个倒计时没有结束之前，按钮不能点击</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> yz = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.code&#x27;</span>)  <span class="comment">//获取验证按钮</span></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">5</span></span><br><span class="line">yz.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;   <span class="comment">//设置点击事件</span></span><br><span class="line">  <span class="keyword">if</span>(i !== <span class="number">5</span>) &#123;                         <span class="comment">//方法2                           </span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  yz.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;ing&#x27;</span>)</span><br><span class="line">  yz.<span class="property">innerHTML</span> = <span class="string">`获取验证码(<span class="subst">$&#123;i&#125;</span>)`</span></span><br><span class="line">  <span class="keyword">let</span> stop = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;    <span class="comment">//开启定时器</span></span><br><span class="line">    <span class="comment">// yz.style.pointerEvents = &#x27;none&#x27;    方法1</span></span><br><span class="line">    yz.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&#x27;ing&#x27;</span>)</span><br><span class="line">    i--</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i)</span><br><span class="line">    yz.<span class="property">innerHTML</span> = <span class="string">`获取验证码(<span class="subst">$&#123;i&#125;</span>)`</span></span><br><span class="line">    <span class="keyword">if</span> (i === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">clearInterval</span>(stop)              <span class="comment">//关闭定时器</span></span><br><span class="line">      yz.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&#x27;ing&#x27;</span>)  </span><br><span class="line">      yz.<span class="property">innerHTML</span> = <span class="string">`发送验证码`</span></span><br><span class="line">      <span class="comment">// yz.style.pointerEvents = &#x27;all&#x27;   方法1</span></span><br><span class="line">      i = <span class="number">5</span>                         <span class="comment">//方法2</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">a标签禁用：</span></span><br><span class="line"><span class="comment">方法1：</span></span><br><span class="line"><span class="comment">给a标签添加pointer-events:&#x27;none&#x27;</span></span><br><span class="line"><span class="comment">恢复点击则是pointer-events:&#x27;all&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>disable只能用于表单元素，因此对a标签是不会生效</strong></p><p><strong>a标签禁用：</strong><br>    给a标签添加pointer-events:’none’<br>    恢复点击则是pointer-events:’all’</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于值比较</title>
      <link href="/star/2023/072048.html"/>
      <url>/star/2023/072048.html</url>
      
        <content type="html"><![CDATA[<h2 id="关于值比较"><a href="#关于值比较" class="headerlink" title="关于值比较"></a>关于值比较</h2><p><code>这篇总结主要扩展一下值的比较，因为很多笔试都会有这种</code></p><span id="more"></span><p><code>1.引用类型不比较值，只会比较地址</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[] === []    <span class="literal">false</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] === [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]   <span class="literal">false</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>][<span class="number">0</span>] === [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>][<span class="number">0</span>]   <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><code>2.false == 0 输出true；因为在做判断的时候，两者中有boolean（布尔类型），会把boolean先转化为number（数字类型），false为0，true是1。也就是等价于判断 0 == 0 ，结果为true。</code></p><p><code>3.‘ ’ ==  false 输出为true；js中空字符串与0相等，也就意味着空字符串等等于false。</code></p><p><code>4.‘0’ == false 正确输出为true；这里犯了一个错误认为结果会是false，我想的是空字符串等于false，非空字符串等于true，true和false肯定是不等的啊！但是，可但是.......忽略了一个js规则：string（字符串类型）和number作比较的时候，string会先转化成number。此时字符串0转化为了数字0，即： 0 == 0；结果应该为true。</code></p><p><code>5.Boolean（‘0’） 正确输出为true；string转化成Boolean类型，空字符串为false，别的字符串全是true。</code></p><p>总结：<br>1.两者做判断时，若有布尔类型，会先把boolean转换成number，即0 (false) 和 1 (true)；<br>2.字符串string直接转换成Boolean类型时，除了空字符串为false外，其余都是true；<br>3.字符串string和number类型做比较的时候，string会转化成number。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Router</title>
      <link href="/star/2023/072058.html"/>
      <url>/star/2023/072058.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-Router路由"><a href="#Vue-Router路由" class="headerlink" title="Vue-Router路由"></a>Vue-Router路由</h3><p><code>这篇总结主要介绍Vue-Router</code></p><span id="more"></span><h4 id="1-路由概念"><a href="#1-路由概念" class="headerlink" title="1.路由概念"></a>1.路由概念</h4><p>路径(hash值) 与 页面 一一对应关系<br><strong>原理：</strong> 监听网页hash值</p><h4 id="2-路由作用-场景-："><a href="#2-路由作用-场景-：" class="headerlink" title="2.路由作用&#x2F;场景 ："></a>2.路由作用&#x2F;场景 ：</h4><p>单页面应用： <code>SPA（singal page application）</code><br>            （1）加载快：局部刷新<br>            （2）数据传输方便</p><h4 id="3-路由配置"><a href="#3-路由配置" class="headerlink" title="3.路由配置"></a>3.路由配置</h4><p>自动生成路由配置：vue add router</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0.导入vue-router</span><br><span class="line">    import VueRouter from &#x27;vue-router&#x27;</span><br><span class="line">    Vue.use(VueRouter)</span><br><span class="line">1.导入 页面组件</span><br><span class="line">import 组件名 from &#x27;组件路径&#x27;</span><br><span class="line">2.配置 路由规则(地址和页面一一对应)</span><br><span class="line">const routes = [</span><br><span class="line">              &#123; path: &#x27;/路径&#x27; , component : 组件名  &#125;</span><br><span class="line">          ]</span><br><span class="line">3.创建 路由对象</span><br><span class="line">4.挂载 App根组件</span><br><span class="line">5.路由 出口</span><br><span class="line">6.路由 导航</span><br></pre></td></tr></table></figure><h4 id="4-路由模式"><a href="#4-路由模式" class="headerlink" title="4.路由模式"></a>4.路由模式</h4><p>​hash模式：路径有#号， 不会给服务器发请求<br>​history模式: 路径没有#号， 会给服务器发请求。需要服务器单独配置</p><h4 id="5-重定向"><a href="#5-重定向" class="headerlink" title="5.重定向"></a>5.重定向</h4><p>把 路径a 变成 路径b<br>在配置路由规则中，<code>&#123;path:&#39; / &#39;,redirect:&#39;/路径&#39;&#125;</code><br>重定向只是修改路径，不会路由匹配</p><h4 id="6-路由导航-跳转-传参（A页面-B页面）"><a href="#6-路由导航-跳转-传参（A页面-B页面）" class="headerlink" title="6.路由导航(跳转)传参（A页面-&gt;B页面）"></a>6.路由导航(跳转)传参（A页面-&gt;B页面）</h4><h5 id="声明式导航-a标签"><a href="#声明式导航-a标签" class="headerlink" title="声明式导航(a标签)"></a>声明式导航(a标签)</h5><p><strong>query参数</strong><br>            A页面传 ：<code> url?参数名=参数值</code><br>            B页面收:<code>  $route.query.参数名</code>  </p><p><strong>params参数</strong><br>路由规则中配置：参数名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>:<span class="string">&#x27;/路径/:参数名1/:参数名2&#x27;</span> , <span class="attr">component</span>:组件名&#125;</span><br></pre></td></tr></table></figure><p>​          A页面传 ：<code> url/参数值</code><br>​          B页面收:  <code>$router.params.参数名</code></p><h5 id="编程式导航-push方法"><a href="#编程式导航-push方法" class="headerlink" title="编程式导航(push方法)"></a>编程式导航(push方法)</h5><p><strong>query参数</strong><br>特点： (1)参数会在地址栏显示  (2)页面刷新之后还在</p><p>A页面传 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/路径&#x27;</span>,</span><br><span class="line">    <span class="attr">query</span>:&#123; 参数名:参数值  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>B页面收:  <code> $route.query.参数名</code></p><p><strong>params参数</strong><br>特点：需要在路由文件中配置路由名(内存传参，刷新就会消失)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>:<span class="string">&#x27;/路径名&#x27;</span>, <span class="attr">name</span>:<span class="string">&#x27;路由名&#x27;</span> , <span class="attr">component</span>:组件名 &#125;</span><br></pre></td></tr></table></figure><p>A页面传 ： </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;路由名&#x27;</span>,</span><br><span class="line">    <span class="attr">params</span>:&#123; 参数名:参数值  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>B页面收:  <code> $route.params</code>.参数名</p><h4 id="7-二级路由"><a href="#7-二级路由" class="headerlink" title="7.二级路由"></a>7.二级路由</h4><p>1.在router&#x2F;index.js中配置二级路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> &#123; <span class="attr">path</span>:<span class="string">&#x27;/路径&#x27;</span>, <span class="attr">component</span>:组件, children : [ </span><br><span class="line">   <span class="comment">// 二级路由配置</span></span><br><span class="line">] &#125;</span><br></pre></td></tr></table></figure><p>2.给页面添加二级路由出口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h4 id="8-路由导航守卫"><a href="#8-路由导航守卫" class="headerlink" title="8.路由导航守卫"></a>8.路由导航守卫</h4><h5 id="全局前置路由守卫"><a href="#全局前置路由守卫" class="headerlink" title="全局前置路由守卫"></a>全局前置路由守卫</h5><p><code>beforeEach</code></p><p><strong>何时被调用？</strong><br>1.初始化时被调用<br>2.每次路由被切换之前被调用</p><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">         执行代码</span><br><span class="line">         <span class="title function_">next</span>()  <span class="comment">//同意放行   不写这个调用则是不放行</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//to：去哪里？   meta，程序员自定义配置的属性</span></span><br><span class="line"><span class="comment">//from:从哪来？</span></span><br><span class="line"><span class="comment">//next:是否放行</span></span><br></pre></td></tr></table></figure><h5 id="全局后置路由守卫"><a href="#全局后置路由守卫" class="headerlink" title="全局后置路由守卫"></a>全局后置路由守卫</h5><p><code>afterEach</code></p><p><strong>何时被调用？</strong><br>1.初始化时被调用<br>2.每次路由被切换之后被调用</p><p><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">         执行代码</span><br><span class="line">         </span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//to：去哪里？   meta，程序员自定义配置的属性</span></span><br><span class="line"><span class="comment">//from:从哪来？</span></span><br><span class="line"><span class="comment">//next:是否放行</span></span><br></pre></td></tr></table></figure><h5 id="独享路由守卫-写在路由配置信息中，与path-component-meta同级"><a href="#独享路由守卫-写在路由配置信息中，与path-component-meta同级" class="headerlink" title="独享路由守卫(写在路由配置信息中，与path,component,meta同级)"></a>独享路由守卫(写在路由配置信息中，与path,component,meta同级)</h5><p><code>beforeEnter</code><br><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeEnter</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">         执行代码       </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>只有前置，没有后置</code><br><code>由于他没有后置路由守卫，那么它可以配合全局的后置路由守卫一起使用</code></p><h5 id="组件内路由守卫"><a href="#组件内路由守卫" class="headerlink" title="组件内路由守卫"></a>组件内路由守卫</h5><p>顾名思义：是写在组件之中的<br><code>beforeRouteEnter</code><br>通过路由规则，进入该组件时被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteEnter</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">         执行代码  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>beforeRouteLeave</code><br>通过路由规则，离开该组件时被调用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">beforeRouteLeave</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">         执行代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>路由导航守卫作用：</strong><br>示例1： 有的页面需要登录才能进入， 有的页面不需要。 可以通过导航守卫进行拦截，如果是需要登录权限的。就可以判断用户是否登录。 如果登录了，就正常跳转。 没登录，就主动跳转到登录页。<br>示例2：有的会员页面，需要开通会员才能进入。  可以通过导航守卫进行拦截，当用户想要跳转会员页面的时候，可以判断用户是否已经是会员。 如果是，就正常跳转。 如果不是，就跳转到开通会员页面</p><h4 id="混淆单词"><a href="#混淆单词" class="headerlink" title="混淆单词"></a>混淆单词</h4><pre><code>routes    路由规则 数组router    路由实例对象$route    路由信息（获取参数）$router   路由实例对象( 页面跳转)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue指令</title>
      <link href="/star/2023/0720448.html"/>
      <url>/star/2023/0720448.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a>Vue常用指令</h3><p><code>这篇总结主要介绍Vue指令</code></p><span id="more"></span><h4 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h4><p>内容渲染指令用来辅助开发者渲染DOM元素的文本内容</p><h5 id="1-v-text"><a href="#1-v-text" class="headerlink" title="1.v-text"></a>1.<code>v-text</code></h5><p>缺点：会覆盖元素内部原有的内容<br>不会解析标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span> = <span class="string">&#x27;name&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span> = <span class="string">&#x27;sex&#x27;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>:<span class="string">&#x27;我是大孩&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="2-v-html"><a href="#2-v-html" class="headerlink" title="2.v-html"></a>2.<code>v-html</code></h5><p>会覆盖元素内部原有内容<br>会解析标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&#x27;sex&#x27;</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>:<span class="string">`&lt;strong&gt;我是大孩&lt;/strong&gt;`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="3-插值语法"><a href="#3-插值语法" class="headerlink" title="3.插值语法"></a>3.插值语法</h5><p><code>&#123;&#123;表达式或者数据&#125;&#125;</code><br>不会覆盖元素内部原有内容<br>不会解析标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>性别&#123;&#123;sex&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">name</span>:<span class="string">&#x27;我是大孩&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">               <span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">           &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h4><h5 id="1-v-bind指令"><a href="#1-v-bind指令" class="headerlink" title="1.v-bind指令"></a>1.<code>v-bind</code>指令</h5><p>单向数据绑定<br>语法：<code>v-bind:需要绑定的属性 = &quot;data配置项中的数据名 / 表达式&quot; </code><br>简写：   :需要绑定的属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;tips&quot;</span>&gt;</span> //简写</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-bind:placeholder</span>=<span class="string">&quot;tips&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">tips</span>:<span class="string">&#x27;请输入&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h4><h5 id="1-需要定义在methods配置对象中"><a href="#1-需要定义在methods配置对象中" class="headerlink" title="1.需要定义在methods配置对象中"></a>1.需要定义在methods配置对象中</h5><h5 id="2-v-on-click-点击事件"><a href="#2-v-on-click-点击事件" class="headerlink" title="2. v-on:click 点击事件"></a>2. v-on:click 点击事件</h5><p><code>v-on:click=&quot;事件处理函数名(实参)&quot;</code><br>简写：<code>@click = &quot;事件处理函数名(实参)&quot;</code><br>可以进行传参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>值为&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;add($event,1)&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>  <span class="comment">//传参  实参  事件对象$event</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;jian&quot;</span>&gt;</span>-1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:placeholder</span>=<span class="string">&quot;tips&quot;</span> @<span class="attr">keydown</span>=<span class="string">&quot;ok&quot;</span>&gt;</span>  //@符简写</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;tz&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span> //  事件修饰符 @click.prevent</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">count</span>:<span class="number">0</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">tips</span>:<span class="string">&#x27;zzz&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">add</span>(<span class="params">e,n</span>)&#123; <span class="comment">//传参 形参</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">count</span> += n</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">color</span> = <span class="variable language_">this</span>.<span class="property">count</span> % <span class="number">2</span> === <span class="number">0</span>?<span class="string">&#x27;red&#x27;</span>:<span class="string">&#x27;&#x27;</span>  </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">jian</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">count</span> -= <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">ok</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.<span class="property">tips</span> = <span class="string">&#x27;hhh&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hhh&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="3-其他事件"><a href="#3-其他事件" class="headerlink" title="3.其他事件"></a>3.其他事件</h5><p><code>v-on:input</code>   输入框事件<br><code>v-on:keydown</code>   键盘事件<br><code>v-on:keyup</code>   键盘事件<br><code>v-on:focus</code>   键盘事件<br>等等<br>同样可以写成简写 <code>@input</code>  <code>@keydown</code>等</p><h5 id="4-事件对象"><a href="#4-事件对象" class="headerlink" title="4.事件对象"></a>4.事件对象</h5><p>实参必须使用 <code>$event</code></p><p>绑定事件时，未加小括号的话会默认有e这个时间对象</p><h5 id="5-事件修饰符"><a href="#5-事件修饰符" class="headerlink" title="5.事件修饰符"></a>5.事件修饰符</h5><p>语法：<code>$click.事件修饰符 = &#39;methods配置对象的方法名&#39;</code></p><p>1.<code>prevent</code>：阻止默认事件，例如网址的跳转<br>2.<code>stop</code>：阻止事件冒泡<br>3.<code>once</code>：事件只触发一次</p><h5 id="6-按键修饰符"><a href="#6-按键修饰符" class="headerlink" title="6.按键修饰符"></a>6.按键修饰符</h5><p>在监听键盘事件时，经常需要判断详细的按键，为案件相关的事件添加案件修饰符<br>例如：<code>@keyup.enter = &#39;methods配置对象的方法名&#39;</code><br><code>@keydown.esc = &#39;methods配置对象的方法名&#39;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;ku&quot;</span>&gt;</span>   //按键修饰符</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">const</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span><br><span class="line">        <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">tips</span>:<span class="string">&#x27;zzz&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">methods</span>: &#123;</span><br><span class="line">            <span class="title function_">ku</span>(<span class="params">e</span>) &#123;   <span class="comment">//事件对象</span></span><br><span class="line">                e.<span class="property">target</span>.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="双向数据绑定指令"><a href="#双向数据绑定指令" class="headerlink" title="双向数据绑定指令"></a>双向数据绑定指令</h4><h5 id="1-v-model指令"><a href="#1-v-model指令" class="headerlink" title="1.v-model指令"></a>1.<code>v-model</code>指令</h5><p>双向数据绑定<br>语法：<code>v-model</code><br>只能和表单元素一起使用，例如：<code>input元素，textarea元素，select元素</code></p><h5 id="2-v-model专用修饰符"><a href="#2-v-model专用修饰符" class="headerlink" title="2.v-model专用修饰符"></a>2.<code>v-model</code>专用修饰符</h5><p>语法：<code>v-model.修饰符 = &#39;data配置项中的数据名 / 表达式&#39;</code></p><p><code>lazy</code>：失去焦点再收集数据<br><code>number</code>：输入字符串转为有效的数字<br><code>trim</code>：输入首尾空格过滤</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：&#123;&#123;user&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">        <span class="comment">//trim去掉前后空格</span></span><br><span class="line">        &lt;input type=&quot;text&quot; v-model.trim=&quot;user&quot;&gt; </span><br><span class="line">            //model中的value值与下面的value进行匹配</span><br><span class="line">        &lt;select v-model=&quot;ok&quot;&gt; </span><br><span class="line">            &lt;option value=&quot;1&quot;&gt;北京&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;2&quot;&gt;上海&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;3&quot;&gt;广州&lt;/option&gt;</span><br><span class="line">            &lt;option value=&quot;4&quot;&gt;深圳&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;</span><br><span class="line">          //number只允许输入数字</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model.number=&quot;sum1&quot;&gt;+</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model.number=&quot;sum2&quot;&gt;=</span><br><span class="line">        &lt;span&gt;&#123;&#123;sum1+sum2&#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;button @click=&quot;us&quot;&gt;获取用户名&lt;/button&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">            //lazy，在表单失去焦点后再进行数据更新</span><br><span class="line">        &lt;input type=&quot;text&quot; v-model.lazy=&quot;okk&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.config.productionTip = false</span><br><span class="line">        new Vue (&#123;</span><br><span class="line">            el:&#x27;#root&#x27;,</span><br><span class="line">            data:&#123;</span><br><span class="line">                user:&#x27;hhh&#x27;,</span><br><span class="line">                ok:&#x27;1&#x27;,</span><br><span class="line">                sum1:1,</span><br><span class="line">                sum2:2,</span><br><span class="line">               okk:&#x27;傻逼&#x27;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                us() &#123;</span><br><span class="line">                    console.log(`&quot;$&#123;this.user&#125;&quot;`)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="3-注意点"><a href="#3-注意点" class="headerlink" title="3.注意点"></a>3.注意点</h5><p><code>在与表单元素进行双向数据绑定时，如果type值为text，则v-model则会自动绑定value值</code></p><p><code>如果type值为单选框或则是多选框时，则v-model则自动绑定的是checked值</code></p><h4 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h4><p><code>条件渲染指令用于控制DOM的显示与隐藏</code></p><h5 id="1-v-if"><a href="#1-v-if" class="headerlink" title="1.v-if"></a>1.<code>v-if</code></h5><p>语法：<code>v-if=&#39;判断条件&#39;</code></p><p>原理：每次动态创建或移除元素节点，实现元素的显示与隐藏<br>如果刚进入页面的时候，某些元素默认不需要被展示，而且后期这个元素很可能也不需要被展示出来，此时使用v-if性能更好</p><h5 id="2-v-show"><a href="#2-v-show" class="headerlink" title="2.v-show"></a>2.<code>v-show</code></h5><p>语法：<code>v-show=&#39;判断条件&#39;</code></p><p>原理：动态为元素添加或移除<code>display:none</code>样式，来实现元素的显示与隐藏<br>如果频繁的切换元素的显示状态，用<code>v-show</code>性能会更好</p><h5 id="3-注意"><a href="#3-注意" class="headerlink" title="3.注意"></a>3.注意</h5><p>开发中，绝大多数情况，不用考虑性能问题，直接使用<code>v-if</code>就好了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>  <span class="comment">//彻底抹除节点</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">&quot;flag&quot;</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>  <span class="comment">//只是将节点隐藏了</span></span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;vi&quot;</span>&gt;</span>隐藏元素<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">name</span>:<span class="string">&#x27;周江号&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">flag</span>:<span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="title function_">vi</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                    <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="variable language_">this</span>.<span class="property">flag</span> ? <span class="literal">false</span> :<span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="4-v-if配套指令"><a href="#4-v-if配套指令" class="headerlink" title="4.v-if配套指令"></a>4.<code>v-if</code>配套指令</h5><p><code>v-else-if=&#39;判断条件&#39;</code><br><code>v-else    后面不用接判断条件</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">       成绩：&lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;flags&quot;</span>&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;flags===&#x27;A&#x27;&quot;</span>&gt;</span>优秀<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;flags===&#x27;B&#x27;&quot;</span>&gt;</span>良好<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;flags===&#x27;C&#x27;&quot;</span>&gt;</span>一般<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>差<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line">       <span class="keyword">new</span> <span class="title class_">Vue</span> (&#123;</span><br><span class="line">           <span class="attr">el</span>:<span class="string">&#x27;#root&#x27;</span>,</span><br><span class="line">           <span class="attr">data</span>:&#123;</span><br><span class="line">               <span class="attr">flags</span>:<span class="string">&#x27;A&#x27;</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><h5 id="5-注意"><a href="#5-注意" class="headerlink" title="5.注意"></a>5.注意</h5><p><code>v-if可以和v-else-if，v-else一起使用，但要求结构不能被打断</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v-if=&#x27;n===1&#x27;,</span><br><span class="line">&lt;div&gt;@&lt;/div&gt;</span><br><span class="line">v-else-if =&#x27;n===2&#x27;</span><br><span class="line">中间插入了一个@符号，结构被打断了，因此，v-else-if不会执行</span><br></pre></td></tr></table></figure><h4 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h4><h5 id="1-v-for"><a href="#1-v-for" class="headerlink" title="1.v-for"></a>1.<code>v-for</code></h5><p>用来辅助开发者基于一个数组来循环渲染一个列表结构</p><p>语法：<code>v-for=&#39;数组元素 in 数组&#39;</code><br>数组元素指的是数组每一项<br>数组指的是存储在data配置项中的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.subject&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;item.score&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">el</span>: <span class="string">&#x27;#root&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="attr">arr</span>: [</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123; <span class="attr">name</span>: <span class="string">&#x27;古丽扎娜&#x27;</span>, <span class="attr">subject</span>: <span class="string">&#x27;语文&#x27;</span>, <span class="attr">score</span>: <span class="number">20</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123; <span class="attr">name</span>: <span class="string">&#x27;佟丽丫丫&#x27;</span>, <span class="attr">subject</span>: <span class="string">&#x27;数学&#x27;</span>, <span class="attr">score</span>: <span class="number">99</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#123; <span class="attr">name</span>: <span class="string">&#x27;马尔扎哈&#x27;</span>, <span class="attr">subject</span>: <span class="string">&#x27;英语&#x27;</span>, <span class="attr">score</span>: <span class="number">70</span> &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                ]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="2-key"><a href="#2-key" class="headerlink" title="2.key"></a>2.<code>key</code></h5><p>1.官方建议，只要用到v-for指令，那么一定要绑定一个<code> :key</code> 属性<br>2.<code>key</code>值的类型只能是数字&#x2F;字符串，其他的值是不能当作key值的<br>3.<code>key</code>的值必须是唯一值<br>4.建议把数据项<code>id</code>属性的值作为<code>key</code>值(因为id属性的值具有唯一性)<br>5.使用<code>index</code>值作为key值是没有任何意义的，因为<code>index</code>具有不确定性</p><h5 id="3-扩展"><a href="#3-扩展" class="headerlink" title="3.扩展"></a>3.扩展</h5><p>它不仅仅只能用于数组绑定，还能用于对象，字符串，指定次数</p><p><code>对象：</code><br>语法:<code>v-for=&quot;(value,key) in 对象名&quot;  :key=&quot;key&quot;</code><br><code>value是data数据所配置的对象的属性值</code><br><code>key是data数据所配置的对象的属性名</code></p><p><code>字符串：</code><br>语法:<code>v-for=&quot;(char,index) in 字符串名&quot;  :key=&quot;index&quot;</code></p><p><code>指定次数：</code><br>语法:<code>v-for=&quot;(number,index) in 次数(几次)&quot;  :key=&quot;index&quot;</code></p><h4 id="其他内置指令"><a href="#其他内置指令" class="headerlink" title="其他内置指令"></a>其他内置指令</h4><h5 id="v-cloak指令（没有值）"><a href="#v-cloak指令（没有值）" class="headerlink" title="v-cloak指令（没有值）"></a><code>v-cloak</code>指令（没有值）</h5><p>1.本质是一个特殊属性，vue实例创建完毕并接管容器后，会删掉v-cloak属性<br>2.<code>使用css的[v-cloak]&#123;display:none;&#125;配合v-cloak可以解决网速慢时页面展示出&#123;&#123;xxx&#125;&#125;的问题</code></p><h5 id="v-once指令-（没有值）"><a href="#v-once指令-（没有值）" class="headerlink" title="v-once指令  （没有值）"></a><code>v-once</code>指令  （没有值）</h5><p>1.<code>v-once</code>所在的节点在初次动态渲染后，就视为静态内容了<br>2.以后数据的改变不会引起<code>v-once</code>所在结构的更新，可以用于优化性能</p><h5 id="v-pre指令-（没有值）"><a href="#v-pre指令-（没有值）" class="headerlink" title="v-pre指令     （没有值）"></a><code>v-pre</code>指令     （没有值）</h5><p>1.跳过其所在节点的编译过程<br>2.可利用它跳过：没有使用指令语法，没有使用插值语法的节点，会加快编译</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件插槽&amp;组件补充</title>
      <link href="/star/2023/072057.html"/>
      <url>/star/2023/072057.html</url>
      
        <content type="html"><![CDATA[<h3 id="组件插槽"><a href="#组件插槽" class="headerlink" title="组件插槽"></a>组件插槽</h3><p><code>这篇总结主要介绍Vue组件插槽&amp;组件相关的补充</code></p><span id="more"></span><h4 id="1-匿名插槽"><a href="#1-匿名插槽" class="headerlink" title="1.匿名插槽"></a>1.匿名插槽</h4><p><strong>插槽作用</strong> :  <code>父组件 传递html结构 给子组件</code><br><strong>插槽语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.传：父组件</span></span><br><span class="line"><span class="comment">&lt;子组件&gt;   html结构   &lt;/子组件&gt;</span></span><br><span class="line"><span class="comment">2.收：子组件</span></span><br><span class="line"><span class="comment">&lt;slot&gt; 默认结构 &lt;/slot&gt;*/</span></span><br></pre></td></tr></table></figure><h4 id="2-具名插槽"><a href="#2-具名插槽" class="headerlink" title="2.具名插槽"></a>2.具名插槽</h4><p><strong>具名插槽作用</strong>: <code>父组件 传递多个位置html结构 给子组件</code><br><strong>具名插槽语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.父组件传</span></span><br><span class="line"><span class="comment">&lt;子组件&gt;  </span></span><br><span class="line"><span class="comment">     &lt;template v-slot:插槽名&gt; </span></span><br><span class="line"><span class="comment">             html结构 </span></span><br><span class="line"><span class="comment">     &lt;/template&gt;</span></span><br><span class="line"><span class="comment">&lt;/子组件&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2.子组件收</span></span><br><span class="line"><span class="comment">&lt;slot name=&quot;插槽名&quot;&gt; 默认结构 &lt;slot&gt;</span></span><br><span class="line"><span class="comment">v-slot指令只能用于 template 标签</span></span><br><span class="line"><span class="comment">v-slot:插槽名    简写成   #           */</span></span><br></pre></td></tr></table></figure><h4 id="3-作用域插槽"><a href="#3-作用域插槽" class="headerlink" title="3.作用域插槽"></a>3.作用域插槽</h4><p><strong>作用域插槽作用：</strong> 子组件 传递  数据  给  父组件 的 插槽 使用<br><strong>作用域插槽语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.传： 子组件</span></span><br><span class="line"><span class="comment">&lt;slot 属性名=&quot;属性值&quot;&gt; 默认结构 &lt;/slot&gt;</span></span><br><span class="line"><span class="comment">2.收 ： 父组件</span></span><br><span class="line"><span class="comment">&lt;子组件&gt;  </span></span><br><span class="line"><span class="comment">     &lt;template v-slot=&quot;对象&quot;&gt; </span></span><br><span class="line"><span class="comment">             html结构 </span></span><br><span class="line"><span class="comment">     &lt;/template&gt;</span></span><br><span class="line"><span class="comment">&lt;/子组件&gt;*/</span></span><br></pre></td></tr></table></figure><h3 id="组件补充"><a href="#组件补充" class="headerlink" title="组件补充"></a>组件补充</h3><h4 id="1-组件使用v-model"><a href="#1-组件使用v-model" class="headerlink" title="1.组件使用v-model"></a>1.组件使用v-model</h4><p>本质是 语法糖</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.父传子 props传递 :value</span></span><br><span class="line"><span class="comment">2.子传父 $emit传递 @input*/</span></span><br></pre></td></tr></table></figure><h4 id="2-ref使用"><a href="#2-ref使用" class="headerlink" title="2. ref使用"></a>2. ref使用</h4><p><strong>作用：</strong><code> 获取 DOM元素 +  子组件实例</code><br><strong>语法：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*(1)声明ref:    &lt;标签 ref=&quot;属性名&quot;&gt;&lt;/标签&gt;</span></span><br><span class="line"><span class="comment">(2)使用ref:   this.$refs.属性名*/</span></span><br></pre></td></tr></table></figure><p><strong>注意点:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.给原生标签使用ref :  获取的是dom对象</span></span><br><span class="line"><span class="comment">2.给自定义标签(组件)使用ref:  获取的是vm实例</span></span><br><span class="line"><span class="comment">3.应用：在父组件中调用子组件的方法*/</span></span><br></pre></td></tr></table></figure><h4 id="3-nextTick"><a href="#3-nextTick" class="headerlink" title="3.nextTick"></a>3.<code>nextTick</code></h4><p><strong>作用</strong> ： <code>等待当前队列DOM异步更新之后执行</code><br><strong>原因：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*vue更新视图的过程是异步的：底层是promise微任务</span></span><br><span class="line"><span class="comment">因此开发中就会遇到已经修改了数据，但是视图没更新</span></span><br><span class="line"><span class="comment">$nextTick:等待当前队列更新完视图之后执行*/</span></span><br></pre></td></tr></table></figure><p>语法：<br><code>this.$nextTick( ()=&gt;&#123;  //代码  &#125; )</code><br><code>await this.$nextTick</code></p><h4 id="4-动态组件"><a href="#4-动态组件" class="headerlink" title="4.动态组件"></a>4.动态组件</h4><p>作用： 多个组件 使用同一个挂载点<br>语法：  <code>&lt;component :is=&quot;组件名&quot;&gt;&lt;/component&gt;</code><br>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;uname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getUser&quot;</span>&gt;</span>点我切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyUser</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/MyUser.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">MyLogin</span> <span class="keyword">from</span> <span class="string">&#x27;@/components/MyLogin.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">name</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;<span class="title class_">MyUser</span>,<span class="title class_">MyLogin</span>&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">uname</span>:<span class="string">&#x27;MyLogin&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getUser</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">uname</span> = <span class="variable language_">this</span>.<span class="property">uname</span> === <span class="string">&#x27;MyUser&#x27;</span>?<span class="string">&#x27;MyLogin&#x27;</span>:<span class="string">&#x27;MyUser&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/star/2023/072054.html"/>
      <url>/star/2023/072054.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h3><p><code>这篇总结主要介绍Vue生命周期</code></p><span id="more"></span><p><strong>简介</strong><br>1.又名：生命周期回调函数，生命周期函数，生命周期钩子<br>2.是什么？ Vue在关键时刻帮我们调用的一些特殊名称的函数<br>3.生命周期函数的名字不可更改，但函数的具体内容是程序员根据需求编写的<br>4.生命周期函数中的this指向vm  或  组件实例对象<br>每个生命钩子都与data配置项同级</p><p><strong>1.初始化阶段</strong><br><code>beforeCreate</code>     完成<code>vue</code>初始化，没有创建data<br><code>created</code>                完成data创建，没有创建挂载点<br>常用：最早操作data，一般用于发送ajax请求<br><strong>2.挂载阶段</strong><br><code>beforeMount</code>        创建挂载点，没有把data渲染到挂载点<br><code>mounted</code>                完成初始渲染，把data数据渲染到了挂载点上<br>常用： 最早操作<code>dom</code>元素，一般用于<code>dom</code>操作<br><strong>3.更新阶段</strong><br><code>beforeUpdate</code>      <code>data</code>数据发生变化，页面没有刷新<br><code>updated</code>                 将变化后的数据更新到视图<br><strong>4.销毁阶段</strong><br><code>beforeDestroy</code>      <code>vue</code>实例完成销毁前<br><strong>触发销毁条件:</strong><br>                <code>1.对组件使用v-if</code><br>                <code>2.调用vm.$destroy()</code><br>应用场景： 清除<code>setInterval</code>定时器<br><code>destroyed</code>           <code>vue</code>完成销毁   <code>GG</code></p><p><strong>keep-alive的两个钩子（路由独有）</strong><br>activated      被激活的<br>deactivated   失活的</p><p><strong>nextTick钩子</strong></p><p><strong><code>vue</code>初始渲染会走哪些钩子</strong>： <code> </code> <code>beforeCreate </code> <code>created</code> <code>beforeMount</code>   <code>mounted</code>                              </p><p><strong>你常用过哪些钩子</strong><br><code>created : 发送ajax</code><br><code>mounted : 操作dom</code><br><code>beforeDestroy : 清除永久定时器</code></p><p><strong>父子组件生命周期 :  父子子父</strong><br>初始渲染阶段： 父子子父<br>更新阶段： 父子子父<br>销毁阶段：父子子父</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue组件传值</title>
      <link href="/star/2023/072057.html"/>
      <url>/star/2023/072057.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue组件传值"><a href="#Vue组件传值" class="headerlink" title="Vue组件传值"></a>Vue组件传值</h3><p><code>这篇总结主要介绍Vue组件传值</code></p><span id="more"></span><h4 id="1-父传子-Props"><a href="#1-父传子-Props" class="headerlink" title="1.父传子      Props"></a>1.父传子      Props</h4><p><strong>语法</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*(1)传：父传</span></span><br><span class="line"><span class="comment">&lt;子组件 :属性名=&quot;属性值&quot; &gt;&lt;/子组件&gt;</span></span><br><span class="line"><span class="comment">(2)收：子收</span></span><br><span class="line"><span class="comment">props : &#123;  属性名: 数据类型 &#125;*/</span></span><br></pre></td></tr></table></figure><p><strong>单向数据流</strong><br>概念：<code> 父组件传递给子组件的数据，子组件只能使用，不能修改</code><br>原理： <code>值类型赋值的时候拷贝的是数据，如果修改拷贝后的数据，对原数据没有影响，就会导致组件数据不统一。 如果是引用类型，由于拷贝的是地址，修改拷贝后的数据会影响原数据。</code></p><h4 id="2-子传父-自定义事件配合-emit"><a href="#2-子传父-自定义事件配合-emit" class="headerlink" title="2.子传父    自定义事件配合$emit"></a>2.子传父    自定义事件配合$emit</h4><p>1.语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*1.传: 子传</span></span><br><span class="line"><span class="comment">this.$emit( &#x27;自定义事件名&#x27; , 事件对象 )</span></span><br><span class="line"><span class="comment">2.收： 父收</span></span><br><span class="line"><span class="comment">&lt;子组件 @自定义事件=&quot;事件方法&quot;&gt;&lt;/子组件&gt;*/</span></span><br></pre></td></tr></table></figure><h4 id="3-Vuex"><a href="#3-Vuex" class="headerlink" title="3.Vuex "></a>3.<code>Vuex </code></h4><p>是什么？一种用于状态管理的官方库</p><p><strong>场景：</strong>1.非父子关系组件传值，2.数据在多个组件中使用</p><p><strong><code>vuex</code>特点</strong><br>a. 响应式 ：  <code> vuex</code>数据变化了，视图会自动更新<br>b. 所有组件共享数据</p><h5 id="vuex语法"><a href="#vuex语法" class="headerlink" title="vuex语法"></a>vuex语法</h5><p><code>state</code><br>作用：负责存储数据<br>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuex中</span></span><br><span class="line">state : &#123; 属性名:属性值 &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组件中</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.属性名</span><br></pre></td></tr></table></figure><p><code>getters</code><br>作用： 相当于state计算属性<br>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vuex中</span></span><br><span class="line">getters : &#123;</span><br><span class="line">    属性名(state)&#123;</span><br><span class="line">       <span class="keyword">return</span> 属性值</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//组件中</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.属性名</span><br></pre></td></tr></table></figure><p><code>mutations</code><br>作用：修改state数据，mutations是修改state数据的唯一方式<br>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vuex中</span></span><br><span class="line"><span class="attr">mutations</span>:&#123;</span><br><span class="line">     mutation名(state,payload)&#123;</span><br><span class="line">           state.属性名 = payload</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 组件中</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;mutation名&#x27;</span> , payload )</span><br></pre></td></tr></table></figure><p><code>actions</code><br>作用：异步操作更新state<br>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)组件 提交dispatch更新actions</span></span><br><span class="line"><span class="comment">//(2)actions：异步操作</span></span><br><span class="line"><span class="attr">actions</span>:&#123;</span><br><span class="line">     action名(context,payload)&#123;</span><br><span class="line">           异步操作</span><br><span class="line">           context.<span class="title function_">commit</span>(<span class="string">&#x27;mutation名&#x27;</span> , 异步操作结果)</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//(3)获取异步操作结果，提交mutations更新</span></span><br><span class="line"><span class="comment">//(4)mutations : 同步更新state数据</span></span><br></pre></td></tr></table></figure><p><code>modules</code><br>作用：<code>模块化组织，让vuex中一个模块的数据提取封装在其他js文件中，同时也减少了命名冲突</code></p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.把相关代码封装到另一个文件</span></span><br><span class="line"><span class="comment">//2.开启命名空间namespaced:true</span></span><br><span class="line"><span class="comment">//3.在真正的vuex中的modules写入该模块</span></span><br></pre></td></tr></table></figure><h5 id="vuex原始语法-与-辅助函数语法"><a href="#vuex原始语法-与-辅助函数语法" class="headerlink" title="vuex原始语法 与  辅助函数语法"></a><code>vuex</code>原始语法 与  辅助函数语法</h5><p><strong>全局语法</strong><br><code>原始语法</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.属性名</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">getters</span>.属性名</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27; mutations名 &#x27;</span>，载荷 )</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;actions名 &#x27;</span>，载荷 )</span><br></pre></td></tr></table></figure><p><code>辅助语法</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">自动生成计算属性（computed）</span><br><span class="line">...mapState([ &#x27; 属性名 &#x27; ])</span><br><span class="line">...mapGetters([ &#x27; 属性名 &#x27; ])</span><br><span class="line">自动生成方法（methods）</span><br><span class="line">...mapMutations([&#x27; mutations名 &#x27; ])</span><br><span class="line">...mapActions([&#x27; actions名 &#x27; ])</span><br></pre></td></tr></table></figure><p><strong>模块化语法</strong><br><code>原始语法</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.模块名.属性名</span><br><span class="line"><span class="variable language_">this</span>,$store.<span class="property">getters</span>[ <span class="string">&#x27; 模块名/属性名&#x27;</span>]</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27; 模块名/mutations名&#x27;</span>，载荷)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;模块名/actions名&#x27;</span>，载荷)</span><br></pre></td></tr></table></figure><p><code>辅助语法</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">自动生成计算属性（computed）</span><br><span class="line">    ...mapState(’模块名‘，[ &#x27; 属性名 &#x27; ])</span><br><span class="line">...mapGetters(’模块名‘，[ &#x27; 属性名 &#x27; ])</span><br><span class="line">自动生成方法（methods）</span><br><span class="line">...mapMutations(’模块名‘，[&#x27; mutations名 &#x27; ])</span><br><span class="line">...mapActions(’模块名‘，[&#x27; actions名 &#x27; ])</span><br></pre></td></tr></table></figure><p><strong>使用模块化语法，必须开启命名空间：<code>namespaced: true</code></strong></p><h4 id="4-EventBus-全局事件总线-实现任意组件的通信"><a href="#4-EventBus-全局事件总线-实现任意组件的通信" class="headerlink" title="4. EventBus &#x2F; 全局事件总线                  实现任意组件的通信"></a>4. <code>EventBus</code> &#x2F; 全局事件总线                  实现任意组件的通信</h4><p><strong>语法：</strong><br>1.在main.js中挂载$bus</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="title function_">beforeCreate</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="variable language_">this</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.在A组件中绑定一个事件，当你点击这个事件时，会触发</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$bus.$emit(&#x27;事件名&#x27;,传的值)</span><br></pre></td></tr></table></figure><p>3.在B组件中的created&#x2F;mounted中去监听事件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$bus.on(&#x27;事件名&#x27;,数据)</span><br></pre></td></tr></table></figure><h4 id="如何发布一个订阅模式？"><a href="#如何发布一个订阅模式？" class="headerlink" title="如何发布一个订阅模式？"></a>如何发布一个订阅模式？</h4><p>1.通过 $on 监听&#x2F;订阅一个事件；<br>2.通过 $emit 触发&#x2F;发布一个事件；<br>3.一旦发布就会触发 $on 的回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Vue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bus</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$emit</span> = <span class="keyword">function</span> (<span class="params">eventType, ...rest</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bus</span>[eventType].<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(...rest))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$on</span> = <span class="keyword">function</span> (<span class="params">eventType, callback</span>) &#123;</span><br><span class="line">    <span class="comment">// 收集属性对应的方法</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">bus</span>[eventType]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">bus</span>[eventType].<span class="title function_">push</span>(callback)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">bus</span>[eventType] = [callback]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> $bus = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br></pre></td></tr></table></figure><p><strong><code>ES6</code>写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vue</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">bus</span> = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    $emit(eventType, ...rest) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">bus</span>[eventType].<span class="title function_">forEach</span>(<span class="function"><span class="params">callback</span> =&gt;</span> <span class="title function_">callback</span>(...rest))</span><br><span class="line">    &#125;</span><br><span class="line">    $on(eventType, callback)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">bus</span>[eventType]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">bus</span>[eventType].<span class="title function_">push</span>(callback)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">bus</span>[eventType] = [callback]</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了这些还有传值方式，这边的话自己去查文档，这些在工作中足够使用了</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue认知基础认知</title>
      <link href="/star/2023/072051.html"/>
      <url>/star/2023/072051.html</url>
      
        <content type="html"><![CDATA[<h2 id="Vue认知基础认知"><a href="#Vue认知基础认知" class="headerlink" title="Vue认知基础认知"></a>Vue认知基础认知</h2><p><code>这篇总结主要介绍Vue认知基础认知</code></p><span id="more"></span><h3 id="1-学习vue最好的方式：看官网"><a href="#1-学习vue最好的方式：看官网" class="headerlink" title="1.学习vue最好的方式：看官网"></a>1.学习<code>vue</code>最好的方式：看官网</h3><p><code>vue3官网</code>： <a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br><code>vue2官网</code>： <a href="https://v2.cn.vuejs.org/">https://v2.cn.vuejs.org/</a><br><code>vue风格指南(代码规范)</code> ：<a href="https://v2.cn.vuejs.org/v2/style-guide/">https://v2.cn.vuejs.org/v2/style-guide/</a></p><h3 id="2-vue是什么"><a href="#2-vue是什么" class="headerlink" title="2.vue是什么"></a>2.<code>vue</code>是什么</h3><p><code>一套用于构建用户页面的 渐进式框架</code><br><strong>作用：</strong>构建用户页面。 把数据 渲染到 页面上<br><strong>特点：</strong> 渐进式。 一开始不需要使用所有的功能，只需要导入<code>vue</code>核心功能，随着开发的深入逐步的导入对应的功能。<br><code>框架与库的区别</code><br><strong>库 ：</strong> 一个文件中封装了很多的函数<br><strong>框架</strong> ： 多个库的组合 （ 框架功能更加的强大， 但是有更多的限制）</p><h3 id="3-vue特点"><a href="#3-vue特点" class="headerlink" title="3.vue特点"></a>3.<code>vue</code>特点</h3><p>1.渐进式<br>2.数据 驱动 ： 数据是响应式的, 一旦数据改变了，页面会自动更新，而无需DOM操作<br>3.<code>MVVM</code>设计模式<br><code>M：Model数据</code><br><code>V: View视图</code><br><code>VM: vue实例</code><br><code>MVVM模式通过数据双向绑定，当视图变化数据会更新，数据变化了视图也会更新，而无需DOM操作</code></p><p><strong>观察发现</strong><br><code>1.data中所有的属性，最后都出现在了Vue实例身上</code><br><code>2.vm身上所有的属性及vue原型上的所有属性，在vue模板中都可以直接使用</code></p><h3 id="4-一条重要的内置关系"><a href="#4-一条重要的内置关系" class="headerlink" title="4.一条重要的内置关系"></a>4.一条重要的内置关系</h3><p><code>在你写项目的过程中，只有是new Vue才是vue实例，且只有main.js中存在一个vue实例，其余的都是组件实例，但是组件实例不等于vue实例，那它是如何使用vue身上的方法的呢？</code></p><p><code>vue开发人员在底层将组件原型对象指向了vue原型对象，因此就能够使用了</code></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3</title>
      <link href="/star/2023/0720510.html"/>
      <url>/star/2023/0720510.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><p>本篇主要总结了vue3的知识与概念</p><span id="more"></span><h2 id="一-常用Composition-API-组合式API"><a href="#一-常用Composition-API-组合式API" class="headerlink" title="一.常用Composition API  (组合式API)"></a>一.常用Composition <code>API  (组合式API)</code></h2><h3 id="1-1拉开序幕的setup"><a href="#1-1拉开序幕的setup" class="headerlink" title="1.1拉开序幕的setup"></a>1.1拉开序幕的setup</h3><p><strong>1.是什么？</strong>是vue3中一个新的配置项，值为一个函数<br><strong>2.理解：</strong>是所有组合式<code>API&quot;表演的舞台&quot;</code><br><strong>3.怎么使用？</strong> 组件中所用到的：数据，方法等等，<strong>均要配置在setup中</strong><br><strong>4.返回值</strong>：setup函数的两种返回值，一个是对象，第二个就是返回一个渲染函数<br><strong>a.若返回一个对象，则对象中的属性，方法，在模板中均可使用（重点）</strong><br>b.若返回的是一个渲染函数：则可以自定义渲染内容（了解）<br><strong>5.注意点：</strong><br>a. <strong>尽量不要和vue2配置混用</strong></p><ol><li><code>vue2配置(data,methods,computed...)中可以访问到setup中的属性与方法</code></li><li><code>但在setup中不能访问到vue2配置的(data,methods,computed...)</code></li><li><code>如果有重名，setup优先</code></li></ol><p>b. <strong>setup不能是一个async函数</strong>，因为返回值不再是return的对象，而是promise，模板看不到return对象中的属性。（<strong>注意：</strong>后期也可以使用返回一个Promise实例，但是需要Suspense和异步组件配合）</p><h4 id="setup参数"><a href="#setup参数" class="headerlink" title="setup参数"></a>setup参数</h4><p>参数：<br><code>props</code>：父组件传过来的，值为对象，包含：组件外部传过来，且组件内部声明接收了的属性</p><p><code>context</code>： 上下文对象</p><table><thead><tr><th align="center">emit</th><th align="center">可以触发父亲的自定义事件</th></tr></thead><tbody><tr><td align="center"><code>attrs</code></td><td align="center">非props属性组成的对象(捡漏)</td></tr><tr><td align="center"><code>slots</code></td><td align="center">插槽信息组成的对象</td></tr></tbody></table><h4 id="说一下你对Vue3的了解"><a href="#说一下你对Vue3的了解" class="headerlink" title="说一下你对Vue3的了解"></a>说一下你对<code>Vue3</code>的了解</h4><p><strong>性能更高了</strong><br>1.响应式原理换成了<code>proxy</code><br>2.<code>VNode Diff</code>的算法进行了优化</p><p><strong>体积更小了</strong><br>1.删除了一些不常用的<code>API</code>，例如<code>filter,EventBus...</code><br>2.所以<code>API</code>都是按需引入，能配合<code>webpack</code>等构建工具支持<code>Tree Shaking</code></p><p><strong>对TS支持更好了</strong> <code>源码就是使用TS写的</code></p><p><strong><code>Compostition API(组合API)</code></strong><br>1.解决了同一功能的数据和业务逻辑复用的问题<br>2.<code>Vue2</code>确实可以通过<code>mixin</code>进行复用，但是<code>mixin</code>容易造成命名冲突和数据来源不清晰等问题</p><p><strong>新特性</strong><br>1.<code>Fragment</code><br>2.<code>Teleport</code><br>3.<code>Suspense</code><br>……</p><h3 id="1-2-ref函数"><a href="#1-2-ref函数" class="headerlink" title="1.2 ref函数"></a>1.2 ref函数</h3><p>作用：定义一个响应式数据<br>语法:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：按需导入ref函数 </span></span><br><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//第二步：在setup配置项中使用</span></span><br><span class="line"><span class="keyword">const</span> xxx = <span class="title function_">ref</span>(<span class="string">&#x27;666&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">创建了一个包含响应式数据的引用对象(reference对象，简称ref对象)</span></span><br><span class="line"><span class="comment">js中操作数据：xxx.value</span></span><br><span class="line"><span class="comment">模板中读取数据：不需要使用.value  直接：&#123;&#123;xxx&#125;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>备注：<br>1.接收的数据可以是：基本数据类型，也可以是对象类型<br>2.基本数据类型的数据：响应式依然依靠<code>Object.defineProperty()的getter与setter完成的</code>，<strong>他只能读取，不能新增和删除</strong><br>3.对象类型的数据：内部使用了vue3中的一个新函数—reactive函数(内部封装es6新增的Proxy的操作)<br>4.<code>ref</code>包裹的内部数据，如果说是一个复杂数据类型，其实他还是一个<code>reactive</code></p><h3 id="1-3-reactive函数"><a href="#1-3-reactive函数" class="headerlink" title="1.3 reactive函数"></a>1.3 reactive函数</h3><p>1.作用：定义一个对象，数组类型的响应式数据（基本数据类型别用他，用ref函数）<br>2.语法：<br>const <strong>代理对象</strong>名 &#x3D; reactive(<strong>源对象</strong>)，接收一个对象(或数组)，返回一个代理对象（Proxy的实例对象，简称proxy对象）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一步：按需导入ref函数 </span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//第二步：在setup配置项中使用</span></span><br><span class="line"><span class="keyword">const</span> 对象名 = <span class="title function_">reactive</span>(&#123;属性名:属性值&#125;)</span><br><span class="line"><span class="comment">//直接读取，别写.value了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(对象名.属性名)</span><br></pre></td></tr></table></figure><p>3.<code>reactive</code>定义的响应式数据是’深层次的’<br>4.内部是基于<code>ES6</code>的<code>Proxy</code>实现，通过<strong>代理对象</strong>操作<strong>源对象</strong>内部数据都是响应式的<br>5.<code>reactive</code>包裹的内部数据，如果说是一个复杂数据类型，其实他还是一个<code>reactive</code></p><h3 id="1-4-Vue3中的响应式原理"><a href="#1-4-Vue3中的响应式原理" class="headerlink" title="1.4 Vue3中的响应式原理"></a>1.4 Vue3中的响应式原理</h3><h4 id="vue2的响应式"><a href="#vue2的响应式" class="headerlink" title="vue2的响应式"></a>vue2的响应式</h4><h5 id="实现原理："><a href="#实现原理：" class="headerlink" title="实现原理："></a>实现原理：</h5><p>对象类型：通过Object.defineProperty()对属性的读取，修改进行拦截（数据劫持）<br>数组类型：通过重写更新数组的一系列方法来实现拦截（对数组的变更方法进行了包裹）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(给谁添加属性，<span class="string">&#x27;新增属性的名字&#x27;</span>,&#123;</span><br><span class="line">                      <span class="comment">//有人读取新增属性的时候调用</span></span><br><span class="line">                      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> 修改后的值  <span class="comment">//修改后的值会传给set的形参</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="comment">//有人修改新增属性时调用</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">value</span>)&#123;&#125;</span><br><span class="line">                      &#125;)</span><br><span class="line"><span class="comment">//get，set只能读取，无法捕获到新增和删除，因此在vue中，新增，删除操作没有响应式，这就是单向数据流为啥产生的原因</span></span><br></pre></td></tr></table></figure><h5 id="存在的问题："><a href="#存在的问题：" class="headerlink" title="存在的问题："></a>存在的问题：</h5><p>1.新增属性，删除属性，界面不会更新<br>this.$set(添加谁，’属性名’,’属性值’)   Vue.set(添加谁，’属性名’,’属性值’)<br>this.$delete(删除谁，’属性名’)    Vue.delete(删除谁，’属性名’)</p><p>2.直接通过下标修改数组，界面不会自动更新</p><h4 id="vue3的响应式"><a href="#vue3的响应式" class="headerlink" title="vue3的响应式"></a>vue3的响应式</h4><h5 id="实现原理：-1"><a href="#实现原理：-1" class="headerlink" title="实现原理："></a>实现原理：</h5><p>步骤1：<strong>使用Proxy代理对象完成</strong>：通过它去拦截对象中任意属性的变化，包括属性的读写，增删</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(给谁绑定,&#123;</span><br><span class="line">    <span class="comment">//3个方法get set deleteProperty</span></span><br><span class="line">    <span class="comment">//有人读取p的某个属性</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    target   就是目标源   也就是给谁绑定的对象</span></span><br><span class="line"><span class="comment">    propName  就是增删改查的哪个属性</span></span><br><span class="line"><span class="comment">    value    就是你修改过后的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,propName</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> target[propName]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//有人修改了p的某个属性，或给p追加某个属性时调用</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,propName,value</span>)&#123;</span><br><span class="line">        target[propName] = value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//有人删除了p的某个属性</span></span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target,propName</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">delete</span> target[propName]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>步骤2：<strong>使用Reflect反射对象完成</strong>：对源对象的属性进行操作<br>配合window的内置对象<strong>Reflect  反射   ES6新增的一个内置对象</strong></p><p>除了原始的增删改查，还能使用Reflect内置对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(从哪个对象身上得到,<span class="string">&#x27;得到哪个属性&#x27;</span>)</span><br><span class="line"><span class="comment">//改  增</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(从哪个对象身上改,<span class="string">&#x27;改哪个属性&#x27;</span>,<span class="string">&#x27;改成什么&#x27;</span>)</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(从哪个对象身上增,<span class="string">&#x27;增哪个属性&#x27;</span>,<span class="string">&#x27;添加什么&#x27;</span>)</span><br><span class="line"><span class="comment">//删</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(从哪个对象身上上,<span class="string">&#x27;删哪个属性&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>Proxy配合Reflect实现vue3的响应式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(给谁绑定,&#123;</span><br><span class="line">    <span class="comment">//3个方法get set deleteProperty</span></span><br><span class="line">    <span class="comment">//有人读取p的某个属性</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    target   就是目标源   也就是给谁绑定的对象</span></span><br><span class="line"><span class="comment">    propName  就是增删改查的哪个属性</span></span><br><span class="line"><span class="comment">    value    就是你修改过后的值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target,propName</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target,propName)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//有人修改了p的某个属性，或给p追加某个属性时调用</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target,propName,value</span>)&#123;</span><br><span class="line">        <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target,propName,value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//有人删除了p的某个属性</span></span><br><span class="line">    <span class="title function_">deleteProperty</span>(<span class="params">target,propName</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target,propName)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-5-reactive和ref"><a href="#1-5-reactive和ref" class="headerlink" title="1.5 reactive和ref"></a>1.5 reactive和ref</h3><p>从定义数据角度对比：<br>1.ref用来定义：基本数据类型<br>2.reactive用来定义：对象和数组类型的数据<br>备注：ref也可以用来定义对象（或数组）类型数据，它内部会自动通过reactive转化为代理对象</p><p>从原理角度对比：<br>1.ref通过Object.defineProperty()的get和set实现响应式（数据劫持）<br>2.reactive是通过Proxy来实现响应式（数据劫持），并通过Reflect操作源对象内部的数据</p><p>从使用角度对比：<br>1.ref定义的数据：操作数据需要 .value ，读取数据时，模板中直接读取不需要 .value<br>2.reactive定义的数据：操作数据和读取数据，均不需要 .value</p><h3 id="1-6计算属性与监视"><a href="#1-6计算属性与监视" class="headerlink" title="1.6计算属性与监视"></a>1.6计算属性与监视</h3><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>与vue2中computed配置功能一致</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue3中一定要按需导入computed,才能使用计算属性</span></span><br><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;demo&quot;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> p = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            first = <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">            last = <span class="string">&#x27;b&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//这里的full在页面上能直接使用，p.full</span></span><br><span class="line">        person.<span class="property">full</span> = <span class="title function_">computed</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> p.<span class="property">first</span> + <span class="string">&#x27;-&#x27;</span> + p.<span class="property">last</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">set</span>(<span class="params">val</span>)&#123;</span><br><span class="line">                p.<span class="property">first</span> = val.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">                p.<span class="property">last</span> = val.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//搞完以后一定要返回出去</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            p</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="watch函数"><a href="#watch函数" class="headerlink" title="watch函数"></a>watch函数</h4><p>与vue2中watch功能一致</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue3中一定要按需导入watch,才能使用计算属性</span></span><br><span class="line"><span class="keyword">import</span> &#123;watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;demo&quot;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">let</span> msg = <span class="title function_">ref</span>(<span class="string">&#x27;你好&#x27;</span>)</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        监视ref定义的一个响应式数据</span></span><br><span class="line"><span class="comment">         watch(你要监视谁,(newVal,oldVal)=&gt;&#123;</span></span><br><span class="line"><span class="comment">            console.log(&#x27;sum改变了&#x27;,newVal,oldVal)</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">         watch(sum,(newVal,oldVal)=&gt;&#123;</span></span><br><span class="line"><span class="comment">            console.log(&#x27;sum改变了&#x27;,newVal,oldVal)</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        监视ref定义的多个响应式数据</span></span><br><span class="line"><span class="comment">        此时newVal,oldVal返回的是一个数组</span></span><br><span class="line"><span class="comment">         watch([sum,msg],(newVal,oldVal)=&gt;&#123;</span></span><br><span class="line"><span class="comment">            console.log(&#x27;sum改变了&#x27;,newVal,oldVal)</span></span><br><span class="line"><span class="comment">        &#125;,&#123;immediate:true,deep:true&#125;)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//搞完以后一定要返回出去</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            sum，</span><br><span class="line">            msg</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="1-1监视ref定义的一个响应式数据"><a href="#1-1监视ref定义的一个响应式数据" class="headerlink" title="1.1监视ref定义的一个响应式数据"></a>1.1监视ref定义的一个响应式数据</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(sum,<span class="function">(<span class="params">newVal,oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum改变了&#x27;</span>,newVal,oldVal)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h5 id="1-2监视ref定义的多个响应式数据"><a href="#1-2监视ref定义的多个响应式数据" class="headerlink" title="1.2监视ref定义的多个响应式数据"></a>1.2监视ref定义的多个响应式数据</h5><p><strong>此时newVal,oldVal返回的是一个数组</strong>      </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>([sum,msg],<span class="function">(<span class="params">newVal,oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;sum改变了&#x27;</span>,newVal,oldVal)</span><br><span class="line">        &#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h5 id="2-监视reactive定义的数据"><a href="#2-监视reactive定义的数据" class="headerlink" title="2.监视reactive定义的数据"></a>2.监视reactive定义的数据</h5><p>注意：<br>1.如果监视的是reactive定义的响应式数据时(整个对象，或者使用ref传递的数据是对象)，此处无法正确的获取oldValue，并且强制开启了深度监视(deep配置无效)</p><p>2.如果监视的是reactive定义的响应式数据中的<strong>某个属性</strong>，这个属性是基础数据类型，<code>但是需要把数据写成函数返回的代码</code>，例如<code>watch(()=&gt;对象.属性,(newval,oldval)=&gt;&#123;&#125;)</code></p><p>3.如果监视的是reactive定义的响应式数据中的<strong>某些属性</strong>，这个属性是基础数据类型，<code>但是需要把数据写成函数返回的代码</code>，例如：<code>watch([()=&gt;对象.属性1,()=&gt;对象.属性2],(newval,oldval)=&gt;&#123;&#125;)</code></p><p>4.如果监视的是reactive定义的响应式数据中的某个属性的值依然是一个对象，这个属性是复杂数据类型，且deep有效</p><p>总结：监听对象类型的数据是拿不到oldVal的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vue3中一定要按需导入watch,才能使用计算属性</span></span><br><span class="line"><span class="keyword">import</span> &#123;watch&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;demo&quot;</span>,</span><br><span class="line">    <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> p1 = <span class="title function_">ref</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="number">666</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">let</span> p = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">            <span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">        &#125;)</span><br><span class="line">         <span class="title function_">watch</span>(p1.<span class="property">value</span>,<span class="function">(<span class="params">newVal,oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p1改变了&#x27;</span>,newVal,oldVal)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="title function_">watch</span>(p,<span class="function">(<span class="params">newVal,oldVal</span>)=&gt;</span>&#123;</span><br><span class="line">             <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;p改变了&#x27;</span>,newVal,oldVal)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">//搞完以后一定要返回出去</span></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            p,</span><br><span class="line">            p1</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3-对于ref在watch中是否-value去监视"><a href="#3-对于ref在watch中是否-value去监视" class="headerlink" title="3.对于ref在watch中是否.value去监视"></a>3.对于ref在watch中是否.value去监视</h5><p>1.如果是ref定义的<strong>基本数据类型</strong>不要去<code>.value</code>，如果你去<code>.value</code>,那么它侦听的就不是你的属性了，而是你属性的<code>value</code>值</p><p>2.如果是ref定义的<strong>复杂数据类型</strong>要去<code>.value</code>，因为你ref里面写对象，本质上还是要拿到他的reactive对象</p><p>3.如果是ref定义的<strong>复杂数据类型</strong>，你不想写<code>.value</code>，则只需要开启深度监视即可</p><h4 id="watchEffect函数"><a href="#watchEffect函数" class="headerlink" title="watchEffect函数"></a><code>watchEffect</code>函数</h4><p>官方解释：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行。</p><p><code>watch</code>的套路是：既要指明监视的属性，也要指明监视的回调</p><p><code>watchEffect</code>的套路是：不管指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性</p><p><code>watchEffect</code>有点像<code>computed</code><br>但是<code>computed</code>注重的计算出来的值(回调函数的返回值)，所以必须写返回值<br>而<code>watchEffect</code>更注重过程(回调函数的函数体)，所以不用写返回值</p><p><a href="https://cn.vuejs.org/api/reactivity-core.html#watcheffect">watchEffect官方文档</a></p><h3 id="1-7-生命周期"><a href="#1-7-生命周期" class="headerlink" title="1.7 生命周期"></a>1.7 生命周期</h3><p>Vue3中可以继续使用Vue2的生命钩子，但是有两个被更名：</p><table><thead><tr><th align="center">beforeDestroy</th><th align="center">改为</th><th align="center">beforeUnmount</th></tr></thead><tbody><tr><td align="center">destroyed</td><td align="center">改为</td><td align="center">unmounted</td></tr></tbody></table><p>Vue3.0也提供了<strong>组合式API</strong>形式的生命周期钩子，即写在setup中的钩子，与Vue2.0中钩子对应关系如下</p><table><thead><tr><th align="center">Vue2.0</th><th align="center">改变</th><th align="center">Vue3.0</th></tr></thead><tbody><tr><td align="center">beforeCreate</td><td align="center"></td><td align="center">setup</td></tr><tr><td align="center">created</td><td align="center"></td><td align="center">setup</td></tr><tr><td align="center">beforeMount</td><td align="center"></td><td align="center">onBeforeMount</td></tr><tr><td align="center">mounted</td><td align="center"></td><td align="center">onMounted</td></tr><tr><td align="center">beforeUpdate</td><td align="center"></td><td align="center">onBeforeUpdate</td></tr><tr><td align="center">updated</td><td align="center"></td><td align="center">onUpdated</td></tr><tr><td align="center">beforeUnmount</td><td align="center"></td><td align="center">onBeforeUnmount</td></tr><tr><td align="center">unmounted</td><td align="center"></td><td align="center">onUnmounted</td></tr></tbody></table><p>语法：<code>生命周期(()=&gt;执行代码)</code></p><h3 id="1-8-自定义hook函数"><a href="#1-8-自定义hook函数" class="headerlink" title="1.8 自定义hook函数"></a>1.8 自定义hook函数</h3><p>1.什么是hook？本质是一个函数，把setup函数中使用的组合API进行了封装</p><p>2.类似于vue2中的mixin</p><p>优势：复用代码，让setup中的逻辑更清除易懂</p><h3 id="1-9-toRef"><a href="#1-9-toRef" class="headerlink" title="1.9 toRef"></a>1.9 toRef</h3><p>作用：创建一个ref对象，其value值指向另一个对象中的某个属性值</p><p>语法：<code>const name = toRef(操作的对象,&#39;属性&#39;)</code></p><p>应用：要将响应式对象中的某个属性单独提供给外部使用</p><p>扩展：<code>toRefs</code>与<code>toRef</code>功能一致，但是可以批量创建多个ref对象，语法：<code>toRefs(操作对象)</code></p><h2 id="二-其他的组合API（了解）"><a href="#二-其他的组合API（了解）" class="headerlink" title="二.其他的组合API（了解）"></a>二.其他的组合API（了解）</h2><h3 id="1-shallowReactive和shallowRef"><a href="#1-shallowReactive和shallowRef" class="headerlink" title="1. shallowReactive和shallowRef"></a>1. <code>shallowReactive和shallowRef</code></h3><p><code>shallowReactive</code>：只处理对象最外层属性的响应式(只考虑第一层)</p><p><code>shallowRef</code>：只支持处理基本数据类型的响应式，不进行对象响应式处理</p><p>什么时候使用？</p><p>shallowReactive：如果有一个对象数据，结构比较深，但变化时只是外层属性变化 </p><p>shallowRef：如果有一个对象数据，后续功能不会修改该对象中的属性，而是生成新的对象来替换</p><h3 id="2-readonly和shallowReadonly"><a href="#2-readonly和shallowReadonly" class="headerlink" title="2. readonly和shallowReadonly"></a>2. <code>readonly和shallowReadonly</code></h3><p><code>readonly</code>：让一个响应式数据变为只读的（深只读）</p><p><code>shallowReadonly</code>：让一个响应式数据变为只读的（浅只读）</p><p>应用场景：不希望数据被修改时</p><h3 id="3-toRaw和markRaw"><a href="#3-toRaw和markRaw" class="headerlink" title="3. toRaw和markRaw"></a>3. <code>toRaw和markRaw</code></h3><p><code>toRaw</code>：<br>作用：将一个由<code>reactive</code>生成的响应式对象转换为普通对象<br>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所以操作，不会引起页面刷新</p><p><code>markRaw</code>：<br>作用：标记一个对象，使其永远不会再成为响应式<br>应用场景：<br>1.有些值不应该被设置为响应式的，例如第三方库等<br>2.当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能</p><h3 id="4-customRef"><a href="#4-customRef" class="headerlink" title="4. customRef"></a>4. <code>customRef</code></h3><p>作用：创建一个自定义的ref，并对其依赖项跟踪和更新触发进行显式控制</p><p>看官网：<a href="https://cn.vuejs.org/api/reactivity-advanced.html#customref">customRef</a></p><p>track  通知vue追踪数据的变化<br>trigger  通知vue再次解析模板</p><h3 id="5-provide-inject"><a href="#5-provide-inject" class="headerlink" title="5. provide/inject"></a>5. <code>provide/inject</code></h3><p>作用：实现祖与后代通信</p><p>使用：<br>发：provide(‘叫啥’, 数据变量名)<br>收：inject(‘叫啥’)</p><p>两个<code>叫啥</code>必须一致，可以随便叫什么名字</p><p><strong>孙传爷</strong><br>思路：在爷爷中封装一个函数，并且将这个函数通过provide(‘叫啥’, 数据变量名)发送过去，后代通过inject(‘叫啥’)接收，拿到函数后，找到需要时进行调用并传参</p><h3 id="6-响应式数据的判断"><a href="#6-响应式数据的判断" class="headerlink" title="6.响应式数据的判断"></a>6.响应式数据的判断</h3><p>isRef：检查一个值是否为ref对象<br>isReactive：检查一个对象是否由reactive创建的响应式代理<br>isReadonly：检查一个对象是否是由<code>readonly</code>创建的只读代理<br>isProxy：检查一个对象是否由reactive或者readonly方法创建的代理</p><h2 id="三-组合API的优势"><a href="#三-组合API的优势" class="headerlink" title="三.组合API的优势"></a>三.组合<code>API</code>的优势</h2><p>1.解决了同一功能的数据和业务逻辑复用的问题<br>2.<code>Vue2</code>确实可以通过<code>mixin</code>进行复用，但是<code>mixin</code>容易造成命名冲突和数据来源不清晰等问题</p><h2 id="四-新的组件"><a href="#四-新的组件" class="headerlink" title="四.新的组件"></a>四.新的组件</h2><h3 id="Fragment组件"><a href="#Fragment组件" class="headerlink" title="Fragment组件"></a><code>Fragment</code>组件</h3><p>在vue2中：组件必须有一个根标签</p><p>在vue3中，组件可以没有根标签，内部会将多个标签包含着一个Fragment虚拟元素中</p><p>好处：减少标签层级，减少内存占用</p><h3 id="Teleport组件"><a href="#Teleport组件" class="headerlink" title="Teleport组件"></a><code>Teleport</code>组件</h3><p>是什么？Teleport是一种能够将我们的组件html结构移动到指定的位置的技术</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">dialog</span> <span class="attr">v-if</span>=<span class="string">&quot;bBar&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleDialog&quot;</span>&gt;</span>显示弹框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> <span class="title class_">Dialog</span> <span class="keyword">from</span> <span class="string">&#x27;./Dialog.vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&#x27;Child&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title class_">Dialog</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> bBar = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> <span class="title function_">handleDialog</span> = (<span class="params"></span>) =&gt; &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                bBar.<span class="property">value</span> = !bBar.<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                bBar,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                handleDialog,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p><strong>解决</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">dialog</span> <span class="attr">v-if</span>=<span class="string">&quot;bBar&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleDialog&quot;</span>&gt;</span>显示弹框<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="Suspense组件-配合异步组件使用"><a href="#Suspense组件-配合异步组件使用" class="headerlink" title="Suspense组件(配合异步组件使用)"></a><code>Suspense</code>组件(配合异步组件使用)</h3><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p><p><a href="https://cn.vuejs.org/guide/built-ins/suspense.html#suspense">Suspense组件文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Suspense</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">异步组件名</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在 #fallback 插槽中显示 “正在加载中” --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> #<span class="attr">fallback</span>&gt;</span></span><br><span class="line">    Loading...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上方存放异步组件，在<code>#fallback</code>中存放异步组件未加载出来时的页面，当上方的异步组件未加载出来时，让他先加载下面的页面</p><h2 id="五-其他"><a href="#五-其他" class="headerlink" title="五.其他"></a>五.其他</h2><h3 id="1-全局API的转移"><a href="#1-全局API的转移" class="headerlink" title="1.全局API的转移"></a>1.全局<code>API</code>的转移</h3><p><code>vue2</code>有许多全局的<code>API</code>和配置，例如注册全局组件，注册全局指令等</p><p><code>vue3</code>中对这些<code>API</code>做出了调整：<br>即：Vue.xxx调整到应用实例(app)上</p><table><thead><tr><th align="center">2.x 全局API(Vue)</th><th align="center">3.x 实例API(app)</th></tr></thead><tbody><tr><td align="center">Vue.config.xxx</td><td align="center">app.config.xxx</td></tr><tr><td align="center">Vue.config.ProductionTip</td><td align="center">移除</td></tr><tr><td align="center">Vue.component</td><td align="center">app.component</td></tr><tr><td align="center">Vue.directive</td><td align="center">app.directive</td></tr><tr><td align="center">Vue.mixin</td><td align="center">app.mixin</td></tr><tr><td align="center">Vue.use</td><td align="center">app.use</td></tr><tr><td align="center">Vue.prototype</td><td align="center">app.config.globalProperties</td></tr></tbody></table><h3 id="2-其他改变"><a href="#2-其他改变" class="headerlink" title="2.其他改变"></a>2.其他改变</h3><p>1.data选项应该始终被声明为一个函数</p><p>2.过渡类名的更改</p><p>3.移除了keyCode作为v-on的修饰符，同时也不再支持config.keyCodes</p><p>4.移除v-on.native修饰符</p><p>5.移除过滤器filter</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PWA</title>
      <link href="/star/2023/0720589.html"/>
      <url>/star/2023/0720589.html</url>
      
        <content type="html"><![CDATA[<h2 id="PWA"><a href="#PWA" class="headerlink" title="PWA"></a>PWA</h2><p><code>这篇总结主要介绍一下PWA</code></p><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>1.是什么？是渐进式web应用，Progressive Web App，简称PWA。<br>2.PWA并不是靠特指某一项技术，而是经过应用一些新技术进行改进</p><p>是一个标准的PWA程序，必须包含3个部分。<br>一：https协议或者<a href="http://localhost,/">http://localhost，</a><br>二：manifest.json，<br>三：service worker</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>渐进式-适用于所有浏览器<br>流程-借助Service Worker在离线或网络较差时能够正常访问<br>可安装-用户可以添加常用webapp到桌面<br>原生体验-和app一样，用于首屏加载动画，隐藏地址栏等体验<br>粘性-通过推送离线通知，让用户回流</p><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><h3 id="1-web-app-manifest-应用程序清单"><a href="#1-web-app-manifest-应用程序清单" class="headerlink" title="1.web app manifest : 应用程序清单"></a>1.web app manifest : 应用程序清单</h3><p>它是PWA技术集合的一部分，他的主要作用是让网站能够直接安装到设备的主屏幕上，无需下载</p><p>具体他就是一个JSON文件，在JSON文件去添加一些配置，添加完这些配置，就能将网站添加在桌面上。</p><p>优势：传统web app 入口需要网址&#x2F;书签&#x2F;收藏&#x2F;直接搜索，才能去访问他的网址，同时粘性不高，用了一次不再使用</p><p>可以添加到页面，有唯一的图标和名称<br>有启动时间，避免生硬的过渡<br>隐藏浏览器相关的UI，比如地址栏</p><h4 id="如何使用manifest"><a href="#如何使用manifest" class="headerlink" title="如何使用manifest"></a>如何使用manifest</h4><p><strong>1.在项目根目录下创建一个manifest.json文件</strong></p><p><strong>2.在index.html中引入manifest.json文件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;manifest&quot;</span> <span class="attr">href</span>=<span class="string">&quot;manifest.json&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3.在manifest文件中提供常见的配置</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;Hello PWA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;short_name&quot;</span><span class="punctuation">:</span><span class="string">&quot;PWA&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start_url&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icons&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;src&quot;</span><span class="punctuation">:</span><span class="string">&quot; &quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;sizes&quot;</span><span class="punctuation">:</span><span class="string">&quot;144*144&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="string">&quot;image/png&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;background-color&quot;</span><span class="punctuation">:</span><span class="string">&quot;blue&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tieme_color&quot;</span><span class="punctuation">:</span><span class="string">&quot;pink&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;display&quot;</span><span class="punctuation">:</span><span class="string">&quot;standalone&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>name：用于指定应用的名称，用户安装横幅提示的名称和启动画面中的汉字<br>short_name：应用的短名称，用于主屏幕显示<br>start_url：指定用户从设备启动应用程序所加载的url，就是你加载哪个页面为首次加载页面，可以是绝对路径与相对路径<br>icons：用于指定可在各种环境中作用应用程序图标的图像对应数组  144*144<br>background-color：用户指定启动动画的背景颜色<br>theme_color：用于指定应用程序的主题颜色，就是顶部背景颜色<br>display：用于指定web app显示模式<br>         fullscreen:全屏显示<br>         standalone:让应用看起来像一个独立的应用程序，包括不同的窗口，在应用程序启动器中，拥有自己的图标<br>         minimal:让应用看起来像一个独立的应用程序,但会有浏览地址栏</p><p><strong>4.只支持https协议或者<a href="http://localhost下访问项目/">http://localhost下访问项目</a></strong></p><h3 id="2-service-worker：持久的离线缓存"><a href="#2-service-worker：持久的离线缓存" class="headerlink" title="2.service worker：持久的离线缓存"></a>2.service worker：持久的离线缓存</h3><ol><li>是一个标准的PWA程序，必须包含3个部分。一：https协议或者<a href="http://localhost，二：manifest.json，三：service">http://localhost，二：manifest.json，三：service</a> worker</li><li>service worker允许web应用在网络情况较差或者离线的情况下依旧可以访问</li><li>service worker可以极大的提升web app的用户体验</li><li>service worker是一个独立的worker线程，独立于当前网页进程，是一种特殊的<strong>web worker</strong></li></ol><h4 id="web-worker介绍"><a href="#web-worker介绍" class="headerlink" title="web worker介绍"></a>web worker介绍</h4><p>浏览器中的js是单线程的，同一时间只能做一件事，随着业务的增加，会造成严重的性能问题，因此W3C提出了 web worker，他是脱离主线程之外的，将一些复杂耗时的活交给他，完成通过后通过postMessage方法告诉主线程，web worker是一个独立的运行环境，不能操作DOM和BOM</p><h4 id="web-worker的使用"><a href="#web-worker的使用" class="headerlink" title="web worker的使用"></a>web worker的使用</h4><p>1.创建web worker </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;work.js&#x27;</span>)</span><br></pre></td></tr></table></figure><p>2.在web worker中进行复杂的计算</p><p>3.web worker计算结束后，通过self.postMessage(msg)给主线程发消息</p><p>4.主线程通过worker.onmessage &#x3D; function(msg){}监听消息</p><p>5.主线程也可以通过用同样的方式来给web worker进行通讯</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在a.js文件夹中</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;start&#x27;</span>)</span><br><span class="line"><span class="comment">/*let sum = 0</span></span><br><span class="line"><span class="comment">for(let i = 0;i &lt; 100000000;i++) &#123;</span></span><br><span class="line"><span class="comment">    sum+=i</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"><span class="comment">//1.创建worker实例</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;work.js&#x27;</span>)</span><br><span class="line"><span class="comment">//2.拿到web worker传过来的消息，监听message事件</span></span><br><span class="line">worker.<span class="title function_">addEventListener</span>(<span class="string">&#x27;message&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>)  <span class="comment">//e.data就是work.js给我们发送的消息</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在work.js文件夹中操作大量运算数据代码，web worker是一个独立的运行环境，不能操作DOM和BOM</span></span><br><span class="line"><span class="comment">//1.运算复杂数据</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="number">100000000</span>;i++) &#123;</span><br><span class="line">    sum+=i</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.发消息给主线程</span></span><br><span class="line">self.<span class="title function_">postMessage</span>(&#123;<span class="attr">sum</span>:sum&#125;)</span><br></pre></td></tr></table></figure><h4 id="service-worker介绍"><a href="#service-worker介绍" class="headerlink" title="service worker介绍"></a>service worker介绍</h4><p>web worker是临时的，每次做的事情无法持久存储下来</p><p>而service worker则是不一样的，一旦被创建（install），就会永远存在，除非手动删除（unregister），且用到时可以直接唤醒，不用的时候自动睡眠。</p><p>同时它还可以通过代码拦截请求与响应，缓存文件（他会决定你是读缓存还是读取服务器，并且能够将读取服务器的数据缓存一份在CacheStorage中），因此你网页离线了，就会读取缓存。</p><p>离线内容也能操作，就是你要缓存哪些，不缓存哪些</p><p>必须在https环境下才能工作</p><p>异步实现，内部大部分都是通过promise实现</p><h4 id="service-worker的使用"><a href="#service-worker的使用" class="headerlink" title="service worker的使用"></a>service worker的使用</h4><p>1.在window.onload中注册service worker，防止与其他资源竞争，即在网页加载完成以后再去注册sevice worker<br>2.navigator对象内置了serviceWorker属性<br>3.service worker在老版本的浏览器不支持，需要兼容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;&#125;</span><br></pre></td></tr></table></figure><p>4.注册service worker ：**navigator.serviceWorker.register(‘.&#x2F;sw.js’)**，返回一个promise对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.在网页加载完成以后再去注册sevice worker</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//2.检测是否兼容</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">        <span class="comment">//3.调用方法，并且创建sw.js文件</span></span><br><span class="line">        navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;./sw.js&#x27;</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(err)&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.操作sw.js文件</p><h5 id="service-worker生命周期事件"><a href="#service-worker生命周期事件" class="headerlink" title="service worker生命周期事件"></a>service worker生命周期事件</h5><p>1.install事件会在service worker注册成功时触发，主要用于缓存<br>2.activate事件会在service worker激活时触发，主要用于删除旧的资源<br>3.fetch事件会在发送请求的时候触发，主要操作缓存或者读取网络资源</p><p>注意：<br>1.如果sw.js文件发生了改变，install事件会被重新触发,其余的时候都不会再触发<br>2.activate事件会在install事件后触发，但如果发现已经存在service worker，那么就处于等待状态，直到当前的service worker终止，才会再次调用<br>3.可以通过**self.skipWaiting()<strong>方法跳过等待，返回一个promise对象<br>4.可以通过</strong>event.waitUntil()<strong>方法扩的参数是一个promise对象，会在promise结束后才会结束当前生命周期函数，防止浏览器在异步操作之前就停止了生命周期<br>5.service worker激活后，会在下一次刷新页面的时候才会生效，可以通过</strong>self.clients.claim()**立即获取控制权</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//self 关键字表示当前的 Service Worker 实例</span></span><br><span class="line">self.<span class="title function_">addEventListenter</span>(<span class="string">&#x27;install&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    <span class="comment">//让service worker跳过等待，直接进入activate</span></span><br><span class="line">    <span class="comment">//让skipWaiting这个异步结束以后，才进入activate</span></span><br><span class="line">    event.<span class="title function_">waitUntil</span>(self.<span class="title function_">skipWaiting</span>())</span><br><span class="line">&#125;)</span><br><span class="line">self.<span class="title function_">addEventListenter</span>(<span class="string">&#x27;activate&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">    <span class="comment">//表示service worker激活后，立即获取控制权</span></span><br><span class="line">    <span class="comment">//让self.clients.claim()这个异步结束以后，才进入fetch</span></span><br><span class="line">    event.<span class="title function_">waitUntil</span>(self.<span class="property">clients</span>.<span class="title function_">claim</span>())</span><br><span class="line">&#125;)</span><br><span class="line">self.<span class="title function_">addEventListenter</span>(<span class="string">&#x27;fetch&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="fetch-api"><a href="#fetch-api" class="headerlink" title="fetch api"></a>fetch api</h4><p>1.它是js提供的一个网络请求接口，用于访问与操作http管道部分，例如请求与响应，他是基于promise实现的<br>2.fetch(url,config)用于发送http请求，返回一个包含结果的promise<br>3.response(返回的数据)是二进制数据流，需要调用json()方法转换成json数据<br>4.config常见参数：</p><ol><li>body：用于设置请求体</li><li>headers：请求头</li><li>method：请求方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于window对象上有fetch属性</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;请求路径&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//res请求得到的响应内容是二进制的流</span></span><br><span class="line">    <span class="comment">//调用res.json()方法，可以把数据变成json格式</span></span><br><span class="line">    <span class="comment">//它返回的是一个promise</span></span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//data则是你需要的数据</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="cache-storage"><a href="#cache-storage" class="headerlink" title="cache storage"></a>cache storage</h3><p>1.cacheStorage接口表示Cache对象的存储。配合service worker来实现资源的缓存</p><p>2.caches api类似于数据库的操作：<br>**caches.open(cacheName).then(function(cache）{这里拿到cache对象})**：用于打开缓存，返回一个匹配cacheName的cache对象的promise，类似于连接数据库</p><p>caches.keys()：返回一个promise对象，包括所有的缓存的key（数据库名）</p><p>caches.delete(key)：根据key，删除对应缓存</p><p>3.cache对象常用方法</p><p>cache接口为缓存的request&#x2F;response对象对提供存储机制</p><p>cache put(req,res)：把请求当作key，并且对应的响应存储起来</p><p>cache add(url) ：根据url发送请求，并且把响应存储起来</p><p>cache addAll(urls)：抓取url数组，并且把他们存储起来</p><p>catch math(req)：获取req对应的response</p><h3 id="完整版"><a href="#完整版" class="headerlink" title="完整版"></a>完整版</h3><p>某个js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.在网页加载完成以后再去注册sevice worker</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>,<span class="keyword">async</span> ()=&gt;&#123;</span><br><span class="line">    <span class="comment">//2.检测是否兼容</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">        <span class="comment">//3.调用方法，并且创建sw.js文件</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> registration = navigator.<span class="property">serviceWorker</span>.<span class="title function_">register</span>(<span class="string">&#x27;./sw.js&#x27;</span>)</span><br><span class="line">        &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;注册失败&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//页面一进来，看用户是否有网络，没有则给用户一个通知</span></span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">Notification</span> .<span class="property">permission</span> === <span class="string">&#x27;default&#x27;</span>) &#123;</span><br><span class="line">    <span class="title class_">Notification</span>.<span class="title function_">requestPremission</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!navigator.<span class="property">onLine</span>) &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Notification</span>(<span class="string">&#x27;提示&#x27;</span>,&#123;<span class="attr">body</span>:<span class="string">&#x27;你当前没有网络，你访问的是缓存&#x27;</span>&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果有网络</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;online&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">Notification</span>(<span class="string">&#x27;提示&#x27;</span>,&#123;<span class="attr">body</span>:<span class="string">&#x27;你已连上网络，你访问的是最新数据&#x27;</span>&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>sw.js文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//self 关键字表示当前的 Service Worker 实例</span></span><br><span class="line"><span class="comment">//主要缓存内容</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">CACHE_NAME</span> = <span class="string">&quot;cache_v1&quot;</span></span><br><span class="line">self.<span class="title function_">addEventListenter</span>(<span class="string">&#x27;install&#x27;</span>,<span class="keyword">async</span> e=&gt;&#123;</span><br><span class="line">    <span class="comment">//#1 开启一个cache，得到一个cache对象</span></span><br><span class="line">    cosnt cache = <span class="keyword">await</span> caches.<span class="title function_">open</span>(<span class="variable constant_">CACHE_NAME</span>)</span><br><span class="line">    <span class="comment">//#2 拿到cache对象之后，调用addAll(),将数据存储起来</span></span><br><span class="line">    <span class="comment">//等待cache把所有资源存起来</span></span><br><span class="line">    <span class="keyword">await</span> cache.<span class="title function_">addAll</span>([</span><br><span class="line">        <span class="string">&#x27;/&#x27;</span>,   <span class="comment">// &#x27;/index.html&#x27;主页，只需要写一个/即可</span></span><br><span class="line">        <span class="string">&#x27;/images/logo.png&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;/mainfest.json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;/index.css&#x27;</span></span><br><span class="line">    ])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> self.<span class="title function_">skipWaiting</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//让service worker跳过等待，直接进入activate</span></span><br><span class="line">    <span class="comment">//让skipWaiting这个异步结束以后，才进入activate</span></span><br><span class="line">    <span class="comment">//event.waitUntil(self.skipWaiting())</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//主要清除旧的资源</span></span><br><span class="line">self.<span class="title function_">addEventListenter</span>(<span class="string">&#x27;activate&#x27;</span>,<span class="keyword">async</span> e=&gt;&#123;</span><br><span class="line">    <span class="comment">//#1 获取所有资源的key</span></span><br><span class="line">    cosnt keys = <span class="keyword">await</span> caches.<span class="title function_">keys</span>()</span><br><span class="line">    keys.<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(keys!==<span class="variable constant_">CACHE_NAME</span>) &#123;</span><br><span class="line">        caches.<span class="title function_">delete</span>(key)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">await</span> self.<span class="property">clients</span>.<span class="title function_">claim</span>()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表示service worker激活后，立即获取控制权</span></span><br><span class="line">    <span class="comment">//让self.clients.claim()这个异步结束以后，才进入fetch</span></span><br><span class="line">    <span class="comment">//event.waitUntil(self.clients.claim())</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在请求发送时触发</span></span><br><span class="line"><span class="comment">//判断资源是否能够请求成功，如果能够请求成功，就响应成功的结果，如果请求失败了，则去读取缓存</span></span><br><span class="line">self.<span class="title function_">addEventListenter</span>(<span class="string">&#x27;fetch&#x27;</span>,<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">//请求对象</span></span><br><span class="line">    <span class="keyword">const</span> req = event.<span class="property">request</span></span><br><span class="line">    <span class="comment">//给浏览器响应</span></span><br><span class="line">    event.<span class="title function_">respondWith</span>(<span class="title function_">fn1</span>(req))</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//网络优先</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params">req</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//成功，则网络读取资源</span></span><br><span class="line">       cosnt fresh = <span class="keyword">await</span> <span class="title function_">fetch</span>(req)</span><br><span class="line">        <span class="keyword">return</span> fresh</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="comment">//失败则去读缓存</span></span><br><span class="line">        <span class="keyword">const</span> cache = <span class="keyword">await</span> caches.<span class="title function_">open</span>(<span class="variable constant_">CACHE_NAME</span>)</span><br><span class="line">        <span class="comment">//缓存的内容</span></span><br><span class="line">        <span class="keyword">const</span> cached = <span class="keyword">await</span> cache.<span class="title function_">match</span>(req)</span><br><span class="line">        <span class="keyword">return</span> cached</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 缓存优先</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Notification-api"><a href="#Notification-api" class="headerlink" title="Notification api"></a>Notification api</h4><p>Notification api的通知接口用于向用户配置和显示桌面通知</p><p>Notification .permission可以获取当前用户的授权情况<br>    Default：默认的，未授权<br>    Denied：拒绝的。如果拒绝，则无法再次请求授权，也无法获取弹框提醒<br>    Granted：授权的，可以弹窗提醒</p><p>通过Notification.requestPremission()可以请求用户授权</p><p>通过new Notification(‘title’,{body:’ ‘,icon:’ ‘})可以显示通知</p><p>在授权通过的情况下，可以在service worker中显示通知self.registration.showNotification({‘你好’，{body:’msg})</p><p>如何在vue cli 配置，打包出来的 public，自动引入某个文件？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CopyWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CopyWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="attr">patterns</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">from</span>: <span class="string">&#x27;path/to/your/file&#x27;</span>,</span><br><span class="line">            <span class="attr">to</span>: <span class="string">&#x27;path/in/public/directory&#x27;</span>,</span><br><span class="line">            <span class="attr">toType</span>: <span class="string">&#x27;dir&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>将 <code>path/to/your/file</code> 替换为要自动复制到public目录的文件路径，将 <code>path/in/public/directory</code> 替换为在public目录中要存储文件的路径。</p><p>注意：<code>CopyWebpackPlugin</code> 是一个Webpack插件</p>]]></content>
      
      
      <categories>
          
          <category> Web前端扩展 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web前端扩展 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pinia</title>
      <link href="/star/2023/0720513.html"/>
      <url>/star/2023/0720513.html</url>
      
        <content type="html"><![CDATA[<h1 id="Pinia在Vue3的使用"><a href="#Pinia在Vue3的使用" class="headerlink" title="Pinia在Vue3的使用"></a>Pinia在Vue3的使用</h1><p>本篇文章主要是总结Pinia在Vue3的使用</p><span id="more"></span><h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><p>1.安装pinia    <code>npm i pinia</code></p><p>2.在main.js中按需导入<code>createPinia</code>，创建pinia，使用<code>pinia</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">// #1</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">// #2</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="comment">// #3</span></span><br><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>).<span class="title function_">use</span>(pinia).<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3.创建仓库与使用</p><p>创建store文件夹，创建一个ts文件</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; computed, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineStore</span>(<span class="string">&#x27;仓库名字&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// state</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">100</span>)</span><br><span class="line">  <span class="comment">// getters</span></span><br><span class="line">  <span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line">  <span class="comment">// mutation</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">update</span> = (<span class="params"></span>) =&gt; count.<span class="property">value</span>++</span><br><span class="line">  <span class="comment">//action</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">asyncUpdate</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      count.<span class="property">value</span>++</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123; count, doubleCount, update, asyncUpdate &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.使用数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pinia名 <span class="keyword">from</span> <span class="string">&#x27;./stores/pinia路径&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">const</span> &#123; count, sum &#125; = <span class="title function_">storeToRefs</span>(<span class="title function_">ok</span>())</span><br><span class="line"><span class="keyword">const</span> &#123; doClick, doClickSync &#125; = <span class="title function_">ok</span>()</span><br></pre></td></tr></table></figure><p><code>storeToRefs将pinia中的数据绑定成响应式</code></p><p><code>方法不需要进行绑定成响应式</code></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th align="center">Vuex</th><th align="center">Pinia</th></tr></thead><tbody><tr><td align="center">state</td><td align="center">ref和reactive创建的响应式数据</td></tr><tr><td align="center">getters</td><td align="center">computed创建的计算属性</td></tr><tr><td align="center">mutations和actions</td><td align="center">普通函数，同步异步均可</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3配合TypeScript的使用</title>
      <link href="/star/2023/0720512.html"/>
      <url>/star/2023/0720512.html</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3配合TypeScript的使用"><a href="#Vue3配合TypeScript的使用" class="headerlink" title="Vue3配合TypeScript的使用"></a>Vue3配合TypeScript的使用</h1><p>这篇文章主要总结了Vue3如何配合TypeScript使用</p><span id="more"></span><h2 id="一-defineProps-泛型函数"><a href="#一-defineProps-泛型函数" class="headerlink" title="一.defineProps&lt;&gt;() 泛型函数"></a>一.defineProps&lt;&gt;() 泛型函数</h2><h3 id="1-defineProps-泛型函数接收值"><a href="#1-defineProps-泛型函数接收值" class="headerlink" title="1.defineProps&lt;&gt;()泛型函数接收值"></a>1.defineProps&lt;&gt;()泛型函数接收值</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defineProps &lt; &#123;</span><br><span class="line">        <span class="attr">money</span>: <span class="built_in">number</span></span><br><span class="line">        car ? : <span class="built_in">string</span></span><br><span class="line">    &#125; &gt; ()</span><br></pre></td></tr></table></figure><h3 id="2-使用withDefaults指定默认值"><a href="#2-使用withDefaults指定默认值" class="headerlink" title="2.使用withDefaults指定默认值"></a>2.使用withDefaults指定默认值</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> props = <span class="title function_">withDefaults</span>(defineProps &lt; &#123;</span><br><span class="line">       <span class="attr">money</span>: <span class="built_in">number</span></span><br><span class="line">       car ? : <span class="built_in">string</span></span><br><span class="line">   &#125; &gt; (), &#123;</span><br><span class="line">       <span class="attr">car</span>: <span class="string">&#x27;小黄车&#x27;</span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><h3 id="3-使用解构-defineProps响应式语法糖"><a href="#3-使用解构-defineProps响应式语法糖" class="headerlink" title="3.使用解构+defineProps响应式语法糖"></a>3.使用解构+defineProps响应式语法糖</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">      money,</span><br><span class="line">      car = <span class="string">&#x27;小黄车&#x27;</span></span><br><span class="line">  &#125; = defineProps &lt; &#123;</span><br><span class="line">      <span class="attr">money</span>: <span class="built_in">number</span></span><br><span class="line">      car ? : <span class="built_in">string</span></span><br><span class="line">  &#125; &gt; ()</span><br></pre></td></tr></table></figure><p>该写法需要在vite.config.js中添加以下配置</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">    defineConfig</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vitejs.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="title function_">vue</span>(&#123;</span><br><span class="line">            <span class="attr">reactivityTransform</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;),</span><br><span class="line">    ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="二-defineEmits-泛型函数"><a href="#二-defineEmits-泛型函数" class="headerlink" title="二.defineEmits&lt;&gt;() 泛型函数"></a>二.defineEmits&lt;&gt;() 泛型函数</h2><p>对于子传父时，在子组件中的传递数据时，数据类型检测的校验</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//e表示事件类型</span></span><br><span class="line"><span class="keyword">const</span> emit = defineEmits&lt;&#123;</span><br><span class="line">    (<span class="attr">e</span>:<span class="string">&#x27;自定义的事件名&#x27;</span>,传播数据名:传播数据类型):<span class="built_in">void</span></span><br><span class="line">&#125;&gt;()</span><br></pre></td></tr></table></figure><h2 id="三-ref-数据-泛型函数"><a href="#三-ref-数据-泛型函数" class="headerlink" title="三.ref&lt;数据类型&gt;(数据)   泛型函数"></a>三.ref&lt;数据类型&gt;(数据)   泛型函数</h2><p>指定ref中的数据类型</p><p>方式1：ref是一个内置的泛型函数，通过泛型函数指定数据类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line">cosnt m = ref&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>方式2：通过Vue内置的泛型工具可以指定初始值的类型  <code>Ref</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;<span class="title class_">Ref</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">m</span>:<span class="title class_">Ref</span>&lt;<span class="built_in">number</span>&gt; = <span class="title function_">ref</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="四-reactive-数据-泛型函数"><a href="#四-reactive-数据-泛型函数" class="headerlink" title="四.reactive&lt;数据类型&gt;(数据)  泛型函数"></a>四.reactive&lt;数据类型&gt;(数据)  泛型函数</h2><p><code>（之前怎么用，现在就怎么用）</code></p><h2 id="五-computed-数据-泛型函数"><a href="#五-computed-数据-泛型函数" class="headerlink" title="五.computed&lt;数据类型&gt;(数据)  泛型函数"></a>五.computed&lt;数据类型&gt;(数据)  泛型函数</h2><p><code>（之前怎么用，现在就怎么用）</code></p><h2 id="六-如何获取事件对象e的类型"><a href="#六-如何获取事件对象e的类型" class="headerlink" title="六.如何获取事件对象e的类型"></a>六.如何获取事件对象<code>e</code>的类型</h2><p>通过<code>&lt;h1 @mousemove=&quot;e =&gt; hh&quot;&gt;获取面板位置&lt;/h1&gt;</code>的形式拿到<code>e</code>的事件类型</p><p>再通过<code>e: MouseEvent</code>指定他的类型</p><h2 id="七-ref-操作-DOM"><a href="#七-ref-操作-DOM" class="headerlink" title="七.ref 操作 DOM"></a>七.ref 操作 DOM</h2><p><code>!  非空断言，会排除掉undefined和null   </code></p><p><code>?  可选链接，表示前面不为undefined或null时，才会向后面取值</code></p><p><code>如何获取DOM类型？</code>  <strong>一定是原生标签</strong><br>例如：<code>const o = document.querySelector(&#39;img&#39;)</code>，这样能查看img类型</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;img src=&quot;https://pinia.vuejs.org/logo.svg&quot; ref=&quot;imgRef&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">const imgRef = ref&lt;HTMLImageElement | null&gt;(null)</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  console.log(imgRef.value?.src)</span><br><span class="line">&#125;),</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="八-ref-操作组件"><a href="#八-ref-操作组件" class="headerlink" title="八.ref 操作组件"></a>八.ref 操作组件</h2><p><code>如何获取组件类型？</code>  一定是组件标签，不能使用在原生标签</p><p><code>InstanceType</code>是vue3内置的泛型工具   首字母大写</p><p>语法：<code>InstanceType&lt;typeof Children&gt;</code></p><p>例如：<code>const childCmp = ref&lt;InstanceType&lt;typeof Children&gt; | null&gt;(null)</code></p><p><code>示例：</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>App<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handleClick&quot;</span>&gt;</span>click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Children</span> <span class="attr">ref</span>=<span class="string">&quot;childCmp&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">import Children from &#x27;./Children.vue&#x27;;</span><br><span class="line"></span><br><span class="line">const childCmp = ref&lt;InstanceType&lt;typeof Children&gt; | null&gt;(null)</span><br><span class="line"></span><br><span class="line">const handleClick = () =&gt; &#123;</span><br><span class="line">  childCmp.value?.log();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="九-！和-？"><a href="#九-！和-？" class="headerlink" title="九. ！和 ？"></a>九. ！和 ？</h2><p><code>！和 ？</code>取值的时候，一般可以通用</p><p><code>！和 ？</code>赋值的时候，一般用<code>!</code></p><h2 id="十-TS-类型声明文件"><a href="#十-TS-类型声明文件" class="headerlink" title="十.TS 类型声明文件"></a>十.TS 类型声明文件</h2><p><code>.ts</code> 文件。</p><ul><li>既包含类型信息又可执行代码，可以被编译为 <code>.js</code> 文件，然后，执行代码。</li><li>用途：编写程序代码的地方。</li></ul><p><code>.d.ts</code> 文件。</p><ul><li><code>只包含类型信息</code>的类型声明文件，专门为 JS 提供类型信息。</li><li>类型声明文件不会生成 <code>.js</code> 文件，仅用于提供类型信息，在 <code>.d.ts</code> 文件中不允许出现可执行的 JS 代码，只用于提供类型。</li></ul><p>总结：.ts 是 <code>implementation</code> （代码实现文件）； <code>.d.ts</code> 是 declaration（类型声明文件），如果要为已有的 JS 库提供类型信息，可以使用 <code>.d.ts</code> 文件。</p><h3 id="自定义的类型声明"><a href="#自定义的类型声明" class="headerlink" title="自定义的类型声明"></a>自定义的类型声明</h3><p> <strong>如果多个 Vue 文件中都用到同一个类型，此时可以创建 <code>.d.ts</code> 文件提供该类型，实现类型共享。</strong></p><p>1.创建 <code>src/types/data.d.ts</code> 类型声明文件。</p><p>2.创建需要共享的类型，并使用 export 导出（TS 中的类型也可以使用 import&#x2F;export 实现模块化功能）。</p><p>3.在需要使用共享类型的 Vue 文件中，通过 import 导入即可（<code>.d.ts</code> 后缀导入时，直接省略）。</p><p><strong>如何为已有 JS 文件提供类型声明？</strong></p><p>说明：TS 项目中也可以使用 <code>.js</code> 文件，在导入 <code>.js</code> 文件时，TS 会自动加载与 <code>.js</code> 同名的 <code>.d.ts</code> 文件，以提供类型声明。</p><p><code>declare</code> 关键字，用于类型声明，为 <code>.js</code> 文件中已存在的变量声明类型，而不是创建一个新的变量。</p><p>1.对于 type、interface 等这些明确就是 TS 类型的（只能在 TS 中使用的），可以省略 <code>declare </code>关键字。</p><p>2.对于 let、function 等具有双重含义（在 JS、TS 中都能用），应该使用 declare，明确指定此处是类型声明。</p><h2 id="十一-Axios-配合TS"><a href="#十一-Axios-配合TS" class="headerlink" title="十一. Axios 配合TS"></a>十一. Axios 配合TS</h2><p>语法：<code>axios.get&lt;类型&lt;&#123;数据：类型&#125;&gt;()</code></p><p>axios.get 的第一个泛型参数可以控制res.data的类型</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript</title>
      <link href="/star/2023/0720511.html"/>
      <url>/star/2023/0720511.html</url>
      
        <content type="html"><![CDATA[<h1 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h1><p>这篇文章主要总结了TypeScript</p><span id="more"></span><h2 id="一-TypeScript-概述"><a href="#一-TypeScript-概述" class="headerlink" title="一.TypeScript 概述"></a>一.<code>TypeScript</code> 概述</h2><p><strong>是什么？</strong>：<code>TS</code>是微软开发的编程语言，他是<code>JS</code>的超集，可以在任何运行JS的地方运行<br><a href="https://www.typescriptlang.org/">官方文档</a>，<a href="https://www.tslang.cn/">中文文档</a></p><p><code>TypeScript</code> &#x3D; <code>Type</code> + <code>JavaScript</code>（在 <code>JS </code>基础之上，为 <code>JS </code>添加了类型支持&#x2F;类型检测）</p><h3 id="1-优势："><a href="#1-优势：" class="headerlink" title="1.优势："></a>1.优势：</h3><p><strong>背景：</strong><br><code>JS</code>是弱类型语言，而在代码中很多错误都是类型错误,他不像其他强类型语言一样有类型检测，比如<code>JAVA</code>,因此出现了<code>TS</code></p><p>1.发现错误的时机更早，即TS在编译时，即代码执行前就会出现类型检测</p><p>2.代码提示，<code>JS</code>代码没有代码提示，需要插件才能支持代码提示</p><p>3.支持最新的<code>ECMAScript语法</code></p><p>4.<code>Vue3</code>源码使用TS重写，React 也与 TS 完美配合</p><h3 id="2-安装并编译TS"><a href="#2-安装并编译TS" class="headerlink" title="2.安装并编译TS"></a>2.安装并编译<code>TS</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.安装命令：npm i -g typescript 或者 yarn global add typescript</span><br><span class="line">2.验证是否安装成功：tsc –v（查看 TypeScript 的版本）</span><br><span class="line"></span><br><span class="line">3.创建 hello.ts 文件（注意：TS 文件的后缀名为 .ts）。</span><br><span class="line">4.将 TS 编译为 JS：在终端中输入命令，tsc hello.ts（此时，在同级目录中会出现一个同名的 JS 文件）。</span><br><span class="line">5.执行 JS 代码：在终端中输入命令，node hello.js。</span><br><span class="line"></span><br><span class="line">说明：所有合法的 JS 代码都是 TS 代码，有 JS 基础只需要学习 TS 的类型即可。</span><br><span class="line">注意：由 TS 编译生成的是 JS 文件，生成的代码中就没有类型相关的信息了。</span><br></pre></td></tr></table></figure><h3 id="3-创建Vue-TS项目"><a href="#3-创建Vue-TS项目" class="headerlink" title="3.创建Vue TS项目"></a>3.<code>创建Vue TS项目</code></h3><p>在基于 Vite 的项目中可以直接验证 TS 代码结果，因为已经配置好了 TS 环境。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># npm 6.x</span><br><span class="line">npm create vite@latest my-vue-ts-app --template vue-ts</span><br><span class="line"></span><br><span class="line"># npm 7+, extra double-dash is needed:</span><br><span class="line">npm create vite@latest my-vue-ts-app -- --template vue-ts</span><br><span class="line"></span><br><span class="line"># yarn</span><br><span class="line">yarn create vite my-vue-ts-app --template vue-ts</span><br><span class="line"></span><br><span class="line"># pnpm</span><br><span class="line">pnpm create vite my-vue-ts-app --template vue-ts</span><br></pre></td></tr></table></figure><h2 id="二-TS基础"><a href="#二-TS基础" class="headerlink" title="二.TS基础"></a>二.TS基础</h2><h3 id="1-原始类型"><a href="#1-原始类型" class="headerlink" title="1.原始类型"></a>1.原始类型</h3><p>语法：<code>const 变量名：数据类型 = 与数据类型匹配的值</code></p><p><code>与数据类型匹配的值</code>的意思时，比如数据类型写的数字，那么你的值必须写数字</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">num</span>: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toFixed</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">str</span>: <span class="built_in">string</span> = <span class="string">&#x27;龚贤龙&#x27;</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">b</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//const big:bigint = 888888888888888n</span></span><br><span class="line"><span class="comment">//console.log(big)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sym</span>: <span class="built_in">symbol</span> = <span class="title class_">Symbol</span>()</span><br></pre></td></tr></table></figure><h3 id="2-数组类型"><a href="#2-数组类型" class="headerlink" title="2.数组类型"></a>2.数组类型</h3><p>语法1：<code>const 变量名: Array&lt;number&gt; = [ 1, 2, 3 ]</code></p><p>语法2：<code>const 变量名: number[] = [ 1, 2, 3, 4 ]</code></p><p><code>这两句代码表示该变量现在为数字组成的数组</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">list1</span>: <span class="built_in">number</span>[] = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span> ]</span><br></pre></td></tr></table></figure><h3 id="3-联合类型"><a href="#3-联合类型" class="headerlink" title="3.联合类型"></a>3.联合类型</h3><p>语法：<code>const 变量名: (number | string)[] = [ 1, 2, &#39;3&#39;, &#39;4&#39; ]</code></p><p><code>这句代码表示该变量限制类型为数字和字符串组成的数组</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: (<span class="built_in">number</span> | <span class="built_in">string</span>)[] = [ <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span> ]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr1</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span> | <span class="built_in">string</span>&gt; = [ <span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span> ]</span><br></pre></td></tr></table></figure><h3 id="4-类型别名"><a href="#4-类型别名" class="headerlink" title="4.类型别名"></a>4.类型别名</h3><p>语法：<code>type 类型别名 = 数据类型</code><br>let 变量名 ：类型别名 &#x3D; 数据</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> uname = <span class="title class_">String</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">zname</span>: uname = <span class="string">&#x27;龚贤龙&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> arr2 = (<span class="built_in">number</span> | <span class="built_in">string</span>)[]</span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr3</span>: arr2 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;gh&#x27;</span>, <span class="string">&#x27;sf&#x27;</span> ]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span><br></pre></td></tr></table></figure><h3 id="5-函数类型"><a href="#5-函数类型" class="headerlink" title="5.函数类型"></a>5.函数类型</h3><p><code>函数如果不指定返回值，默认void类型</code><br><code>主要是分别指定参数与返回值的类型</code></p><h4 id="方式1"><a href="#方式1" class="headerlink" title="方式1"></a>方式1</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通函数声明</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>): <span class="built_in">number</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum</span>(<span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数表达式</span></span><br><span class="line"><span class="keyword">const</span> sum1 = (<span class="attr">num1</span>: <span class="built_in">number</span>, <span class="attr">num2</span>: <span class="built_in">number</span>): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum1</span>(<span class="number">1</span>, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h4><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同时指定参数与返回值，只适用于函数表达式</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">TFn</span> = <span class="function">(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">sum3</span>: <span class="title class_">TFn</span> = <span class="function">(<span class="params">num1, num2</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sum3</span>(<span class="number">5</span>, <span class="number">8</span>)</span><br></pre></td></tr></table></figure><h3 id="6-void类型"><a href="#6-void类型" class="headerlink" title="6.void类型"></a>6.void类型</h3><p>作用：<code>当一个函数没有给他的返回值指定类型时，它默认是void类型</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ok</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="7-可选参数"><a href="#7-可选参数" class="headerlink" title="7. ? 可选参数"></a>7. ? 可选参数</h3><p>注意1：<code>可选参数必须放在必选参数后面</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">slice</span>(<span class="params">start?: <span class="built_in">number</span>, end?: <span class="built_in">number</span></span>): <span class="built_in">any</span>[] &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start, end)</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">slice</span>()</span><br><span class="line"><span class="title function_">slice</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">slice</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>注意2：<code>数组默认参数 不能和可选参数一起使用</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">slice1</span>(<span class="params">start: <span class="built_in">number</span> = <span class="number">10</span>, end?: <span class="built_in">number</span></span>): <span class="built_in">any</span>[] &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(start, end)</span><br><span class="line"><span class="keyword">return</span> []</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">slice1</span>()</span><br><span class="line"><span class="title function_">slice1</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">slice1</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="8-对象类型指明参数类型"><a href="#8-对象类型指明参数类型" class="headerlink" title="8.对象类型指明参数类型"></a>8.对象类型指明参数类型</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;龚贤龙&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">29</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>或者</strong></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> o = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;龚贤龙&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">29</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">obj</span>: &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span> &#125; = o </span><br></pre></td></tr></table></figure><h3 id="9-interface接口与extends继承"><a href="#9-interface接口与extends继承" class="headerlink" title="9.interface接口与extends继承"></a>9.interface接口与extends继承</h3><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point2D</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">    <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用 `extends`（继承）关键字实现了接口 Point3D 继承 Point2D</span></span><br><span class="line"><span class="comment">// 继承后，Point3D 就有了 Point2D 的所有属性和方法（此时，Point3D 同时有 x、y、z 三个属性）</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Point3D</span> <span class="keyword">extends</span> <span class="title class_">Point2D</span> &#123;</span><br><span class="line">    <span class="attr">z</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10-interface与type"><a href="#10-interface与type" class="headerlink" title="10.interface与type"></a>10.interface与type</h3><p><strong>相同点：</strong><br>1.都可以描述对象和函数<br>2.都可以进行类型扩展，但语法不一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//interface用的extends</span></span><br><span class="line"><span class="comment">//type用的&amp;符号，形成的叫交叉类型</span></span><br></pre></td></tr></table></figure><p><strong>不同点：</strong><br>1.<code>type</code>可以描述任意类型，interface做不到<br>2.相同的interface会合并，相同的type会报错</p><p><strong>总结</strong><br>一般用于<code>interface</code>描述对象，用<code>type</code>来描述类型之间的关系</p><h3 id="11-字面量类型"><a href="#11-字面量类型" class="headerlink" title="11.字面量类型"></a>11.字面量类型</h3><p>字面量类型往往配合联合类型一起使用</p><p>使用场景：用来表示一组明确的可选值列表，比如在贪吃蛇游戏中，游戏方向的值只能是上、下、左、右中的一个。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Direction</span> = <span class="string">&#x27;up&#x27;</span> | <span class="string">&#x27;down&#x27;</span> | <span class="string">&#x27;left&#x27;</span> | <span class="string">&#x27;right&#x27;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">changeDirection</span>(<span class="params">direction: Direction</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(direction)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">changeDirection</span>(<span class="string">&#x27;up&#x27;</span>) <span class="comment">// 调用函数时，会有类型提示</span></span><br></pre></td></tr></table></figure><p>解释：参数<code>direction</code>的值只能是 <code>up/down/left/right </code>中的任意一个。</p><p>优势：<strong>相比于 string 类型，使用字面量类型更加精确、严谨</strong>。</p><h3 id="12-类型断言-as"><a href="#12-类型断言-as" class="headerlink" title="12.类型断言   as"></a>12.类型断言   <code>as</code></h3><p>往往把一个宽泛的类型断言为一个更加具体的类型，为使用这个更加具体的属性和方法</p><p>语法1：<code>const oLink = document.getElementById(&#39;link&#39;) as HTMLAnchorElement</code></p><p>语法2：<code>const oLink = &lt;HTMLAnchorElement&gt;document.getElementById(&#39;link&#39;)</code></p><p>第二种语法了解即可</p><h3 id="13-特殊类型-any-unknown-never"><a href="#13-特殊类型-any-unknown-never" class="headerlink" title="13.特殊类型    any/unknown/never"></a>13.特殊类型    <code>any/unknown/never</code></h3><p>1.<code>unknown</code>是更加安全的<code>any</code>类型（有一些可能导致程序的报错的操作会提示出来）</p><p>2.任何类型都可以给any，<code>any</code>也可以给任何类型</p><p>3.任何类型都可以给<code>unknown</code>，<code>unknown</code>只能给<code>unknown</code>和<code>any</code></p><p>4.<code>unknown</code>一般配合类型收窄一起使用（<code>typeof</code> 可以类型收窄，as断言可以类型收窄）</p><p>5.<code>never</code>不可能实现的类型</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Test</span> = <span class="built_in">number</span> &amp; <span class="built_in">string</span></span><br><span class="line"><span class="comment">// 也可以当做函数的返回值，表示不会执行到头</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Error&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-TS泛型"><a href="#三-TS泛型" class="headerlink" title="三.TS泛型"></a>三.TS泛型</h2><h3 id="1-泛型别名"><a href="#1-泛型别名" class="headerlink" title="1.泛型别名"></a>1.泛型别名</h3><p>定义类型别名后，加上 <code>&lt;类型参数&gt;</code> 就是泛型别名语法，使用的时候传入具体的类型即可，然后类型别名内就可以使用这个类型参数。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对后台返回的数据进行类型定义</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">User</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Goods</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">goodsName</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Data</span>&lt;T&gt; = &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">code</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">data</span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类型</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">UserData</span> = <span class="title class_">Data</span>&lt;<span class="title class_">User</span>&gt;   <span class="comment">//把user作为参数传递给T</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GoodsData</span> = <span class="title class_">Data</span>&lt;<span class="title class_">Goods</span>&gt;   <span class="comment">//把goods作为参数传递给T</span></span><br></pre></td></tr></table></figure><h3 id="2-泛型接口"><a href="#2-泛型接口" class="headerlink" title="2.泛型接口"></a>2.泛型接口</h3><p>接口也可以配合泛型来使用，以增加其灵活性，增强其复用性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">User</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="attr">name</span>: T</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">user</span>: <span class="title class_">User</span>&lt;<span class="built_in">string</span>&gt; = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;ifer&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组泛型接口的实现</span></span><br><span class="line"><span class="comment">// 这其实也是通过泛型接口的形式来定义的数组类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 模拟实现</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">IArray</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">// 索引签名</span></span><br><span class="line">    <span class="comment">// 只要是 number 类型的键都可以出现在数组中，或者说数组中可以有任意多个元素</span></span><br><span class="line">    <span class="comment">// 同时也符合数组索引是 number 类型这一前提</span></span><br><span class="line">    [<span class="attr">key</span>: <span class="built_in">number</span>]: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">arr</span>: <span class="title class_">IArray</span>&lt;<span class="built_in">string</span>&gt; = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="3-泛型函数"><a href="#3-泛型函数" class="headerlink" title="3.泛型函数"></a>3.泛型函数</h3><p>定义时宽泛、不确定的类型，需要使用者去主动传入</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> id&lt;<span class="title class_">Type</span>&gt;(<span class="attr">value</span>: <span class="title class_">Type</span>): <span class="title class_">Type</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> num = id&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">const</span> str = id&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"><span class="comment">//就是把&lt;number&gt;传给&lt;type&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//简化</span></span><br><span class="line"><span class="keyword">let</span> num = <span class="title function_">id</span>(<span class="number">10</span>) <span class="comment">// 省略 &lt;number&gt; 调用函数</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="title function_">id</span>(<span class="string">&#x27;a&#x27;</span>) <span class="comment">// 省略 &lt;string&gt; 调用函数</span></span><br></pre></td></tr></table></figure><h3 id="4-泛型工具"><a href="#4-泛型工具" class="headerlink" title="4.泛型工具"></a>4.泛型工具</h3><h4 id="Partial"><a href="#Partial" class="headerlink" title="Partial"></a><code>Partial</code></h4><p>作用：都变为可选，加上？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Props</span>&gt;     <span class="comment">//Partial 可选</span></span><br></pre></td></tr></table></figure><h4 id="Requored"><a href="#Requored" class="headerlink" title="Requored"></a><code>Requored</code></h4><p>作用：都变为必选，去掉？</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">    id?: <span class="built_in">string</span></span><br><span class="line">    children?: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialProps</span> = <span class="title class_">Requored</span>&lt;<span class="title class_">Props</span>&gt;     <span class="comment">//Requored 必选</span></span><br></pre></td></tr></table></figure><h4 id="ReadOnly"><a href="#ReadOnly" class="headerlink" title="ReadOnly"></a><code>ReadOnly</code></h4><p>作用：变为只读</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Props</span> = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ReadonlyProps</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Props</span>&gt;   <span class="comment">//Readonly 只读</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">props</span>: <span class="title class_">ReadonlyProps</span> = &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">children</span>: [] &#125;</span><br><span class="line">props.<span class="property">id</span> = <span class="string">&#x27;2&#x27;</span> </span><br><span class="line"><span class="comment">//此时的props.id = &#x27;2&#x27;是无法将id改为2的，因为设置了只读的泛型工具，只允许你读取，无法修改</span></span><br></pre></td></tr></table></figure><h4 id="Pick"><a href="#Pick" class="headerlink" title="Pick"></a><code>Pick</code></h4><p>作用：选择一组属性构造新类型，过滤掉不使用的属性</p><p>两个变量：1.表示选择谁的属性，2.表示选择哪几个属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Props</span> &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">title</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="attr">children</span>: <span class="built_in">number</span>[]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 摘出 id 和 title</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PickProps</span> = <span class="title class_">Pick</span>&lt;<span class="title class_">Props</span>, <span class="string">&#x27;id&#x27;</span> | <span class="string">&#x27;title&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h4 id="Omit"><a href="#Omit" class="headerlink" title="Omit"></a><code>Omit</code></h4><p>作用：与pick相反，过滤掉选择的属性，使用不选择的属性</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 排除 id 和 title</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">OmitProps</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Props</span>, <span class="string">&#x27;id&#x27;</span> | <span class="string">&#x27;title&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-Cli脚手架</title>
      <link href="/star/2023/072055.html"/>
      <url>/star/2023/072055.html</url>
      
        <content type="html"><![CDATA[<h3 id="Vue-cli脚手架"><a href="#Vue-cli脚手架" class="headerlink" title="Vue-cli脚手架"></a>Vue-cli脚手架</h3><p><code>这篇总结主要介绍Vue-Cli脚手架</code></p><span id="more"></span><p><strong>概念:</strong><br>1.<code>vue-cli </code>:  组件化开发工具，底层基于<code>webpack</code><br>2.脚手架 :  规范的<code>vue</code>项目目录</p><p><code>如何创建一个vue?</code>:<code>vue create 项目名称</code><br><strong>脚手架目录</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">node_modules : 第三方包资源文件</span><br><span class="line">public</span><br><span class="line">favicon.<span class="property">ico</span> : 网站图标</span><br><span class="line">index.<span class="property">html</span> : 网站首页</span><br><span class="line">src</span><br><span class="line"><span class="attr">assets</span>: 静态资源(图片)</span><br><span class="line">logo.<span class="property">png</span></span><br><span class="line"><span class="attr">components</span>: 组件</span><br><span class="line"><span class="title class_">App</span>.<span class="property">vue</span> :  根组件</span><br><span class="line">main.<span class="property">js</span> :  入口文件</span><br><span class="line">.<span class="property">gitignore</span>:  git忽略文件</span><br><span class="line">babel.<span class="property">config</span>.<span class="property">js</span> :  js版本降级</span><br><span class="line">package.<span class="property">json</span> :  依赖包列表+版本</span><br><span class="line"><span class="variable constant_">README</span>.<span class="property">md</span> : 项目说明文件</span><br><span class="line">package-lock.<span class="property">json</span> : 包下载地址</span><br><span class="line">vue.<span class="property">config</span>.<span class="property">js</span> : 项目webpack配置</span><br></pre></td></tr></table></figure><p>​</p><h4 id="1-组件"><a href="#1-组件" class="headerlink" title="1.组件"></a>1.组件</h4><p>是什么 ?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">（1）HTML :  自定义标签</span><br><span class="line">（2）文件 ：  .vue文件</span><br><span class="line">（3）内存 ： vue实例对象</span><br><span class="line">(4) 页面：  盒子</span><br></pre></td></tr></table></figure><p><strong>组件作用</strong> : <code>盒子复用</code></p><p><strong>组件三要素</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTML结构:  &lt;template&gt;</span><br><span class="line">js代码:  &lt;script&gt;</span><br><span class="line">css样式:  &lt;style&gt;</span><br></pre></td></tr></table></figure><h4 id="2-脚手架流程"><a href="#2-脚手架流程" class="headerlink" title="2.脚手架流程"></a>2.脚手架流程</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(0)创建项目： vue create 项目名称</span><br><span class="line">(1)关闭eslint ( 代码规范检查)</span><br><span class="line">   LintOnSave:false</span><br><span class="line">(2)删除欢迎页面</span><br><span class="line">   删除 components/HelloWorld.vue</span><br><span class="line">   清空App.vue代码</span><br><span class="line">(3)运行项目： 根目录  npm run serve</span><br><span class="line">(4)掌握vue调试技巧</span><br><span class="line">   数据  dev tools 工具</span><br><span class="line">   方法 debugger</span><br></pre></td></tr></table></figure><h4 id="3-组件注册"><a href="#3-组件注册" class="headerlink" title="3.组件注册"></a>3.组件注册</h4><p>局部组件：<strong>在哪里导入，只能在哪里使用</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1.导入组件：  import 组件名 from &quot;组件路径&quot;</span><br><span class="line">2. 注册组件:  components : &#123; 组件名 &#125;</span><br><span class="line">3. 使用组件: &lt;子组件&gt;&lt;/子组件&gt;</span><br><span class="line">     全局组件：main.js 导入，任何.vue文件可以用</span><br><span class="line">     1.导入组件 ：  import 组件名 from &quot;组件路径&quot;</span><br><span class="line">     2.注册组件: Vue.component( &#x27;标签名&#x27; , 组件名)</span><br><span class="line">     这行代码底层原理是把组件放入Vue.prototype 中</span><br><span class="line">4. 使用组件: &lt;子组件&gt;&lt;/子组件&gt;</span><br></pre></td></tr></table></figure><h4 id="组件css作用域：scoped"><a href="#组件css作用域：scoped" class="headerlink" title="组件css作用域：scoped"></a>组件css作用域：scoped</h4><p>1.<code>scoped</code>作用： 设置子组件css作用域，避免子组件样式被父组件覆盖<br>2.<code>scoped</code>原理： 给子组件添加自定义属性<code>data-v-xxxx </code>, 通过属性选择器增加<code>css</code>权重</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this</title>
      <link href="/star/2023/072036.html"/>
      <url>/star/2023/072036.html</url>
      
        <content type="html"><![CDATA[<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p><code>这篇总结主要讲解了this指向与如何修改</code></p><span id="more"></span><h4 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.普通函数                        指向window</span><br><span class="line">2.对象的方法                     该方法所属对象</span><br><span class="line">3.构造函数                         实例对象</span><br><span class="line">4.事件绑定函数                  绑定事件的对象</span><br><span class="line">5.定时器函数                      指向window</span><br><span class="line">6.立即执行函数                  指向window</span><br></pre></td></tr></table></figure><h4 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h4><p>局部变量+this指向<br><code>默认情况下，函数内部的this是由调用决定的。无法修改</code><br><strong>解决办法</strong>：<code>函数上下文进行修改</code></p><p><strong>call</strong><br>语法：<code>函数名.call(this指向谁,实参1，实参2......)</code><br>应用场景：万能数据类型检测</p><p>1.typeof 数据 : 有两种数据类型无法检测<br>null和数组无法检测,结果都是 ‘object’<br>2.解决方案:万能数据类型检测<br>Object.prototype.toString.call(数据)</p><p>数组原型的toString是转字符串的<br>Object原型的toString是检测数据类型的</p><p><strong>apply</strong><br>        函数名.apply(this指向谁, 数组或伪数组 )<br>            apply会自动帮你遍历数组，然后按照顺序逐一传参<br>        函数名.apply(this指向谁, [实参1，实参2…..])<br><strong>bind</strong><br><strong>语法：</strong><code>函数名.bind(this指向谁)</code><br>bind不会立即执行函数,而是返回一个修改this之后的新函数<br><strong>场景：</strong>一般用于修改不需要立即执行的函数，例如：定时器，事件处理函数</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git工作该如何处理？</title>
      <link href="/star/2023/07203295.html"/>
      <url>/star/2023/07203295.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git工作该如何处理？"><a href="#Git工作该如何处理？" class="headerlink" title="Git工作该如何处理？"></a>Git工作该如何处理？</h1><p><code>该文章主要总结了工作中常见的git问题，以及如何解决？</code></p><span id="more"></span><p>本地有一份代码，如何团队协作开发。</p><p><code>master</code>（主分支，项目上线的时候用的）、<code>release</code>（测试分支）、<code>develop</code>（开发分支，并不是让你直接在这个分支写代码，而是一般基于此分支再开一个自己的功能分支，真正写代码的时候，每个人都在自己的功能分支上面写，写完之后再合并到此 develop 分支）、<code>feature/news</code>（自己的功能分支）。</p><p>1、<code>项目经理</code>在 <code>Gitlab</code> 新建一个仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git remote add origin 远程仓库地址 <span class="comment"># 添加远程仓库地址</span></span><br><span class="line">git remote -v <span class="comment"># 查看添加的远程仓库地址</span></span><br><span class="line">git add . <span class="comment"># 添加到暂存区</span></span><br><span class="line">git commit -m <span class="string">&#x27;init&#x27;</span> <span class="comment"># 本地提交</span></span><br><span class="line">git push -u origin master <span class="comment"># 第一次加 -u，后续在此分支推送的时候，直接 git push 即可</span></span><br><span class="line"></span><br><span class="line">git checkout -b release <span class="comment"># 创建并切换到 release 测试分支</span></span><br><span class="line">git push -u origin release</span><br><span class="line"></span><br><span class="line">git checkout -b develop <span class="comment"># 创建并切换到 develop 开发分支</span></span><br><span class="line">git push -u origin develop</span><br></pre></td></tr></table></figure><p>2、组员操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 你刚到公司，老大会给你 Gitlab 的邮箱和用户名，还有一个仓库地址，你需要克隆下来。</span></span><br><span class="line"><span class="comment"># git config --global user.name 老大给的账号 # 配置一下系统的 Git 用户名</span></span><br><span class="line"><span class="comment"># git config --global user.email 老大给的邮箱 # 配置一下系统的 Git 邮箱</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> 老大给的地址 <span class="comment"># 默认克隆下来的是主分支</span></span><br><span class="line">git checkout release <span class="comment"># 如果本地有 release 就切换到本地的 release，如果本地没有就拉取远端的 release 并切换到 release</span></span><br><span class="line">git checkout develop <span class="comment"># 如果本地有 develop 就切换到本地的 develop，如果本地没有就拉取远端的 develop 并切换到 develop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假如老大给你布置了一个任务，开发新闻模块</span></span><br><span class="line">git checkout -b feature/news <span class="comment"># 创建并切换到 feature/news 分支</span></span><br><span class="line"><span class="comment"># 在自己的功能分支写代码，写呀写...</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;feat: news 列表&#x27;</span></span><br><span class="line"></span><br><span class="line">git checkout develop <span class="comment"># 保证先处于 develop，因为待会要把自己的功能分支合并到这儿</span></span><br><span class="line"></span><br><span class="line">git pull <span class="comment"># 建议最好先拉取一下 develop 的代码，因为同事可能提交了</span></span><br><span class="line"></span><br><span class="line">git merge feature/news</span><br><span class="line"></span><br><span class="line">git push <span class="comment"># git push -u origin develop</span></span><br></pre></td></tr></table></figure><p>3、怎么测试？怎么打包上线？</p><p>测试：<code>自测（自己认知范围内，到处点一点，保证自己的功能没有问题）</code>、专门的测试人员去测；</p><p>一般会有项目经理（前端老大）做如下操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop <span class="comment"># 先处于 develop</span></span><br><span class="line">git pull <span class="comment"># 拉取所有人的代码</span></span><br><span class="line">git checkout release <span class="comment"># 切换到测试分支</span></span><br><span class="line"><span class="comment"># 通知测试人员：代码写好了，可以测试了</span></span><br><span class="line"><span class="comment"># 有的公司，有自动话的测试流程，测试人员有权限直接拉取 release 分支的代码，自动打包，测试人员测试打包后的代码</span></span><br><span class="line"><span class="comment"># 有的公司，没有自动化测试的流程，可能你的老大是这样做的，npm run build 直接打包，把打包后的代码发给测试人员去测试，也可能打包后生成一个地址交给测试人员去测试</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假如测试人员测出 Bug 了，测试人员会通过专门的工具（禅道）给你提 Bug，开发人员会收到 Bug 通知，修复 Bug，修复流程如下。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一般基于 release 分支专门再开一个 bug 分支，在此分支解决 Bug，解决完毕之后呢合并到 release，最后把 release 推到远端（如果你有权限的话）；如果没有权限，你就把自己的 Bug 分支推到远端，通知你的老大去合并</span></span><br><span class="line"></span><br><span class="line">git checkout -b hotfix/news <span class="comment"># 开了一个专门的 Bug 分支</span></span><br><span class="line"><span class="comment"># 解 Bug ...</span></span><br><span class="line"><span class="comment"># 假如 release 我没有权限</span></span><br><span class="line"><span class="comment"># git push origin hotfix/news # 推到远端，告知老大已解决</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 假如 release 经过测试也没问题，老大合并到 master</span></span><br><span class="line"></span><br><span class="line">git checkout master</span><br><span class="line">git merge release</span><br><span class="line"></span><br><span class="line">npm run build <span class="comment"># 生成 dist 文件，交给后台人员去部署（一般用的是 Nginx）</span></span><br></pre></td></tr></table></figure><p>4、自己的代码刚写一半，老大通知我其他分支有一个紧急的需求&#x2F;Bug 要我去处理，应该怎么办呢？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git stash <span class="comment"># 在自己的功能分支，暂存一下没有写完的代码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到其他分支去解 Bug 吧，完事之后再回到曾经的功能分支</span></span><br><span class="line"></span><br><span class="line">git checkout feature/user</span><br><span class="line"></span><br><span class="line">git stash apply <span class="comment"># 应用曾经暂存的代码，接着开发</span></span><br></pre></td></tr></table></figure><p>5.自己写好了代码，如何再次与远程仓库建立连接？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin 远程仓库地址 </span><br></pre></td></tr></table></figure><p>6.报错了该如何处理？<br>报错很正常，有很多种原因会造成报错，你看不到报错信息又该怎么办？<br>复制报错信息到百度，前三篇文章必定解决你的问题<br>如果实在不行，利用科学上网？不会？后面会详细写一篇关于科学上网的文章<br>科学上网也不行？这个时候，你赶紧跟你组长说，别拖了项目进度，到时候拖了，那么你就是背锅侠!!!</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html</title>
      <link href="/star/2023/07201.html"/>
      <url>/star/2023/07201.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p><code>HTML这篇笔记是关于html的一些语法，它包含了对html的认知与使用</code></p><span id="more"></span> <h2 id="一-html基础认知"><a href="#一-html基础认知" class="headerlink" title="一.html基础认知"></a>一.html基础认知</h2><p><strong>1.什么是html</strong>：他是超文本标记语言<br><strong>2.web标准三大组成部分？</strong>：结构html,表现css,行为js<br><strong>3.html注释</strong>：<code>&lt;!--  --&gt;</code>或者快捷键：Ctrl+&#x2F;<br><strong>4.注释的作用</strong>：用于解释说明标签的描述信息</p><h2 id="二-html标签"><a href="#二-html标签" class="headerlink" title="二.html标签"></a>二.html标签</h2><p>标签构成：<strong>双标签</strong>和<strong>单标签</strong></p><p>标签与标签的关系：<br>1.父子(嵌套):<code>&lt;head&gt;</code>与<code>&lt;title&gt;</code>的关系<br>2.兄弟(并列):<code>&lt;head&gt;</code>与<code>&lt;body&gt;</code>的关系</p><h3 id="html标签学习"><a href="#html标签学习" class="headerlink" title="html标签学习"></a>html标签学习</h3><h4 id="1-1-排版标签"><a href="#1-1-排版标签" class="headerlink" title="1.1 排版标签"></a>1.1 排版标签</h4><p><strong>标题标签</strong>：<code>&lt;h1&gt;</code>到<code>&lt;h6&gt;</code><br>特点：1.文字加粗变大，h1文字最大，依次递减,，2.独占一行<br><strong>段落标签</strong>：<code>&lt;p&gt;&lt;/p&gt;</code><br>特点：1.独占一行，2.文字多时浏览器会自动换行</p><p><strong>换行标签</strong>：<code>&lt;br&gt;</code><br>特点：1.单标签，2.让文字强制换行<br><strong>水平线标签</strong>：<code>&lt;hr&gt;</code><br>特点：1.单标签，2.在页面中显示一条水平线</p><h4 id="1-2-文本格式化标签"><a href="#1-2-文本格式化标签" class="headerlink" title="1.2 文本格式化标签"></a>1.2 文本格式化标签</h4><p><strong>标签名</strong>：</p><p>1.<code>&lt;b&gt;</code>和<code>&lt;strong&gt;</code>             加粗<br>2.<code>&lt;u&gt;</code>和<code>&lt;ins&gt;</code>                   下划线<br>3.<code>&lt;i&gt;</code>和<code>&lt;em&gt;</code>                      倾斜<br>4.<code>&lt;s&gt;</code>和<code>&lt;del&gt;</code>                    删除线</p><p><strong>特点</strong>：标签内容会在一行显示</p><h4 id="1-3标签的属性"><a href="#1-3标签的属性" class="headerlink" title="1.3标签的属性"></a>1.3标签的属性</h4><p>&lt;开始标签  属性名&#x3D;’属性值’&gt;&lt;&#x2F;结束标签&gt;<br><strong>注意点</strong>：</p><p>1.标签的属性写在开始标签的内部<br>2.允许存在多个属性<br>3.属性之间空格隔开<br>4.标签名与属性之间必须用空格隔开<br>5.属性之间没有顺序之分</p><h4 id="1-4媒体标签"><a href="#1-4媒体标签" class="headerlink" title="1.4媒体标签"></a>1.4媒体标签</h4><p><strong>img图片标签</strong>：<code>&lt;img&gt;</code></p><p>1.src用于显示图片，值是图片路径<br>2.alt替换文本，图片加载失败时才会显示对应的文字信息<br>3.title鼠标悬停在图片上面时显示的文字信息</p><h4 id="1-5路径"><a href="#1-5路径" class="headerlink" title="1.5路径"></a>1.5路径</h4><p>1.绝对路径(不常用)：指目录下的绝对位置，可直接达到目标位置，通常以盘符开始的路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如1:D:/14天基础/day01</span><br><span class="line">例如2:完整的网络地址</span><br></pre></td></tr></table></figure><p>2.相对路径：从当前文件开始出发找目标文件的过程</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">同级目录:  ./</span><br><span class="line">上级目录:  ../</span><br><span class="line">下级目录:  /</span><br></pre></td></tr></table></figure><h4 id="1-6音频与视频"><a href="#1-6音频与视频" class="headerlink" title="1.6音频与视频"></a>1.6音频与视频</h4><p><strong>音频标签</strong>：<code>&lt; audio&gt;</code><br>常见属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src        路径</span><br><span class="line">controls   显示播放的控件</span><br><span class="line">autoplay   自动播放</span><br><span class="line">loop       循环播放</span><br><span class="line">muted      静音播放</span><br></pre></td></tr></table></figure><p> <strong>视频标签</strong>：<code>&lt; video&gt;</code><br>常见属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">src        路径</span><br><span class="line">controls   显示播放的控件</span><br><span class="line">autoplay   自动播放  配合muted静音播放</span><br><span class="line">loop       循环播放</span><br><span class="line">muted      静音播放</span><br><span class="line">poster=” “ 加载等待的画面图片</span><br></pre></td></tr></table></figure><p><strong>a标签</strong>：<code>&lt;a href=&#39;&#39;&gt;内容&lt;a&gt;</code><br>常见属性：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">href   跳转路径</span><br><span class="line">target 设置目标链接的打开方式,两种值：_self,_blank</span><br><span class="line">_self  默认值</span><br><span class="line">_blank 新窗口打开 不会覆盖原网页</span><br></pre></td></tr></table></figure><p><strong>空链接</strong> ：<code>&lt;a href=&#39;#&#39;&gt;内容&lt;a&gt;</code></p><h4 id="1-7列表标签"><a href="#1-7列表标签" class="headerlink" title="1.7列表标签"></a>1.7列表标签</h4><p><strong>无序列表</strong>：<code>&lt;ul&gt;&lt;li&gt;&lt;/li&gt;&lt;/ul&gt;</code>         <strong>并列关系,无顺序之分</strong><br><strong>有序列表</strong>：<code>&lt;ol&gt;&lt;li&gt;&lt;/li&gt;&lt;/ol&gt;</code>          <strong>有顺序之分，主要用于排名</strong><br><strong>自定义列表</strong>： 一般用于网页底部，  简单理解就是一个大哥带着几个小弟，dl是自定义列表的框架，dt是大哥，dd是小弟<br><code>&lt;dl&gt;     &lt;dt&gt;我是大哥&lt;/dt&gt;     &lt;dd&gt;我是小弟1号&lt;/dd&gt;     &lt;dd&gt;我是小弟2号&lt;/dd&gt;  &lt;/dl&gt;</code></p><h4 id="1-8表格标签"><a href="#1-8表格标签" class="headerlink" title="1.8表格标签"></a>1.8表格标签</h4><p><strong>表格结构标签</strong>：table表格整体，tr行，td单元格<br><code>&lt;table&gt;</code><br>        <code>&lt;tr&gt;</code><br>            <code>&lt;td&gt;序号&lt;/td&gt;</code><br>            <code>&lt;td&gt;姓名&lt;/td&gt;</code><br>        <code>&lt;/tr&gt;</code><br><code>&lt;/table&gt;</code></p><p><strong>表格属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">boder 边框        width   height</span><br><span class="line">align left right center 表格对齐方式（写入table标签中）</span><br><span class="line">cellpadding  表格中文字与边框的距离</span><br><span class="line">cellspacing  表格中边框与边框之间的间距  </span><br></pre></td></tr></table></figure><p><strong>表格标题和表头单元格标签</strong><br> 1.caption 表格标题，写在table里面<br> 2.th 表头单元格，里面文字会居中且加粗<br><strong>表格结构标签(了解)</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">thead  表格头部区域标签</span><br><span class="line">tbody  表格主体区域标签</span><br><span class="line">tfoot 表格底部</span><br></pre></td></tr></table></figure><p><strong>合并单元格</strong><br> 注意：<strong>合并属性是写在单元格td，th上，不能跨结构标签合并：thead  tbody  tfooter</strong><br> <strong>colspan</strong>   跨列合并     以左侧单元格作为目标单元格<br> <strong>rowspan</strong>  跨行合并     以上侧单元格作为目标单元格<br> 最后删除多余的单元格</p><h4 id="1-9表单标签"><a href="#1-9表单标签" class="headerlink" title="1.9表单标签"></a>1.9表单标签</h4><p><strong>input系列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.text文本框       placeholder占位符，提示输入文本</span><br><span class="line">2.password密码框   placeholder占位符，提示输入文本</span><br><span class="line">3.radio单选框</span><br><span class="line">        name   相同的name属性值的单选框为一组</span><br><span class="line">        checked   默认选中</span><br><span class="line">4.checkbox多选框</span><br><span class="line">        checked   默认选中</span><br><span class="line">5.file文件选择框</span><br><span class="line">        multiple  默认只能选择一个文件，选择多个则需要multiple</span><br><span class="line">6.按钮</span><br><span class="line">        submit提交按钮</span><br><span class="line">        reset重置按钮</span><br><span class="line">        button普通按钮</span><br><span class="line">        注意：如果需要实现以上按钮，需要配合form标签使用</span><br><span class="line">        value属性可以设置文字</span><br></pre></td></tr></table></figure><p><strong>button按钮标签</strong></p><p>submit提交按钮： <code>&lt;button type=&quot;submit&quot;&gt;提交&lt;/button&gt;</code></p><p>reset重置按钮：<code> &lt;button type=&quot;reset&quot;&gt;重置&lt;/button&gt;</code></p><p>button普通按钮</p><p>注意：如果需要实现以上按钮，需要配合form标签使用</p><p><strong>select下拉框</strong></p><p>标签组成：select标签和option标签<br>默认显示：selected，在option里面添加</p><p><strong>textarea标签</strong><br>属性：cols 宽度  ，rows 行的数量<br>textarea文本域</p><p><strong>label标签</strong></p><p>作用：<strong>光标聚焦</strong><br>表单聚焦：<code>&lt;label for=&quot;fullname&quot;&gt;姓名：&lt;/label&gt;&lt;input type=&quot;text&quot; id=&quot;fullname&quot;&gt;</code></p><p>单选聚焦：<code>&lt;label&gt;男：&lt;input type=&quot;radio&quot;&gt;&lt;/label&gt;</code></p><p><strong>语义化标签</strong><br>1.没有语义的标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div独占一行</span><br><span class="line">span不独占一行</span><br></pre></td></tr></table></figure><p>2.语义化标签(了解)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">header 网页头部</span><br><span class="line">footer 网页底部</span><br><span class="line">section 区块</span><br><span class="line">nav 导航栏</span><br><span class="line">aside 网页侧边栏</span><br><span class="line">article 网页文章</span><br></pre></td></tr></table></figure><p>  <strong>字符实体</strong><br>   <code>&amp;nbsp;</code>  空格<br>   <code>&amp;gt;</code> 大于<br>   <code> &amp;lt;</code> 小于</p>]]></content>
      
      
      <categories>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript基础</title>
      <link href="/star/2023/07203.html"/>
      <url>/star/2023/07203.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><p><code>JavaScript基础这篇笔记是关于JavaScript基础语法的总结</code></p><span id="more"></span><h2 id="1-js基础语法"><a href="#1-js基础语法" class="headerlink" title="1.js基础语法"></a>1.js基础语法</h2><h3 id="1-1js介绍"><a href="#1-1js介绍" class="headerlink" title="1.1js介绍"></a>1.1js介绍</h3><p>是什么？：是一种运行在客户端的编程语言，实现人机交互<br>作用：网页特效，表单验证，数据交互，服务端编程<br>组成：<code>ECMAScript</code>，<code>Web APIS</code></p><h3 id="1-2-js的书写位置"><a href="#1-2-js的书写位置" class="headerlink" title="1.2 js的书写位置"></a>1.2 js的书写位置</h3><p>1.内联  写在标签里面<br>2.内部  直接写在html文件  放入底部<br>3.外部  写在js文件中  <code>&lt;script src=&quot;&quot;&gt;</code><br>注意：引入的<code>script</code>标签中间就不要写代码了</p><h3 id="1-3js的注释"><a href="#1-3js的注释" class="headerlink" title="1.3js的注释"></a>1.3js的注释</h3><p>1.单行注释  <code>//</code>   快捷键<code>Ctrl+/</code><br>2.多行注释 <code>/* */</code></p><h3 id="1-4js的结束符"><a href="#1-4js的结束符" class="headerlink" title="1.4js的结束符"></a>1.4js的结束符</h3><p>1.代表语句结束   英文分号<br>2.换行符会自动标识为结束符</p><h3 id="1-5js输入输出语法"><a href="#1-5js输入输出语法" class="headerlink" title="1.5js输入输出语法"></a>1.5js输入输出语法</h3><p>1.向<code>body</code>输出内容 <code>document.write(&#39;输出内容&#39;)</code><br>2.页面弹出警示框  <code>alert（‘输出内容’）</code><br>3.控制台输出语法  <code>console.log(&#39;输出内容&#39;)</code><br>4.<code>prompt()</code>输入语法</p><h3 id="1-6变量"><a href="#1-6变量" class="headerlink" title="1.6变量"></a>1.6变量</h3><p>1.<strong>是什么？</strong>存储数据的容器，注意：<strong>变量不是数据本身，而是存储数据的容器</strong><br>2.声明变量  :  <code>let 变量名;</code>  赋值： <code>变量名 = 18;</code><br>变量初始化<code> let age =18;</code><br><strong>let不允许多次声明一个变量</strong><br>3.<strong>变量的本质</strong>  是内存中的一块空间，用来存储数据<br>4.<strong>变量名规则与规范</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">规则：1.不能出现关键字</span><br><span class="line">            2.只能用下划线，字母，数字，$符号组成，且不能数字开头</span><br><span class="line">            3.字母严格区分大小写</span><br><span class="line">规范：1.见名知意</span><br><span class="line">            2.遵循小驼峰命名法</span><br></pre></td></tr></table></figure><p>5.<strong>变量扩展-数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.保存多个数据</span><br><span class="line">2.let 变量名 = [数据1,数据2,数据3]</span><br><span class="line">3.数组中的每个数据都有自己的编号，第一个编号是从0开始</span><br></pre></td></tr></table></figure><h3 id="1-7数据类型"><a href="#1-7数据类型" class="headerlink" title="1.7数据类型"></a>1.7数据类型</h3><h4 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1.基本数据类型"></a>1.基本数据类型</h4><p><strong>number</strong> 数字型<br><strong>string</strong>  字符串型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.引号必须成对  推荐使用单引号</span><br><span class="line">2.外单内双，外双内单</span><br><span class="line">3.转义符  \</span><br><span class="line">4.字符串拼接  console.log(变量名1+变量名2)</span><br><span class="line">5.模板字符串 `我叫$&#123;name&#125;`</span><br></pre></td></tr></table></figure><p><strong>boolean</strong>  布尔型  true  false<br><strong>undefined</strong> 未定义<br><strong>null</strong>  空引用</p><h4 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2.引用数据类型"></a>2.引用数据类型</h4><p>对象，函数，数组</p><p><strong>检测数据类型</strong><br><code>typeof</code>    例如：<code>console.log(typeof 123)</code></p><h3 id="1-8类型的转换"><a href="#1-8类型的转换" class="headerlink" title="1.8类型的转换"></a>1.8类型的转换</h3><p><strong>隐式转换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+号两边只要有一个是字符串，那么就会把另一个转换为字符串</span><br><span class="line">除了+以外的算数运算符,-*/等都会把数据转换为数字类型</span><br><span class="line">+号作为正号解析时，可以转换为数字类型</span><br></pre></td></tr></table></figure><p><strong>显式转换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.转换为数字型</span><br><span class="line">       Number(&#x27;10&#x27;)</span><br><span class="line">       parseInt(&#x27;10&#x27;)   转换为数字型，只保留整数，没有四舍五入</span><br><span class="line">       parseFloat(&#x27;10.99&#x27;) 转换为数字型，会保留小数</span><br><span class="line">区别</span><br><span class="line">1.1Number()：只能放数字类型的字符，否则返回NaN</span><br><span class="line">1.2pasreFloat(): 能放以数字开头的所有类型的字符串，pasreFloat 会自动过滤，只返回数字</span><br><span class="line"></span><br><span class="line">2.转换为字符型</span><br><span class="line">       1.String(数据)</span><br><span class="line">       2.变量.toString(进制)</span><br></pre></td></tr></table></figure><h2 id="2-流程控制"><a href="#2-流程控制" class="headerlink" title="2.流程控制"></a>2.流程控制</h2><h3 id="2-1运算符"><a href="#2-1运算符" class="headerlink" title="2.1运算符"></a>2.1运算符</h3><p><strong>算数运算符</strong>  +  -  *  &#x2F;  %<br>优先级 ：*&#x2F; %同等级，先乘除后加减，有括号先算括号<br><strong>赋值运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">= 赋值</span><br><span class="line">+=    num += 1  等同于 num = num + 1</span><br><span class="line">-=  *=  /=  %=</span><br></pre></td></tr></table></figure><p><strong>一元运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">++ 自增</span><br><span class="line">++num  前置自增  先自加，再使用  等同于num += 1</span><br><span class="line">num++  后置自增  先使用，再自加  等同于num += 1</span><br><span class="line">--  自减</span><br></pre></td></tr></table></figure><p><strong>比较运算符</strong><br>     &gt;  &lt;  &gt;&#x3D;  &lt;&#x3D;<br><strong>相等运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">==  左右两边值是否相等，不管数据类型</span><br><span class="line">=== 左右两边数据类型 ，值， 引用地址全等  常用</span><br><span class="line">！== 值不等于</span><br><span class="line">得到的结果true  flase</span><br><span class="line">注意：</span><br><span class="line">       1.NaN不等于任何值，包括它本身</span><br><span class="line">       2.尽量不要比较小数</span><br><span class="line">       3.不同类型之间比较会发生隐式转换</span><br><span class="line">       4.开发中请用===</span><br></pre></td></tr></table></figure><p><strong>逻辑运算符</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp;  并且  一假则假</span><br><span class="line">|| 或者  一真则真</span><br><span class="line">！ 取反 真变假 假变真</span><br><span class="line"></span><br><span class="line">逻辑运算符里的短路  只存在于&amp;&amp;和||</span><br><span class="line">&amp;&amp;左边为假flase就不判断右边了</span><br><span class="line">||左边为真true就不判断右边了</span><br><span class="line">注意：有5个值是当false来看的</span><br><span class="line">      false为假</span><br><span class="line">      数字0为假</span><br><span class="line">      ‘’ 空字符串为假</span><br><span class="line">      undefined为假</span><br><span class="line">      null 为假</span><br><span class="line">      NaN为假</span><br></pre></td></tr></table></figure><p><strong>运算符优先级</strong><br><strong>小括号&gt; 一元运算符和取反！&gt; 算数运算符&gt;比较运算符&gt;相等运算符&gt;&amp;&amp;&gt;||&gt;赋值运算符&#x3D;&gt;逗号</strong></p><h3 id="2-2语句"><a href="#2-2语句" class="headerlink" title="2.2语句"></a>2.2语句</h3><p>   顺序语句 从上到下依次执行</p><h3 id="2-3分支语句"><a href="#2-3分支语句" class="headerlink" title="2.3分支语句"></a>2.3分支语句</h3><p><strong>2.3.1if分支语句</strong><br>       <code>if()&#123;&#125; else if()&#123;&#125; else&#123;&#125;</code><br> <strong>三元表达式</strong><br>       条件？输出1：输出2<br><strong>switch语句</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(数据)&#123;</span><br><span class="line">            <span class="keyword">case</span> 数据<span class="number">1</span>:</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;取款&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">case</span> 数据<span class="number">2</span>:</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;存款&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="attr">default</span>:</span><br><span class="line">                <span class="title function_">alert</span>(<span class="string">&#x27;重新输入&#x27;</span>)</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p><strong>2.3.2循环语句</strong><br><strong>while循环</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span>  <span class="comment">//变量起始值</span></span><br><span class="line"><span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;  <span class="comment">//变量终止条件</span></span><br><span class="line">     <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`hh`</span>)</span><br><span class="line">        i++   <span class="comment">//变量变化</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>for循环</strong><br>       1.<code>for(let i = 1; i &lt;= 10; i++) &#123;循环体&#125;</code><br>       2.<code>for循环的嵌套</code><br><strong>continue和break的区别</strong><br>      1.<code>continue</code> 结束本次循环，继续下一次循环<br>       2.<code>break</code> 直接退出本次循环</p><h2 id="3-数组"><a href="#3-数组" class="headerlink" title="3.数组"></a>3.数组</h2><p>语法：<code>let 数组名 = []</code><br>数组长度   <code>数组名.length</code><br><strong>添加数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.push(元素1，元素2)   在数组后面添加  返回新数组</span><br><span class="line">arr.unshit(元素1，元素2)  在数组前面添加  返回新数组</span><br></pre></td></tr></table></figure><p><strong>删除数组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.pop()  只能删除最后一个元素  返回新数组</span><br><span class="line">arr.shift()  只能删除第一个元素  返回新数组</span><br><span class="line">arr.splice(从哪里删,删除几个)  删除指定元素</span><br></pre></td></tr></table></figure><h2 id="4-函数"><a href="#4-函数" class="headerlink" title="4.函数"></a>4.函数</h2><h3 id="4-1函数的基础使用"><a href="#4-1函数的基础使用" class="headerlink" title="4.1函数的基础使用"></a>4.1函数的基础使用</h3><p><strong>是什么？</strong>执行特定任务的代码块，可以实现代码复用<br><code>function  函数名() &#123; 函数体 &#125;</code>     调用函数：<code>函数名()</code></p><h3 id="4-2函数传参"><a href="#4-2函数传参" class="headerlink" title="4.2函数传参"></a>4.2函数传参</h3><p>作用：提高函数的灵活性<br><code>function  函数名(形参1,形参2) &#123; 函数体 &#125;</code>     调用函数:<code>函数名(实参1,实参2)</code></p><h3 id="4-3函数的返回值"><a href="#4-3函数的返回值" class="headerlink" title="4.3函数的返回值"></a>4.3函数的返回值</h3><p><strong>return</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.函数内部可以有多个return，但返回值只能有一个，return后面的数据不要换行写</span><br><span class="line">2.return会立即结束当前函数</span><br><span class="line">3.函数可以没有return，但返回值会是undefined</span><br><span class="line">4.return只能返回一个值</span><br><span class="line">     例如  return a,b 那么此时，不会返回b</span><br><span class="line">     解决:写成数组  return[a,b]</span><br></pre></td></tr></table></figure><h3 id="4-4作用域"><a href="#4-4作用域" class="headerlink" title="4.4作用域"></a>4.4作用域</h3><p><strong>全局作用域</strong><br>整个script标签内部或者一个独立的文件，全局作用域下的变量谁都能使用<br><strong>局部作用域</strong><br>函数内的代码环境，因为跟环境有关，也被称为函数作用域，局部作用域只能在局部使用<br><strong>块级作用域</strong><br><code>块级作用域由&#123; &#125;包括，if语句，for语句等</code>，块级作用域只能在块级之中用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">注意1：</span><br><span class="line">如果函数内部或者块级作用域内部，没有用let声明的变量，却直接使用，也要把它当作全局变量</span><br><span class="line">注意2：</span><br><span class="line">函数内部的形参可以看做是局部变量</span><br><span class="line"></span><br><span class="line">总结一句话：全局&gt;局部=块级</span><br></pre></td></tr></table></figure><h3 id="4-5作用域链"><a href="#4-5作用域链" class="headerlink" title="4.5作用域链"></a>4.5作用域链</h3><p>是什么？根据在内部函数可以访问外部函数变量的这种机制，用链式查找决定哪些数据能被内部函数访问，就称为作用域链<br><strong>查找变量的原则</strong>：就近原则<br><strong>匿名函数(函数表达式)</strong><br>语法:<code>let fn  =  function (x,y) &#123;函数体&#125;</code>    调用:<code>fn(x,y)</code><br><strong>立即执行函数</strong>     立即执行，无需调用<br><strong>作用</strong>：能有效避免全局变量之间的污染<br>两种写法：<br><code>(function (x,y) &#123;函数体&#125;)(x,y);</code><br><code>(function (x,y) &#123;函数体&#125;(x,y));</code><br><strong>注意：必须加分号；结束符</strong></p><p><strong>arguments</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.伪数组，无法使用数组中的方法</span><br><span class="line">2.有length</span><br><span class="line">3.仅仅只在函数内有效</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例：</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123; </span><br><span class="line">            <span class="keyword">let</span> sum = <span class="number">0</span>  </span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>;i++) &#123;</span><br><span class="line">                sum += <span class="variable language_">arguments</span>[i]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p><strong>在写了实参却没有写形参时，可以使用argument伪数组</strong></p><h2 id="5-对象"><a href="#5-对象" class="headerlink" title="5.对象"></a>5.对象</h2><h3 id="5-1什么是对象"><a href="#5-1什么是对象" class="headerlink" title="5.1什么是对象"></a>5.1什么是对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.无序的数据集合</span><br><span class="line">2.是一种数据类型</span><br><span class="line">3.是由属性和方法组成</span><br></pre></td></tr></table></figure><h3 id="5-2对象的基本使用"><a href="#5-2对象的基本使用" class="headerlink" title="5.2对象的基本使用"></a>5.2对象的基本使用</h3><p><code>let 对象名 = &#123;属性名:属性值,方法名:匿名函数&#125;</code><br><strong>对象两种访问属性的方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> goods = &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;小米10&#x27;</span>,</span><br><span class="line">            <span class="attr">num</span>:<span class="number">1000128164</span>,</span><br><span class="line">            <span class="attr">weight</span>:<span class="string">&#x27;0.55kg&#x27;</span>,</span><br><span class="line">            <span class="attr">address</span>:<span class="string">&#x27;中国大陆&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(goods.<span class="property">name</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(goods[<span class="string">&#x27;name&#x27;</span>]);</span><br></pre></td></tr></table></figure><p> <strong>访问方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.对象名.属性名</span><br><span class="line">2.对象名[&#x27;属性名&#x27;]</span><br><span class="line">3.对象访问方法    对象.方法名()</span><br></pre></td></tr></table></figure><h3 id="5-3操作对象"><a href="#5-3操作对象" class="headerlink" title="5.3操作对象"></a>5.3操作对象</h3><p><strong>查</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象名.属性名</span><br><span class="line">对象名[&#x27;属性名&#x27;]</span><br></pre></td></tr></table></figure><p><strong>增</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象名.新属性名= 新属性值</span><br></pre></td></tr></table></figure><p><strong>改</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名 = 值</span><br><span class="line">对象.方法 = 匿名函数</span><br></pre></td></tr></table></figure><p><strong>删</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete 对象名.属性</span><br></pre></td></tr></table></figure><h3 id="5-4遍历对象"><a href="#5-4遍历对象" class="headerlink" title="5.4遍历对象"></a>5.4遍历对象</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.对象没有数组的length属性，无法确定长度</span><br><span class="line">2.对象里面是无序的键值对，没有规律，不想数组有下标</span><br></pre></td></tr></table></figure><p><strong>语法</strong>：<code>for(let k(变量名) in  对象名) &#123;&#125;</code><br><strong>k是变量名</strong><br>       因此，获得对象属性的是k<br>       获得对象值是obj[k]<br><strong>遍历数组对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`    &lt;table&gt;</span></span><br><span class="line"><span class="string">    &lt;caption&gt;&lt;h2&gt;学生信息&lt;/h2&gt;&lt;/caption&gt;</span></span><br><span class="line"><span class="string">    &lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;序号&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;姓名&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;年龄&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;性别&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;家乡&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;</span></span><br><span class="line"><span class="string">    `</span>)</span><br><span class="line">    <span class="keyword">let</span> arr = [</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;小民&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;河北&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;小民&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;河北&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;小民&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;河北&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;小民&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;河北&#x27;</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">name</span>: <span class="string">&#x27;小民&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span>, <span class="attr">address</span>: <span class="string">&#x27;河北&#x27;</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">`</span></span><br><span class="line"><span class="string">            &lt;tr&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;i + <span class="number">1</span>&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;arr[i].name&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;arr[i].age&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;arr[i].sex&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">                &lt;td&gt;<span class="subst">$&#123;arr[i].address&#125;</span>&lt;/td&gt;</span></span><br><span class="line"><span class="string">            &lt;/tr&gt;</span></span><br><span class="line"><span class="string">            `</span>)</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&lt;/table&gt;<span class="string">`)</span></span><br></pre></td></tr></table></figure><h3 id="5-5内置对象"><a href="#5-5内置对象" class="headerlink" title="5.5内置对象"></a>5.5内置对象</h3><p><strong>数学对象Math</strong><br>math.pi  圆周率</p><p>math.abs  绝对值  如果是字符串的’-1’,输出也会是1，隐式转换</p><p>math.max 取最大值<br>如果未输入数字进去，返回-Infinity，<br>如果输入数字进去，则是取最大值<br>如果输入数字和字符串混合的，则是NAN</p><p>math.min  取最小值<br>math.ceil  向上取整<br>math.floor 向下取整</p><p>math.round 四舍五入  0.5  是往大的方向四舍五入</p><p>math.random（） 随机数<br>返回一个0-1之间随机的小数，包括0，不包括1<br>这个方法里面不跟参数</p><p>1-10之间的随机数<br>return Math.floor(Math.random() * (max-min+1)+min);</p><h3 id="5-6数据类型的存储方式"><a href="#5-6数据类型的存储方式" class="headerlink" title="5.6数据类型的存储方式"></a>5.6数据类型的存储方式</h3><p>简单数据类型按照值存储   存放在栈<br>复杂数据类型按照地址存储  存放在堆</p><p>复杂数据类型的地址</p><p>简单数据类型的值</p><p>总结：简单数据类型开辟的地址是不同的，无论几个简单数据去开辟同样的值，那他的地址照样不会改</p><p>总结：复杂数据类型的值是存放在堆里面的，而找到堆的值要通过栈的复杂数据类型的地址，复杂数据1只要赋值于复杂数据2，那么就获得了与复杂数据1同样的地址，同时能够读取到堆里面的值，而复杂数据2如果一改变，则会通过栈里面的地址找到堆里面的数据，同时会改变对里面数字的值，而此时复杂数据1的值也会因此改变</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node.js</title>
      <link href="/star/2023/0720477.html"/>
      <url>/star/2023/0720477.html</url>
      
        <content type="html"><![CDATA[<h2 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h2><p><code>这篇总结了node.js的基本概念与使用,如果公司需要，建议去查相关文档</code></p><span id="more"></span><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><strong>是什么？</strong>是一个基于谷歌V8引擎的开源的，跨平台的JS运行时环境<br><strong>作用</strong>：让js可以做后端功能<br><strong>如何运行？</strong>打开终端，输入       node js文件路径</p><h4 id="前端js与后端js的区别"><a href="#前端js与后端js的区别" class="headerlink" title="前端js与后端js的区别"></a>前端js与后端js的区别</h4><p>前端js三部分  ECMAScript ，DOM , BOM<br>后端js一个部分： ECMAScript</p><h4 id="node-js模块化开发"><a href="#node-js模块化开发" class="headerlink" title="node.js模块化开发"></a>node.js模块化开发</h4><p><strong>是什么？</strong>把一个大文件按照功能拆分为小文件，，再使用特定的语法(模块化语法)组合在一起</p><p><strong>优点</strong>：<br>1.按需导入，节省内存资源<br>2.避免全局变量污染，每个模块都是一个独立的作用域<br>3.业务分离：每个模块只负责某一个功能，便于维护</p><p>语法：CommonJS<br>导出：module.exports &#x3D; { }<br>导入：const 对象名 &#x3D; require(‘文件路径’)</p><h3 id="fs模块"><a href="#fs模块" class="headerlink" title="fs模块"></a>fs模块</h3><p>作用：读写文件<br><strong>语法1：读取文件</strong><br>第一步：导入：const 对象 &#x3D; require(‘fs’)<br>第二步：使用：对象.readFile(‘文件路径’，’文件编码’，回调函数)<br>读取文件的文件编码默认是二进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> 对象名 = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)  <span class="comment">//fs是模块名</span></span><br><span class="line">对象名.<span class="title function_">readFile</span>(<span class="string">&#x27;文件路径&#x27;</span>,<span class="string">&#x27;文件编码&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123; <span class="comment">//失败与成功</span></span><br><span class="line">    err?<span class="keyword">throw</span> <span class="attr">error</span>:<span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fd = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line">fd.<span class="title function_">readFile</span>(<span class="string">&#x27;./data/aaa.txt&#x27;</span>,<span class="string">&#x27;utf8&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> error</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>语法2：写入文件</strong><br>第一步：导入：const 对象 &#x3D; require(‘fs’)<br>第二步：使用：对象.writeFile(‘文件路径’，’要写入的数据’，’文件编码’，回调函数)<br>写入文件的文件编码默认是数据编码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="comment">//2.使用模块</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./data/ddd.txt&#x27;</span>,<span class="string">&#x27;肾虚哥肾虚了&#x27;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>decodeURL()  将乱码转换为原本的样子</p><h3 id="path模块"><a href="#path模块" class="headerlink" title="path模块"></a>path模块</h3><p>作用：处理路径<br>导入：const 对象名 &#x3D; require(‘path’)</p><p>常用语法：<br>拼接绝对路径：path.resolve(‘文件名’)     需要导入path模块<br>文件夹绝对路径：_ _dirname                    不需要导入path模块</p><h3 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h3><p>作用：搭建服务器</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">//2.创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.<span class="title function_">createServer</span>()</span><br><span class="line"><span class="comment">//3.开启服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="string">&#x27;端口号&#x27;</span>,<span class="string">&#x27;主机名(ip地址)&#x27;</span>,成功的回调)</span><br></pre></td></tr></table></figure><p>端口号：识别具体软件的编号<br>ip地址：每一个电脑在网络中都有一个唯一的身份标识<br>res.writeHeader(响应码，对象)   改变请求头<br>res.end(‘显示页面的内容’)     显示页面的内容</p><p>示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">const</span> app = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>)</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">url</span>===<span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">writeHeader</span>(<span class="number">200</span>,&#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf8&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&#x27;我是首页&#x27;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.<span class="property">url</span> === <span class="string">&#x27;/list&#x27;</span>) &#123;</span><br><span class="line">        res.<span class="title function_">writeHeader</span>(<span class="number">200</span>,&#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf8&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;李小2&#x27;</span>&#125;))</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">writeHeader</span>(<span class="number">302</span>,&#123;</span><br><span class="line">            <span class="string">&#x27;Content-type&#x27;</span>:<span class="string">&#x27;text/html;charset=utf8&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;location&#x27;</span>:<span class="string">&#x27;http://127.0.0.1:3000&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        res.<span class="title function_">end</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//开启服务器</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已开启&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="综合代码"><a href="#综合代码" class="headerlink" title="综合代码"></a>综合代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(req.<span class="property">url</span>===<span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/www/index.html`</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                <span class="keyword">throw</span> err</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">end</span>(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/www/<span class="subst">$&#123;<span class="built_in">decodeURI</span>(req.url)&#125;</span>`</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(err) &#123;</span><br><span class="line">                <span class="keyword">throw</span> err</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">end</span>(data)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务器已开启&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><p>WEB特点01 ：  html中所有的外部资源(src href)都会变成网络请求<br>要想HTML页面可以加载静态资源(css、图片、音视频),服务器就需要响应这些文件</p><p>WEB特点02 :  静态资源网络请求url 一般与 文件路径 一致, 一般会自动拼接文件路径响应返回<br>静态资源服务器 : 自动响应返回页面每一个静态资源请求</p>]]></content>
      
      
      <categories>
          
          <category> node.js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js面向对象</title>
      <link href="/star/2023/072046.html"/>
      <url>/star/2023/072046.html</url>
      
        <content type="html"><![CDATA[<h2 id="js面向对象"><a href="#js面向对象" class="headerlink" title="js面向对象"></a>js面向对象</h2><p><code>这篇总结主要讲解了js面向对象，编程思想+构造函数+原型对象</code></p><span id="more"></span><h3 id="1-编程思想"><a href="#1-编程思想" class="headerlink" title="1.编程思想"></a>1.编程思想</h3><h4 id="面向过程编程-POP"><a href="#面向过程编程-POP" class="headerlink" title="面向过程编程  POP"></a>面向过程编程  POP</h4><p>面向过程就是分析解决问题所需要的步骤，然后把这些步骤一步一步实现，使用的时候再一个一个依次调用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">例子：将大象装进冰箱，面向过程做法</span><br><span class="line">1.打开冰箱门</span><br><span class="line">2.把大象装进去</span><br><span class="line">3.关上冰箱门</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>面向过程，就是按照我们分析好了的步骤，按照步骤解决问题</strong></p><h4 id="面向对象编程-OOP"><a href="#面向对象编程-OOP" class="headerlink" title="面向对象编程  OOP"></a>面向对象编程  OOP</h4><p>面向对象是把事务分解成一个个对象，然后由对象之间分工与合作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.大象对象  进去</span><br><span class="line">2.冰箱对象 打开</span><br><span class="line">关闭</span><br><span class="line">3.使用大象和冰箱的功能</span><br></pre></td></tr></table></figure><p><strong>面向对象是以对象功能划分问题，而不是步骤</strong></p><p><code>面向对象本质是</code>：面向过程的封装<br>面向对象特征</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1.封装性：</span><br><span class="line">  a.把代码放入对象的方法中</span><br><span class="line">  b.解决代码复用</span><br><span class="line">  c.避免全局变量的污染</span><br><span class="line">2.继承性：一个对象拥有另一个对象  所有成员</span><br><span class="line">3.多态性：一个对象在不同情况下的不同状态</span><br></pre></td></tr></table></figure><h3 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h3><p><strong>特点</strong>：<br><code>1.构造函数体现了面向对象的封装性</code><br><code>2.构造函数实例创建的对象彼此独立，互不影响</code><br><strong>构造函数的问题</strong>：构造函数方法好用，但存在浪费内存问题(存复杂数据类型)</p><p><strong>new在执行时会做四件事情：</strong><br>            <code>1.在内存中创建一个新的空对象</code><br>            <code>2.让this指向这个新对象</code><br>            <code>3.执行构造函数里面的代码，给这个新对象添加属性和方法</code><br>            <code>4.返回这个新对象（所有构造函数中不需要return）</code></p><p><strong>规范：命名首字母大写</strong></p><p><strong>构造函数return的使用</strong><br>            <code>1.如果return的是值类型则无效</code><br>            2.<code>如果return的是引用类型则有效，会覆盖new创建的对象</code></p><h3 id="3-原型对象"><a href="#3-原型对象" class="headerlink" title="3.原型对象"></a>3.原型对象</h3><p><strong>作用：</strong><code>解决构造函数浪费内存+变量污染的问题</code></p><h4 id="原型prototype"><a href="#原型prototype" class="headerlink" title="原型prototype"></a>原型prototype</h4><p><strong>原型的作用：</strong><code>共享方法与继承</code><br>是构造函数的一个属性，本质也是一个对象，也称prototype原型对象<br><strong>特点</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.构造函数通过原型分配的函数是所有对象所共享的</span><br><span class="line">2.js规定，每一个构造函数都有prototype属性，指向另一个对象</span><br><span class="line">3.我们可以把那些不变的方法，直接定义在prototype对象上，这样所有对象的实例就可以共享这些方法</span><br></pre></td></tr></table></figure><p><strong>注意一：</strong><br><code>1.prototype就是一个对象，这个对象所有的方法和属性都会被构造函数所拥有</code><br><code>2.构造函数里面的this指向是实例对象</code><br><code>3.原型对象里面的this指向的还是实例对象</code><br>注意二：<br><code>1.公共的属性写在构造函数里面</code><br><code>2.公共的方法写在原型对象身上，构造函数名.prototype.方法名  = function()&#123;&#125;</code></p><h4 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h4><p><code>对象原型proto  和 构造函数prototype原型对象中，里面有一个constructor属性</code><br><code>constructor我们称为构造函数，因为它指回构造函数本身</code><br><strong>目的：</strong><code>主要是记录该对象引用哪个构造函数，它可以让原型对象重新指向原来的构造函数</code><br><strong>注意:</strong><br><code>1.上面被注释起来的意思是  Star的原型对象prototype的sing方法，是将sing方法添加进入原型对象自带的方法中</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sing</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dance</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123; &#125;</span><br></pre></td></tr></table></figure><p><code>2.当把方法都放在prototype对象中时，prototype对象 = 那些方法，而那些方法就相当于复制给了prototype对象，因此里面原本存在的constructor方法就会被覆盖掉，因此，我们需要自己指回</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Star</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line"><span class="title class_">Star</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">    <span class="attr">constructor</span>:<span class="title class_">Star</span></span><br><span class="line">    <span class="attr">sing</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="attr">dance</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>3.手动指回：</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">constructor：构造函数名</span><br></pre></td></tr></table></figure><h4 id="对象原型-proto"><a href="#对象原型-proto" class="headerlink" title="对象原型_ _ proto _ _"></a>对象原型_ _ proto _ _</h4><p>1.对象都会有一个<code> _ _ proto _ _</code>属性，指向构造函数的<code>prototype</code>原型对象<br>2.<code>_ _ proto _ _</code>的存在，就可以直接去构造函数原型对象<code>prototype</code>中找<br><strong>注意:</strong><br>1.<code>_ _proto_ _</code>是<code>js</code>非标准属性<br>2.<code>[[prototype]]和_ _proto_ _意义相同</code><br>3.<code>用来表明当前实例对象指向哪个原型对象</code><br>4.<code>_ _proto_ _对象原型里面也有一个constructor属性，指向创建该实例对象的构造函数</code></p><h4 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h4><p>父构造函数   子构造函数<br>子类的原型对象 &#x3D;  new  父类</p><h4 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h4><p>原型链就是一个查找规则,遵循就近原则<br><code>每一个实例对象都会有自己的原型，而原型的也是对象，那么它也拥有自己的原型，以此类推形成的链式结构，我们称为原型链</code></p><p><code>instanceof</code>检测构造函数的原型对象是否出现在某个对象的原型链上<br>语法：实例对象 <code>instanceof </code>构造函数</p><h4 id="扩展内置对象"><a href="#扩展内置对象" class="headerlink" title="扩展内置对象"></a>扩展内置对象</h4><p>可以通过原型对象，对原来的内置对象进行扩展自定义方法，比如给数组增加自定义求偶数和的功能<br><strong>注意：</strong><br>1.<code>数组和字符内置对象不能给原型对象覆盖操作Array.prototype = &#123;&#125;</code><br>2.<code>只能Array.prototype.xxx = function() &#123;&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript高级 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript高级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>npm和跨域</title>
      <link href="/star/2023/0720448.html"/>
      <url>/star/2023/0720448.html</url>
      
        <content type="html"><![CDATA[<h1 id="npm和跨域"><a href="#npm和跨域" class="headerlink" title="npm和跨域"></a><code>npm</code>和跨域</h1><p><code>这篇主要总结了npm的使用以及对跨域的解释</code></p><span id="more"></span><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a><code>npm</code></h2><p><strong>是什么？</strong>包管理工具<br>作用：下载&#x2F;删除&#x2F;更新包</p><h3 id="使用流程"><a href="#使用流程" class="headerlink" title="使用流程"></a>使用流程</h3><p><strong>1.初始化<code>npm</code></strong><br> 在你的项目根目录下：<code>npm init -y</code><br> 会生成项目的配置文件：<code>package.json</code></p><p><strong>2.下载(安装)包</strong> ： <code>npm install</code> 包名  或者 <code>npm install</code> 包名@版本号<br> 1.去<code>npm</code>官网搜索这个包名<br> 2.如果可以搜索到，就会找这个包的下载地址<br> 3.下载包的一切资源<br> 4.生成<code>node_modules</code>文件夹 和 <code>package-lock.json</code>文件</p><p><strong>3.使用包</strong></p><p>模块化语法导入包<br>语法去官网查看</p><p><code>package.json</code>:项目配置文件，记录项目信息，使用哪些包及版本node_modules:包资源文件夹，存放包所有的资源及对应的依赖包<br><code>package-lock.json</code>:记录包的下载地址，提高包的更新速度</p><h3 id="npm包的种类"><a href="#npm包的种类" class="headerlink" title="npm包的种类"></a><code>npm</code>包的种类</h3><p><code>npm</code>包根据使用范围分为全局包和本地包<br>本地包又根据使用时间分为开发依赖包和生产依赖包</p><h4 id="全局包"><a href="#全局包" class="headerlink" title="全局包"></a>全局包</h4><p>安装在c盘，对整个电脑生效<br>语法：<code>npm install 包名 -g</code></p><h4 id="本地包"><a href="#本地包" class="headerlink" title="本地包"></a>本地包</h4><p>安装在项目node_modules中<br>语法：<code>npm install 包名</code></p><p>开发依赖包：包只在开发阶段使用，在上线之后不需要使用了<br>语法：<code>npm i 包名 -D</code></p><p>生产依赖包：即在开发阶段使用，也会在上线之后使用</p><h3 id="npm命令总结"><a href="#npm命令总结" class="headerlink" title="npm命令总结"></a><code>npm</code>命令总结</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">初始化npm                 npm init -y</span><br><span class="line">下载包                         npm i 包名</span><br><span class="line">根据package.json下载所有的包    npm i</span><br><span class="line">切换镜源  npm inpm config set registry=https://registry.npmmirror.com/   淘宝镜像源          npm config set registry https://registry.npm.taobao.org/    </span><br><span class="line">查看镜像源            npm config list    </span><br><span class="line">删除包                         npm  uninstall 包名</span><br><span class="line">下载全局包                 npm i 包名 -g</span><br><span class="line">下载开发依赖包         npm i 包名 -D</span><br><span class="line">更新你电脑当前的     npm  npm install npm -g</span><br><span class="line">查看node安装目录   where node</span><br><span class="line">查看npm安装目录    where npm</span><br><span class="line">查看全局包安装路径 npm list -g --deptch</span><br></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>是什么？<strong>指 <code>ajax</code>地址 和 页面地址 不同源</strong></p><p><strong>注意：</strong><br><code>ajax</code>地址：跨域只会出现在<code>ajax</code>请求中<br>页面地址：<code>location.href </code></p><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>两个地址的 协议名 域名 端口号 都一致</p><p><strong>为什么会有同源策略？</strong><br>为了用户安全，如果<code>ajax</code>地址 与 页面地址不同源，浏览器认为你给不同的服务器发送请求，可能会遭受攻击，浏览器就拒绝接收服务器响应的数据</p><p>跨域的过程：请求发出去了，服务器也接收了，服务器也响应了，但浏览器拒绝接收服务器数据</p><p>如何解决跨域？<br>1<code>.CORS </code>             <code>res.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;*&#39;)</code><br>2.jsonp技术<br>3.代理服务器</p>]]></content>
      
      
      <categories>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6模块化和Webpack</title>
      <link href="/star/2023/072035.html"/>
      <url>/star/2023/072035.html</url>
      
        <content type="html"><![CDATA[<h1 id="ES6模块化和Webpack"><a href="#ES6模块化和Webpack" class="headerlink" title="ES6模块化和Webpack"></a>ES6模块化和Webpack</h1><p><code>这篇总结主要讲解了ES6模块化和CommonJS模块化以及Webpack</code></p><span id="more"></span><h2 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h2><h4 id="默认导入导出"><a href="#默认导入导出" class="headerlink" title="默认导入导出"></a>默认导入导出</h4><p>导出：export default 对象<br>导入：import 对象名 from ‘js文件路径’</p><p><strong>注意</strong>：<br>变量名应该与文件名一致<br>export default在同一个页面只能使用一次</p><h4 id="按需导入导出"><a href="#按需导入导出" class="headerlink" title="按需导入导出"></a>按需导入导出</h4><p>导出：export  const 变量名  &#x3D;  值<br>导入：import {变量名1，变量名2} from ‘js文件路径’<br>修改别名：import {变量名 as 新名称} from ‘js文件路径’</p><p>注意：<br>按需导出可以导出多次<br>按需导出 和 默认导出 是相互独立，互不影响，因此他们是可以同时使用</p><h4 id="统一导入导出"><a href="#统一导入导出" class="headerlink" title="统一导入导出"></a>统一导入导出</h4><p>统一导出：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> nam = <span class="string">&#x27;3&#x27;</span></span><br><span class="line"><span class="keyword">const</span> ag = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> se = <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">export</span> &#123;nam,ag,se&#125;</span><br></pre></td></tr></table></figure><p>统一导入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&#x27;./toods.js&#x27;</span></span><br></pre></td></tr></table></figure><p>这里的m会拿到export 所有导出数据，产生一个对象<br>不要去和按需导出同时使用</p><h2 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h2><p>是什么？是一个静态模块打包工具<br>作用：压缩与混淆 代码</p><p><strong>使用流程：</strong><br>第一步：初始化npm 和 安装局部开发依赖的webpack<br>npm init -y      npm i webpack webpack-cli -D<br>第二步：在项目的根目录下打开终端 ，输入打包命令：npx webpack</p><p>默认入口文件: .&#x2F;src&#x2F;index.js<br>默认出口文件: .&#x2F;dist&#x2F;main.js<br>webpack只会打包入口文件，如果要打包其他文件，则需要与入口文件生成依赖关系</p><h4 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h4><p><strong>1.根目录下新建文件</strong>：webpack.config.js</p><p><strong>2.导出配置对象</strong>：module.exports &#x3D; { 配置项 }</p><p><strong>3.常用配置项</strong>：<br>打包模式mode：默认production，生产模式(压缩版本)<br>                              development，开发模式(不压缩)<br>入口文件：entry:’文件路径’<br>出口文件：output:{path:’文件夹路径’，filename:’文件路径’}</p><p><strong>示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="comment">//webpack.config.js文件下</span></span><br><span class="line"><span class="comment">//node导出语法</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//打包模式  开发版(不压缩) 而production则是生产模式(压缩版)</span></span><br><span class="line">    <span class="attr">mode</span>:development,</span><br><span class="line">    <span class="comment">//设置入口文档</span></span><br><span class="line">    <span class="attr">entry</span>:<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/src/tool.js`</span>,</span><br><span class="line">    <span class="comment">//设置出口文档</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//设置出口文档文件夹</span></span><br><span class="line">        <span class="attr">path</span>:<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/aaa`</span>,</span><br><span class="line">        <span class="comment">//设置出口文档文件</span></span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&#x27;out.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123; <span class="comment">// 打包输出HTML</span></span><br><span class="line">             <span class="attr">minify</span>: &#123; <span class="comment">// 压缩HTML文件</span></span><br><span class="line">              <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">// 移除HTML中的注释</span></span><br><span class="line">              <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">// 删除空白符与换行符</span></span><br><span class="line">                 <span class="attr">minifyCSS</span>: <span class="literal">true</span><span class="comment">// 压缩内联css</span></span><br><span class="line">             &#125;,</span><br><span class="line">             <span class="attr">template</span>: <span class="string">`./public/index.html`</span> </span><br><span class="line">            <span class="comment">// 指定压缩哪一个html文件, 相对于根目录</span></span><br><span class="line">         &#125;)</span><br><span class="line">     ],</span><br><span class="line">     <span class="attr">module</span>:&#123; <span class="comment">// 处理非js模块</span></span><br><span class="line">        <span class="attr">rules</span>:[ <span class="comment">// 规则</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 正则测试</span></span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>] <span class="comment">// loader</span></span><br><span class="line">          &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,     <span class="comment">// 正则匹配，以.less结尾的文件</span></span><br><span class="line">    <span class="comment">// 如果发现是.less文件，则由如下三个loader来处理</span></span><br><span class="line">    <span class="comment">// 处理的顺序是   从右向左</span></span><br><span class="line">    <span class="comment">// less-loader: 作用是加载less文件，会帮你less转成css</span></span><br><span class="line">    <span class="comment">// css-loader: 作用是允许.js中引入.css</span></span><br><span class="line">    <span class="comment">// style-loader:作用是在.html上创建style标签，把css代码输入进去</span></span><br><span class="line">    <span class="attr">use</span>: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>] <span class="comment">// 匹配成功，使用指定的loader</span></span><br><span class="line">&#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.npm run build 与 npm run dev 配置</strong><br>package.json的script对象中:   “build” : “webpack”<br>相当于给node环境增加一个命令：<strong>npm run build</strong><br><strong>作用是按照webpack.config.js文件配置对项目进行打包</strong></p><p>package.json的script对象中:   “dev” : “webpack –config vue.config.js”<br>相当于给node环境增加一个命令：<strong>npm run dev</strong><br><strong>作用是按照vue.config.js文件配置对项目进行打包</strong></p><h4 id="npm-run-build-打包流程"><a href="#npm-run-build-打包流程" class="headerlink" title="npm run build 打包流程"></a>npm run build 打包流程</h4><p>1.他会先去package.json中找build配置<br>2.如果有，就读取build配置，并执行真正的webpack命令：npx webpack 配置文件。反之报错<br>3.检查有没有配置文件，如果有就优先加载设置的配置文件，如果没有就加载默认配置文件webpack.config.js<br>4.根据配置文件得到配置参数<br>5.根据配置参数找到入口文件，并开始构建依赖关系图<br>6.开始打包：压缩，混淆<br>7.将打包后的代码放入配置参数的出口文件中</p><h4 id="loader与plugin的区别"><a href="#loader与plugin的区别" class="headerlink" title="loader与plugin的区别"></a>loader与plugin的区别</h4><p>loader作用：让webpack能够处理非js和json文件（默认情况下，webpack只能处理js和json文件，项目中其他类型的文件就需要使用loader来处理）</p><p>plugin作用：执行范围更广的任务，例如：打包优化，资源管理，注入环境变量</p>]]></content>
      
      
      <categories>
          
          <category> Webpack </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础</title>
      <link href="/star/2023/072032906.html"/>
      <url>/star/2023/072032906.html</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><p><code>本篇主要是git版本管理工具的注册,使用,符号的代表含义，以及其他的git操作</code></p><span id="more"></span><p><strong>是什么？</strong>git是一个版本管理工具</p><p>下载地址：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><p>配置用户信息</p><p>1.安装完git之后，要做的第一件事情就是设置自己的 用户名 和 邮件地址<br>相当于是登录git账号操作<br>2.<code>如何获取git账号</code> :   可以在 码云注册一个账号<br>码云地址：<a href="https://gitee.com/">https://gitee.com/</a></p><p>3.<code>配置用户信息命令如下</code>：<br>git config –global user.email “你的码云账号邮箱”<br>git config –global user.name “你的码云用户名(可以随便写)”</p><h2 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h2><p><strong>git分为工作区，暂存区，git仓库</strong><br><code>工作区</code>：处理工作的区域<br><code>暂存区</code>：已完成的工作的临时存放区域，等待被提交<br><code>git仓库</code>：最终的存放区域</p><p><code>文件右边出现U        则表示这个文件是新增的    此时需要初始化仓库</code><br><code>文件右边出现        A         则表示这个文件已放入暂存区 </code><br><code>文件右边A消失，则代表本次文档已结束</code><br><code>文件右边出现       M         则表示这个文件已修改</code></p><p><strong>git init</strong>             初始化git仓库<br><strong>git add .</strong>           把你的代码放入暂存区<br><strong>git commit -m”描述信息”</strong>    你的暂存区代码的描述信息，且把这个暂存区                          的文件提交到本地仓库中<br><strong>git log</strong>    查看详细存档日志   配合Enter键查询    Q键退出<br><strong>git log –oneline</strong>       查看简略版的存档日志   与git  reset –hard配合使用<br><strong>git reset –hard 版本号</strong>        可以让你的文件回退到历史某一个版本</p><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><p><strong>是什么</strong>？远程仓库其实就是远程的服务器，帮助我们存储代码</p><p><strong>git clone ‘远程仓库地址’</strong>     克隆远程仓库      把远程仓库所有文件下载到本地<br><strong>git push</strong>     推送代码到远程仓库           把当前电脑已经commit过的代码上传到远程仓库<br><strong>git pull</strong>       拉取远程仓库别人的代码到本地         把远程仓库上别人push的代码同步到自己的本地电脑(只有多人开发才生效)</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.在远程服务器上(码云)上新建仓库<br>2.git clone 远程仓库地址    把远程仓库下载到本地<br>3.git add .    代码添加到暂存区<br>4.git commit -m”描述信息”    提交文档到本地仓库<br>5.git push  把本地仓库的代码提交到远程仓库     一定要先添加到本地仓库了，才能进行提交至远程仓库<br>6.git pull     把远程仓库上别人push的代码同步到自己的本地电脑(只有多人开发才生效)</p><h3 id="远程仓库SSH配置"><a href="#远程仓库SSH配置" class="headerlink" title="远程仓库SSH配置"></a>远程仓库SSH配置</h3><h4 id="1-远程仓库有两种访问方式，分别是HTTPS与SSH"><a href="#1-远程仓库有两种访问方式，分别是HTTPS与SSH" class="headerlink" title="1,远程仓库有两种访问方式，分别是HTTPS与SSH"></a>1,远程仓库有两种访问方式，分别是<code>HTTPS</code>与<code>SSH</code></h4><p>HTTPS：<code>零配置</code>；但是每次访问仓库时，需要重复输入 Github 的账号和密码才能访问成功</p><p>SSH：<code>需要进行额外的配置</code>；但是配置成功后，每次访问仓库时，不需重复输入 Github 的账号和密码</p><p>实际开发推荐使用SSH方式访问远程仓库</p><h4 id="2-SSH-介绍"><a href="#2-SSH-介绍" class="headerlink" title="2.SSH 介绍"></a>2.SSH 介绍</h4><p>SSH key 的作用：实现本地仓库和 Github 之间免登录的加密数据传输。</p><p>SSH key 的好处：免登录身份认证、数据加密传输。</p><p>SSH key 由两部分组成，分别是：</p><ul><li>id_rsa（私钥文件，存放于客户端的电脑中即可）</li><li>id_rsa.pub（公钥文件，需要配置到 Github 中）</li></ul><h4 id="3-SSH配置流程"><a href="#3-SSH配置流程" class="headerlink" title="3.SSH配置流程"></a>3.SSH配置流程</h4><p>(1)打开 Git Bash</p><p>(2)输入命令： ssh-keygen -t rsa -b 4096 -C “你的码云邮箱”</p><p>(3)连续敲击 3 次回车，即可在 C:\Users\用户名文件夹.ssh 目录中生成 id_rsa 和 id_rsa.pub 两个文件</p><p><img src="E:/ajax/05-88期可视化/01-课程笔记/01-Git教程.assets/1652210047075.png" alt="1652210047075"></p><p>(4)使用记事本打开 id_rsa.pub 文件，复制里面的文本内容</p><p>(5)在你的远程仓库网址, <code>点击头像 -&gt; 设置 -&gt; SSH 公钥 -&gt; 粘贴</code></p><p><img src="E:/ajax/05-88期可视化/01-课程笔记/01-Git教程.assets/1652210095270.png" alt="1652210095270"></p><h3 id="远程仓库使用流程总结"><a href="#远程仓库使用流程总结" class="headerlink" title="远程仓库使用流程总结"></a>远程仓库使用流程总结</h3><p><img src="E:/ajax/05-88期可视化/01-课程笔记/01-Git教程.assets/1570506312447.png" alt="1570506312447"></p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p><strong>git branch 分支名</strong>    新建分支名     分支名不需要加引号<br><strong>git checkout 分支名</strong>   切换分支名<br>**git merge ** 分支名      合并分支</p><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><p>1.创建分支 git branch 分支名<br>2.切换分支  git  checkout  分支名<br>3.查看当前分支 git  branch<br>4.切换到你创建分支之后，你就可以开始写你的代码，照样通过以前的方式进行  文件放入暂存区&#x3D;&gt;文件提交给本地仓库&#x3D;&gt;文件上传至远程仓库<br>示例：git add . &#x3D;&gt; git commit -m”文件信息” &#x3D;&gt;git push  通过反复操作，完善分支文件功能<br>5.当文件反复进行上传，直到你完成这个分支的所有功能,此时你就能进行主支与分支合并<br>6.先通过git checkout  主支(master)，切换到主支上，通过git merge 分支名<br>将分支新写的功能合并到主支<br>7.然后通过git add .放入本地暂存区，通过git commit -m”文件信息” ，将文件提交给本地仓库，最后git push提交给远程仓库，就ok了</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax</title>
      <link href="/star/2023/072037406.html"/>
      <url>/star/2023/072037406.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax概念"><a href="#Ajax概念" class="headerlink" title="Ajax概念"></a>Ajax概念</h1><p><code>该文章总结了ajax知识+axios请求的发送+Promise+事件循环+文件上传等知识</code></p><span id="more"></span><h2 id="1-前后端交互流程"><a href="#1-前后端交互流程" class="headerlink" title="1. 前后端交互流程"></a>1. 前后端交互流程</h2><p>浏览器发送请求<br>服务器处理请求<br>服务器响应数据</p><h2 id="2-ajax"><a href="#2-ajax" class="headerlink" title="2. ajax"></a>2. <code>ajax</code></h2><p>是什么？在页面不刷新的情况下，向服务器请求数据<br>作用：页面的局部刷新</p><h2 id="3-接口文档三要素"><a href="#3-接口文档三要素" class="headerlink" title="3. 接口文档三要素"></a>3. 接口文档三要素</h2><p><code>url</code>：统一资源定位符<br><code>method</code>：请求方法<br>请求参数：浏览器发给服务器的额外参数</p><h2 id="4-浏览器访问服务器的4种方式"><a href="#4-浏览器访问服务器的4种方式" class="headerlink" title="4. 浏览器访问服务器的4种方式"></a>4. 浏览器访问服务器的4种方式</h2><p>直接在浏览器中输入网址<br>标签<code>href，src</code>属性<br><code>location.href = &#39;网址&#39;</code><br><code>ajax技术</code></p><h2 id="5-url组成部分"><a href="#5-url组成部分" class="headerlink" title="5.url组成部分"></a>5.<code>url</code>组成部分</h2><p>是什么？统一资源定位符<br>协议  域名  端口号  资源存放路径</p><h2 id="6-HTTP协议"><a href="#6-HTTP协议" class="headerlink" title="6. HTTP协议"></a>6. <code>HTTP协议</code></h2><p>是什么?网络传输协议<br>作用：约定浏览器数据格式<br>组成部分：请求报文和响应报文</p><h3 id="6-1请求报文"><a href="#6-1请求报文" class="headerlink" title="6.1请求报文"></a>6.1请求报文</h3><p>是什么？浏览器发送给服务器的数据的格式    请求行+请求头+请求体<br>请求行：请求方法+<code>URL</code><br>请求头：浏览器发送的数据格式，有json格式和文件格式<br>请求体：<code>send</code>中请求的参数</p><h3 id="6-2响应报文"><a href="#6-2响应报文" class="headerlink" title="6.2响应报文"></a>6.2响应报文</h3><p><strong>是什么？</strong>服务器响应浏览器数据的格式   响应行+响应头+响应体<br><strong>响应行</strong>：响应状态码，服务器<code>IP</code><br><strong>响应状态码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2xx  请求成功 </span><br><span class="line">3xx  重定向(服务器主动修改浏览器地址)      302重定向</span><br><span class="line">4xx   前端出错 </span><br><span class="line">400参数错误  </span><br><span class="line">401未验证(用户未登录)  </span><br><span class="line">403没有权限(用户没有权限访问，例如vip功能)     </span><br><span class="line">404响应行错误</span><br><span class="line">413文件大小超出限制</span><br><span class="line">5xx   服务器出错(后端出错)</span><br><span class="line">502服务器维护</span><br></pre></td></tr></table></figure><p>响应头：服务器响应的数据格式<br>响应体：<code>response</code>   响应回来的数据</p><h2 id="7-get和post区别"><a href="#7-get和post区别" class="headerlink" title="7. get和post区别"></a>7. <code>get</code>和<code>post</code>区别</h2><p><strong>1.传参方式不同</strong><br>get：直接url后面拼接(请求行)，url发送过去了，那么参数就过去了<br>post：请求体中传输，会切片，数据流传输</p><p><strong>2.传参速度不同</strong><br>get速度快</p><p><strong>3.数据大小不同</strong><br>get有大小限制<br>post没有大小限制，想传多少传多少</p><p><strong>4.安全性不同</strong><br>get是一次性传输，数据容易被一次性拦截，安全性低<br>post由于切片，数据一点一点的传，安全性高</p><h1 id="Ajax代码流程"><a href="#Ajax代码流程" class="headerlink" title="Ajax代码流程"></a>Ajax代码流程</h1><h4 id="原生XMLHttpRequest工作流程"><a href="#原生XMLHttpRequest工作流程" class="headerlink" title="原生XMLHttpRequest工作流程"></a>原生<code>XMLHttpRequest</code>工作流程</h4><p>作用：发送ajax请求的   请求request  响应response</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p>1.创建XML对象实例<br>2.设置请求<br>3.发送请求<br>4.注册回调函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例 </span></span><br><span class="line"><span class="comment">//创建xhr实例</span></span><br><span class="line"> <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line"> <span class="comment">//设置请求</span></span><br><span class="line"> xhr.<span class="title function_">open</span>(‘请求方式’,<span class="string">&#x27;url地址&#x27;</span>)</span><br><span class="line"> <span class="comment">//发送请求</span></span><br><span class="line"> xhr.<span class="title function_">send</span>()</span><br><span class="line"> <span class="comment">//注册响应事件</span></span><br><span class="line"> xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><p><strong>1.<code>get</code>请求</strong><br><code>get</code>方法进行传参，例如： <code>xhr.open(&#39;请求方式&#39;,&#39;url地址？参数名=参数值&#39;)</code></p><p><strong>2.<code>post</code>请求</strong><br>post方法进行传参，需要把参数写在xhr.send()中<br>第一步：设置一个固定的请求头<br><code>xhr.setRequestHeader(...)</code><br>第二步：<code>xhr.send(&#39;参数名=参数值&amp;参数名=参数值&#39;)</code></p><h2 id="axios第三方库工作流程"><a href="#axios第三方库工作流程" class="headerlink" title="axios第三方库工作流程"></a>axios第三方库工作流程</h2><h4 id="1-基地址"><a href="#1-基地址" class="headerlink" title="1.基地址"></a>1.基地址</h4><p><code>axios.defaults.baseURL = &#39;基地值&#39;</code><br><code>简化url，axios会自动拼接</code></p><p><strong>注意</strong>：基地址只能设置一个</p><h4 id="2-ajax请求数据的5种方式"><a href="#2-ajax请求数据的5种方式" class="headerlink" title="2.ajax请求数据的5种方式"></a>2.<code>ajax</code>请求数据的5种方式</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">增post  </span><br><span class="line">删delete  </span><br><span class="line">改：</span><br><span class="line">全局改put    </span><br><span class="line">局部改path  </span><br><span class="line">查get</span><br></pre></td></tr></table></figure><p><strong>三种传参方式</strong>：<br><code>请求行传参：axios.delete(&#39;路径&#39;, &#123; params:&#123; 参数名:参数值&#125;  &#125;  )</code><br><code>请求体传参：axios.delete(&#39;路径&#39;, &#123; data:&#123; 参数名:参数值&#125;  &#125;  )</code><br><code>路径参数：axios.delete(&#39;url路径/参数值&#39;)</code></p><p>主要是看接口文档</p><h4 id="发送axios方式1"><a href="#发送axios方式1" class="headerlink" title="发送axios方式1"></a>发送<code>axios</code>方式1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">        <span class="attr">method</span>:<span class="string">&#x27;请求方法&#x27;</span>,</span><br><span class="line">        <span class="attr">url</span>:<span class="string">&#x27;请求路径&#x27;</span>,</span><br><span class="line">        <span class="attr">params</span>:&#123;参数名:‘参数值’ (get参数)&#125;,</span><br><span class="line">        <span class="attr">data</span>:&#123;</span><br><span class="line">             属性名：‘属性值’,</span><br><span class="line">             属性名：‘属性值’</span><br><span class="line">       (post参数)&#125;</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        成功的回调</span><br><span class="line"> &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>失败的回调 error就是错误的信息)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br><code>1.在axios中，res并不是服务器响应的数据，而是axios自己包的对象</code><br><code>2.res.data:真正的服务器响应的数据</code><br><code>3.then方法底层自动给你转JSON</code><br><code>4.方法是get，可以省略不写</code></p><h4 id="发送axios方式2"><a href="#发送axios方式2" class="headerlink" title="发送axios方式2"></a>发送<code>axios</code>方式2</h4><p>发送get请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;请求路径&#x27;</span>,&#123;<span class="attr">params</span>:&#123;get参数&#125;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><p>发送post请求</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;请求路径&#x27;</span>,&#123;post参数&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;&#125;)</span><br></pre></td></tr></table></figure><h4 id="文件上传FormData"><a href="#文件上传FormData" class="headerlink" title="文件上传FormData()"></a>文件上传<code>FormData()</code></h4><p><strong>步骤</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">给file表单注册一个change事件</span><br><span class="line">1.获取文件数据：this.files[0]</span><br><span class="line"></span><br><span class="line">2.使用formdata处理文件</span><br><span class="line">const fd = new FormData()</span><br><span class="line">fd.append(&#x27;参数名‘，参数值)</span><br><span class="line">a.修改请求头为文件格式</span><br><span class="line">b.把file对象转化成二进制</span><br><span class="line"></span><br><span class="line">3.发送ajax请求，参数就是fd</span><br><span class="line"></span><br><span class="line">4.服务器响应图片地址，赋值给img标签src属性</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.upload&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>,<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> fd = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">      fd.<span class="title function_">append</span>(<span class="string">&#x27;img&#x27;</span>,<span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>])</span><br><span class="line">      axios.<span class="title function_">post</span>(<span class="string">&#x27;http://hmajax.itheima.net/api/uploadimg&#x27;</span>,fd).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.my-img&#x27;</span>).<span class="property">src</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">url</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="文件预览步骤"><a href="#文件预览步骤" class="headerlink" title="文件预览步骤"></a>文件预览步骤</h4><p>文件预览: 给file表单注册一个change事件<br>1.获取文件数据    this.files[0]<br><code>2.内置对象把file转成url     URL.createObjectURL( file对象 )</code><br>3.把本地url赋值给img标签src属性</p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><p><strong>是什么？</strong>本质是一个构造函数，里面保存着某个未来才会结束的事件<br><strong>作用</strong>：解决回调地狱<br>如何解决？(方法1，现在基本不用这种方法，下面会说新的方法)<br><code>promise是通过链式调用来解决回调地狱</code><br><code>链式调用：在上一个then里面，返回下一个promise实例，就可以在后面继续.then</code></p><h3 id="promise的工作原理"><a href="#promise的工作原理" class="headerlink" title="promise的工作原理"></a>promise的工作原理</h3><p><strong>promise原理</strong>：<br>        (1)promise对象有三个状态.<br>            a. pending（进行中）<br>            b. fulfilled（已成功）<br>            c. rejected（已失败）<br>        (2)Promise对象的状态改变， 只有两种可能：<br>            a. resolve()：从pending变为fulfilled<br>            b. 执行 reject()：从pending变为rejected<br>        (3)promise在创建实例的时候,里面的代码会立即执行.<br>            promise自己是同步的,只有then方法才是异步的</p><h3 id="promise其他语法"><a href="#promise其他语法" class="headerlink" title="promise其他语法"></a>promise其他语法</h3><p><strong>静态方法<code>Promise.all([p1,p2,p3])</code></strong><br><code>Promise.all() </code>: 将多个promise合并成一个,等待所有promise全部执行完毕才会执行then</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1,p2,p3])</span><br><span class="line">       p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res)   <span class="comment">//返回的数组</span></span><br><span class="line">       &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">       &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完成&#x27;</span>)</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p><strong>静态方法<code>Promise.race([p1,p2,p3])</code></strong><br><code>Promise.race()</code>: 将多个promise合并成一个,谁先成功，promise执行完毕就执行then，如果有一个失败，则会走catch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p4 = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1,p2,p3])</span><br><span class="line">      p4.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">      &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;完成&#x27;</span>)</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure><p><code>.then().cath().finally()</code></p><h2 id="async异步函数"><a href="#async异步函数" class="headerlink" title="async异步函数"></a><code>async</code>异步函数</h2><h4 id="async-await"><a href="#async-await" class="headerlink" title="async  &#x2F;   await"></a><code>async</code>  &#x2F;   <code>await</code></h4><p><code>async</code>作用：修饰函数，让函数内部使用await<br>await  作用：取代then  并且拿到then的结果        他仅仅只是<strong>取代了</strong>promise中的then , 而<strong>未取代catch</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//语法</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span>  函数名() &#123;</span><br><span class="line">    <span class="keyword">const</span>  res = <span class="keyword">await</span>  p</span><br><span class="line">&#125;</span><br><span class="line">函数名()</span><br></pre></td></tr></table></figure><h4 id="await和promise互换"><a href="#await和promise互换" class="headerlink" title="await和promise互换"></a>await和promise互换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> res = <span class="keyword">await</span>  后面的代码</span><br><span class="line">下面的代码</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">promise</span>(resolve,reject)=&gt;&#123;</span><br><span class="line">          <span class="title function_">resolve</span>(后面的代码)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">            下面的代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios底层原理"><a href="#axios底层原理" class="headerlink" title="axios底层原理"></a><code>axios</code>底层原理</h2><p>当我们掌握promise和<code>ajax</code>请求的发送，你就可以大概的写出<code>axios</code>的底层了</p><p><strong><code>axios</code>底层原理</strong> : promise + <code>XMLHttpRequest</code><br>    (1)<code>axios方法本质是返回一个Promise对象</code><br>    (2)<code>promise内部是原生XHR发送Ajax请求</code><br>    (3)请求成功用resolve返回给Promise对象结果给外面then</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写一个类似于axios的get方法</span></span><br><span class="line"><span class="keyword">const</span> lywaxios = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">url</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">            xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,url)<span class="comment">//拿到形参url</span></span><br><span class="line">            xhr.<span class="title function_">send</span>()</span><br><span class="line">            xhr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">response</span>))</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用1</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">const</span> res = <span class="keyword">await</span> lywaxios.<span class="title function_">get</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>)</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">//调用2</span></span><br><span class="line">lywaxios.<span class="title function_">get</span>(<span class="string">&#x27;http://123.57.109.30:3999/api/categoryfirst&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure><p><strong>你看看调用方式2是否与你使用的<code>axios</code>有点相似</strong></p><h2 id="try-catch"><a href="#try-catch" class="headerlink" title="try&#x2F;catch"></a>try&#x2F;catch</h2><p>Error()对象      内置对象，错误信息<br>throw关键字    抛出异常，可以让控制台变红。throw错误信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">throw</span>  <span class="string">&#x27;错误信息&#x27;</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  <span class="comment">//无论成功或失败都会执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>场景<br>结束forEach循环<br>捕捉await错误信息</p><h2 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h2><h4 id="异步代码"><a href="#异步代码" class="headerlink" title="异步代码"></a>异步代码</h4><p><strong>微任务</strong>       promise的then     await下面的代码</p><p><strong>宏任务</strong>         script标签          事件处理            函数定时器      ajax</p><p>js是一门单线程的语言</p><p>所有的同步任务都在主线程上执行，行成一个执行栈。</p><p>除了主线程之外，还存在一个任务列队，只要异步任务有了运行结果，就在任务列队中植入一个时间标记。</p><p>主线程完成所有任务(执行栈清空），就会读取任务列队，先执行微任务队列在执行宏任务队列。</p><p>重复上面三步。</p><p> 只要主线程空了，就会读取任务列队，这就是js的运行机制，也被称为 event loop（事件循环）</p>]]></content>
      
      
      <categories>
          
          <category> Ajax </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript进阶 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-移动端第一篇</title>
      <link href="/star/2023/07205.html"/>
      <url>/star/2023/07205.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-移动端第一篇"><a href="#CSS-移动端第一篇" class="headerlink" title="CSS-移动端第一篇"></a>CSS-移动端第一篇</h1><p><code>CSS-移动端第一篇这篇笔记主要总结了2D+3D+flex布局+CSS移动端</code></p><span id="more"></span><h2 id="1-字体图标-平面转换-渐变"><a href="#1-字体图标-平面转换-渐变" class="headerlink" title="1.字体图标&#x2F;平面转换&#x2F;渐变"></a>1.字体图标&#x2F;平面转换&#x2F;渐变</h2><h3 id="1-1-字体图标"><a href="#1-1-字体图标" class="headerlink" title="1.1 字体图标"></a>1.1 字体图标</h3><p><strong>作用</strong>：取代了精灵图， 展示的是图标，本质是字体<br><strong>线下用法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.利用类名使用(重要)</span><br><span class="line">2.利用伪元素使用</span><br><span class="line">3.利用unicode使用</span><br></pre></td></tr></table></figure><p><strong>线上用法</strong>：线上的引入方式记得添加http:</p><h3 id="1-2-平面转换"><a href="#1-2-平面转换" class="headerlink" title="1.2 平面转换"></a>1.2 平面转换</h3><h4 id="transform属性"><a href="#transform属性" class="headerlink" title="transform属性"></a>transform属性</h4><p><strong>1.2.1 位移</strong><br>语法：<code>transform:translate(水平移动,垂直移动)</code><br><strong>位移在移动时不占位置，不脱标</strong><br>取值：px 或者 百分比(参照物是以自身的大小)<br>盒子垂直水平居中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">方法1：子绝父相+margin:left/top;  固定宽高的盒子居中</span><br><span class="line">方法2：子绝父相+transfrom</span><br><span class="line">方法3：子绝父相(子盒子上下左右都赋值为0)+margin:auto;</span><br></pre></td></tr></table></figure><p><strong>1.2.2 旋转</strong><br>语法：<code>transform:rotate(角度)  </code><br>角度单位：<code>deg 度</code>,<code>turn 圈</code><br><strong>正值是顺时针，负值是逆时针</strong></p><p><strong>1.2.3 转换原点</strong><br>语法：<code>transform-origin:原点水平位置，原点垂直位置;</code><br>取值：<code>数值px</code>，方位名词，百分比</p><p><strong>1.2.4 缩放</strong><br><strong>语法</strong>：<code>transform:scale(x轴缩放倍数,y轴缩放倍数)</code><br>一般情况，只为scale设置一个值，表示x，y轴等比缩放<br><strong>语法</strong>：transform:scale(2)<br>倍数1以上和倍数-1以上的值是放大，倍数1以下和倍数-1以下的值是缩小，不管正负号，只比较值<br>倍数1和倍数-1效果一致，盒子不变<br>图片加了缩放，层级会比定位默认的层级大</p><p><strong>1.2.5 倾斜</strong><br><code>transform:skew(50deg)</code><br>注意：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.正值向右倾斜，负值向左倾斜</span><br><span class="line">2.倾斜会把盒子撑大</span><br><span class="line">3.倾斜的盒子不要为直角</span><br><span class="line">transform复合写法：transform：translate()  rotate() scale() skew();</span><br></pre></td></tr></table></figure><h3 id="1-3-渐变"><a href="#1-3-渐变" class="headerlink" title="1.3 渐变"></a>1.3 渐变</h3><p><strong>线性渐变色</strong>，默认从上往下，开始渐变<br><strong>语法</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">background-image:linear-gradient(颜色1,颜色2);</span><br><span class="line">background-image:linear-gradient(to bottom,颜色1,颜色2);</span><br><span class="line">background-image:linear-gradient(60deg,颜色1,颜色2);</span><br><span class="line">常用写法：background-image:linear-gradient(transparent,rgba(0,0,0,.5));</span><br></pre></td></tr></table></figure><p><strong>径向渐变</strong><br><code>background-image:radial-gradient(颜色1,颜色2);</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">形状1：正方形-&gt;圆形</span><br><span class="line">形状2：长方形-&gt;椭圆</span><br><span class="line">只能从内往外</span><br></pre></td></tr></table></figure><h2 id="2-空间转换-动画"><a href="#2-空间转换-动画" class="headerlink" title="2. 空间转换&#x2F;动画"></a>2. 空间转换&#x2F;动画</h2><p><strong>空间转换(了解</strong>)<br><code>位移</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">transform:translate3d(x,y,z)</span><br><span class="line">z轴在默认状态下无法擦看</span><br><span class="line">解决办法</span><br><span class="line">perspective属性实现透视效果</span><br><span class="line">透视的内容要居中，如果不放在盒子中间，会导致内容发生倾斜</span><br><span class="line">加给父级</span><br><span class="line">perspective：值；   数值一般在800-1200像素</span><br><span class="line">透视不会使盒子变大</span><br></pre></td></tr></table></figure><p><code>旋转</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">transform:rotate3d(x,y,z,角度度数)</span><br><span class="line">取值0-1之间的数字</span><br><span class="line">x轴上下转，正值从下往上转，负值从下往上</span><br><span class="line">y轴左右转，正值从左往右，负值从右往左</span><br><span class="line">z轴，正轴顺时针，负值逆时针</span><br><span class="line">开启3d</span><br><span class="line">transform-style:preserve-3d;</span><br><span class="line">推荐给父元素加</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>缩放</code><br><code>transform:scale3d(倍数)</code></p><p><strong>动画</strong><br>​补间动画</p><p><strong>步骤</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.定义动画</span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称  &#123;</span><br><span class="line">    <span class="selector-tag">from</span> &#123;&#125;</span><br><span class="line">    <span class="selector-tag">to</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> 动画名称  &#123;</span><br><span class="line">    <span class="number">0%</span> &#123;&#125;</span><br><span class="line">    <span class="number">10%</span>&#123;&#125;</span><br><span class="line">    <span class="number">30%</span>&#123;&#125;</span><br><span class="line">    <span class="number">100%</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2.使用动画</span><br><span class="line">animation:动画名称，动画花费时长</span><br><span class="line">animation: 动画名称   持续时间  动画曲线   何时开始   动画重复次数  是否逆向播放 规定动画结束后状态</span><br><span class="line">逐帧动画</span><br><span class="line">steps(帧数)</span><br><span class="line">配合精灵图使用</span><br></pre></td></tr></table></figure><h2 id="3-移动端布局"><a href="#3-移动端布局" class="headerlink" title="3. 移动端布局"></a>3. 移动端布局</h2><h3 id="3-1-移动端需了解的知识"><a href="#3-1-移动端需了解的知识" class="headerlink" title="3.1 移动端需了解的知识"></a>3.1 移动端需了解的知识</h3><p>1.分辨率</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">物理分辨率是生产屏幕时就固定的，它是不可被改变的</span><br><span class="line">逻辑分辨率是由软件（驱动）决定</span><br></pre></td></tr></table></figure><p>2.二倍图<br>3.视口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">布局视口     980px   手机自带</span><br><span class="line">视觉视口     手机设备的大小</span><br><span class="line">理想视口     设备有多宽，网页显示多宽       布局视口+视觉视口保持一致</span><br></pre></td></tr></table></figure><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;移动端视口适配标签    viewport   视口宽度=设备宽度  width=device-width缩放倍数默认一倍  initial-scale=1.0最大缩放倍数为一倍  maximum-scale=1.00和no表示不允许用户缩放，yes表示允许用户缩放  user-scalable=0百分比布局:宽度使用百分比，高度固定</code></pre><h3 id="3-2-flex布局"><a href="#3-2-flex布局" class="headerlink" title="3.2 flex布局"></a>3.2 <code>flex布局</code></h3><p>1.作用<br>​避免浮动布局中脱离文档流现象发生<br>​Flex布局非常适合结构化布局<br>2.<code>不脱标</code><br>3.弹性容器    <code>加入了display:flex;的盒子</code><br>​<code>弹性盒子是弹性容器的子元素</code><br>4.设置方式<br>​<code>给父元素添加  display：flex</code><br>5.弹性盒子不会区分你是否是块级&#x2F;行内&#x2F;行内块元素</p><p><strong>flex排列方式</strong></p><p><strong>1.主轴排列方式</strong><br><code>justify-content属性</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">加在父元素上</span><br><span class="line">flex-end         终点开始依次排列</span><br><span class="line">center           水平居中</span><br><span class="line">space-around     外边距1:2排列盒子，自适应</span><br><span class="line">space-between    两边靠边，中间自适应</span><br><span class="line">space-evenly     外边距1:1排列 自适应</span><br></pre></td></tr></table></figure><p><strong>2.单行侧轴排列方式</strong><br><code>align-items属性</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">加在父元素上</span><br><span class="line">center             沿侧轴居中排列</span><br><span class="line">默认值  stretch     子元素未设高时，子元素高度默认和父元素一致</span><br><span class="line">flex-end           侧轴终点开始排列</span><br><span class="line">flex-start         默认值   侧轴起点排列</span><br></pre></td></tr></table></figure><p><code>align-self</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">加在子元素上</span><br><span class="line">center                沿侧轴居中排列</span><br><span class="line">默认值  stretch        子元素未设高时，子元素高度默认和父元素一致</span><br><span class="line">flex-end              侧轴终点开始排列</span><br><span class="line">flex-start  默认值     侧轴起点排列</span><br></pre></td></tr></table></figure><p><strong>3.伸缩比</strong><br>属性：flex:值；<br>取值：数值(整数)<br>在子元素没设置宽的情况下，这个属性是用来替换宽度的<br><strong>注意</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.只占用父盒子剩余尺寸</span><br><span class="line">2.给子盒子添加</span><br><span class="line">3.比例会优先于宽度生效</span><br></pre></td></tr></table></figure><p><strong>应用场景</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">圣杯布局</span><br><span class="line">左右两边的大小固定不变，中间宽度自适应</span><br><span class="line">给一个宽度最小值</span><br></pre></td></tr></table></figure><p><strong>4.修改主轴方向</strong><br><code>flex-direction属性</code><br><code>row</code>：行, 水平(默认值)<br><code>column</code>：列, 垂直<br><code>row-reverse</code>：行, 从右向左<br><code>column-reverse</code>：列, 从下向上<br><strong>5.弹性盒子换行</strong><br><code>flex-wrap：wrap；</code><br>弹性盒子默认是不换行的<br>换行的前提就是给子盒子设置固定的宽度</p><p><strong>6.多行侧轴排列方式</strong><br><code>align-content</code>:<br><code>center</code>                             垂直居中<br><code>space-around</code>                垂直方向外边距1:2排列盒子，自适应<br><code>space-between</code>              垂直方向两边靠边，中间自适应<br><code>space-evenly </code>                垂直方向外边距1:1排列 自适应</p><h2 id="4-注意点"><a href="#4-注意点" class="headerlink" title="4. 注意点"></a>4. 注意点</h2><p><strong>1.<code>display</code>无法触发过渡</strong></p><p>使用<code>display:none(block)</code>对<code>div</code>的隐藏与显示应用于过渡属性上，但是<code>transition</code>完全失效，没有过渡效果。<br><code>div</code>元素使用<code>display:none(block)</code>实现隐藏与显示的时候，会与<code>transition</code>属性冲突，导致过渡效果无效。<code>display会破坏transition</code>。</p><p>原因:<br><code>display:none</code>的时候，页面文档流中将不会存在该元素，<code>display:block</code>的时候，文档流中才存在该元素。<code>transition</code>属性无法对一个从无到有的元素进行过渡显示。</p><p>解决方案<br>使用<code>visibility</code>替代<code>display</code>，或者<code>opacity</code>也可以</p><p><strong>2.子级为伪元素，必须通过亲父亲进行查找</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bigbox</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">390px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transition</span>: all <span class="number">1s</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.2</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">a</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(transparent,<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>));</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">z-index</span>: <span class="number">99</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::before</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">opacity</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bigbox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/huawei.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/huawei.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/huawei.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3. 涉及陌生单词</strong></p><p><code>evenly</code>   均匀的</p><p><code>space </code>     空间</p><p><code>justify</code>  使每行排齐</p><p><strong>4. <code>flex</code>圣杯布局常用</strong></p><p><code>min-width</code>  最小值  <code>min-with:100px</code>  最小值不会小于100</p><p><code>max-width</code>   最大值     <code>min-with:500px</code>  最大值不会大于500</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-移动端第二篇</title>
      <link href="/star/2023/07206.html"/>
      <url>/star/2023/07206.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-移动端第二篇"><a href="#CSS-移动端第二篇" class="headerlink" title="CSS-移动端第二篇"></a>CSS-移动端第二篇</h1><p><code>本篇文章主要总结了移动端适配+less预处理+BootStrap框架</code></p><span id="more"></span><h2 id="1-移动适配"><a href="#1-移动适配" class="headerlink" title="1. 移动适配"></a>1. 移动适配</h2><p><code>rem</code>     相对单位<br>默认  <code>1rem = 16px</code>，<strong>只跟html的字体大小有关</strong></p><h3 id="如何计算"><a href="#如何计算" class="headerlink" title="如何计算"></a>如何计算</h3><p>1.<code>确定设计稿对应的设备的html标签的字体大小</code><br>2.<code>rem = 你测量的值 / 基准字号(ui的设计稿来决定)</code><br>3.<code>rem推荐我们把屏幕分成10份，1html=当前屏幕的10分之一</code></p><h2 id="2-less预处理"><a href="#2-less预处理" class="headerlink" title="2. less预处理"></a>2. less预处理</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.css预处理器，less文件后缀.less</span><br><span class="line">2.注释： //       /**/</span><br><span class="line">3.运算 + - * /</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：&#x2F; 除法记得加小括号，因为编译会把它当路径来看<br>如果运算的值的单位各不相同，以第一个为准</p><h3 id="less生成后代选择器"><a href="#less生成后代选择器" class="headerlink" title="less生成后代选择器"></a>less生成后代选择器</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">父选择器 &#123;</span><br><span class="line">    子选择器&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less中的伪类和伪元素"><a href="#less中的伪类和伪元素" class="headerlink" title="less中的伪类和伪元素"></a>less中的伪类和伪元素</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">&amp;</span>：<span class="selector-tag">hover</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="less变量定义"><a href="#less变量定义" class="headerlink" title="less变量定义"></a>less变量定义</h3><p><strong>语法</strong><br>    1.定义变量    @变量名:变量值;<br>    2.使用变量:变量名;<br><strong>导入其他less文件</strong><br>方法1： <code>@import ‘less文件路径’;</code><br>方法1： <code>@import url(less文件路径);</code><br><strong>导出css文件</strong><br>方法1   写在第一行   <code> // out:../css/</code><br>方法2     配置插件： 设置 → <code>搜索EasyLess</code> → <code>在setting.json</code>中编辑 → 添加代码（注意，必须是双引号）<br><strong>禁止导出</strong><br><code>语法：//  out:false;</code><br><code>不会生成css文件</code></p><h3 id="vw-vh-相对单位"><a href="#vw-vh-相对单位" class="headerlink" title="vw&#x2F;vh    相对单位"></a>vw&#x2F;vh    相对单位</h3><p>相对视口的尺寸自动计算结果<br><code>1vw = 1/100视口宽度</code><br><code>1vh= 1/100视口高度</code><br>实际开发中，只会使用其中一个<br>vmin   横屏和竖屏谁小就用谁<br>让屏幕在竖屏和横屏内容的大小保持一致<br>vmax   横屏和竖屏谁大就用谁</p><p><strong>em</strong><br>默认，1em&#x3D;16px<br>与他的父元素或本身元素的字体大小有关，优先级：本身&gt;父元素</p><h2 id="3-媒体查询"><a href="#3-媒体查询" class="headerlink" title="3. 媒体查询"></a>3. 媒体查询</h2><p><strong>作用</strong>：能够检测视口宽度<br><strong>语法</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> (媒体查询特性) &#123;</span><br><span class="line">    css选择器 &#123;</span><br><span class="line">        <span class="attribute">font-size</span>：<span class="number">20px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">width</span>:<span class="number">375px</span>) &#123;</span><br><span class="line">    css选择器 &#123;</span><br><span class="line">        <span class="attribute">font-size</span>：<span class="number">20px</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​<strong>max-width</strong>   表示对应值在区间以下   从大到小去写<br>​<strong>min-width</strong>    表示对应值在区间以上    从小到大去写</p><h2 id="4-BootStrap"><a href="#4-BootStrap" class="headerlink" title="4. BootStrap"></a>4. <code>BootStrap</code></h2><h3 id="快速开发响应式网页"><a href="#快速开发响应式网页" class="headerlink" title="快速开发响应式网页"></a>快速开发响应式网页</h3><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><p>​1.引入bootstrap.css<br>​2.调用固定类名</p><h4 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h4><p><strong>container</strong>：内容固定在中心，<code>会自带15px的padding值</code><br><strong>container-fluid</strong>：<code>通栏00%</code>，<code>会自带15px的padding值</code><br><strong>row    行</strong>：内补父元素内边距    通过设置左右的负外边距清除父元素内边距<br><strong>col    列     每行12列，多的列会换行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">大屏  &gt;1200      col-lg-份数</span><br><span class="line">中屏  &gt;992        col-md-份数</span><br><span class="line">小屏  &gt;=768      col-sm-份数</span><br><span class="line">超小屏  &lt;=768  col- xs-份数</span><br></pre></td></tr></table></figure><p><strong>列偏移</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">只能向右偏移</span><br><span class="line">offset</span><br><span class="line">语法：col-lg-offset-份数</span><br><span class="line">会自带15px的padding值</span><br></pre></td></tr></table></figure><p><strong>嵌套列</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在col中再去嵌套row</span><br><span class="line">显示与隐藏</span><br><span class="line">visible-屏幕</span><br><span class="line">hidde-屏幕</span><br><span class="line">lg   md  sm  xs</span><br></pre></td></tr></table></figure><h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><p><strong>1.过渡加在默认状态，就会有去有回，过渡在hover状态添加，就只有去的效果</strong></p><p><strong>2.<code>display无法触发过渡</code></strong></p><p>使用<code>display:none(block)对div的隐藏与显示应用于过渡属性上</code>，但是<code>transition</code>完全失效，没有过渡效果。<br><code>div元素使用display:none(block)实现隐藏与显示的时候，会与transition属性冲突，导致过渡效果无效。display会破坏transition。</code></p><p>原因<br><code>display:none的时候，页面文档流中将不会存在该元素，display:block的时候，文档流中才存在该元素。transition属性无法对一个从无到有的元素进行过渡显示。</code></p><p>解决方案<br><code>使用visibility替代display，或者opacity也可以</code></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS-web端</title>
      <link href="/star/2023/07202.html"/>
      <url>/star/2023/07202.html</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-web端"><a href="#CSS-web端" class="headerlink" title="CSS-web端"></a>CSS-web端</h1><p><code>CSS-web端这篇笔记是关于web端能够使用到的css样式语法</code></p><span id="more"></span><h2 id="一-CSS基础认知"><a href="#一-CSS基础认知" class="headerlink" title="一.CSS基础认知"></a>一.CSS基础认知</h2><p><strong>是什么？</strong>：层叠样式表<br><strong>作用</strong>：专门给html设置样式<br><strong>语法规则</strong>：<br>1.选择器  {color:red;}<br>2.css符号都是英文<br>3.键值对写完以后需要加分号<br><strong>css引入方式</strong>：<br>内嵌式：将css代码写在html文件中<br>                <code>一般写在title标签下面，&lt;style&gt;&lt;/style&gt;</code></p><p>外联式：写在单独的css文件中<br>                通过link标签在html文件中引入</p><p>行内式：<code>写在目标标签的开始标签中，style=&#39;color:red;&#39;</code></p><h2 id="二-选择器"><a href="#二-选择器" class="headerlink" title="二.选择器"></a>二.选择器</h2><h3 id="基础选择器"><a href="#基础选择器" class="headerlink" title="基础选择器"></a>基础选择器</h3><h4 id="1-标签选择器"><a href="#1-标签选择器" class="headerlink" title="1.标签选择器"></a>1.标签选择器</h4><p><strong>标签名 {css属性}</strong><br>特点：<strong>找到页面中所有的这个标签</strong></p><h4 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="2.类选择器"></a>2.类选择器</h4><p><strong>.类名 {css属性}</strong>           class的属性值成为类名<br>特点：<br>        1.仅仅只找该类名的标签<br>        2.不能以数字，中划线开头<br>        3.类名可以有数字，字母，下划线，中划线<br>        4.标签中可以有多个类名</p><h4 id="3-id选择器"><a href="#3-id选择器" class="headerlink" title="3.id选择器"></a>3.id选择器</h4><p><strong>#id属性值 {css属性}</strong><br>特点：<strong>一个id选择器只能选择到一个标签</strong></p><h4 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.通配符选择器"></a>4.通配符选择器</h4><p><code>* &#123;css属性&#125;</code><br>特点：<strong>找到页面上所有标签，设置样式</strong></p><h3 id="选择器的进阶"><a href="#选择器的进阶" class="headerlink" title="选择器的进阶"></a>选择器的进阶</h3><p><strong>复合选择器</strong><br><code>1.后代选择器</code>：选择器1 选择器2 { css属性 }<br><strong>作用</strong>：寻找所有的后代，包括孙子<br><code>2.子代选择器</code>：选择器1&gt;选择器2{css属性}<br><strong>作用</strong>：仅仅只寻找子代，不会找到孙子<br><code>3.并集选择器</code>：选择器1，选择器2 {css属性}  中间逗号分隔<br><strong>作用</strong>：选中选择器1和选择器2选中的标签，设置样式<br><code>4.交集选择器</code>：选择器1选择器2 {css选择器}<br><strong>作用</strong>：找到页面一个标签内同时拥有选择器1和选择器2的标签，<br><code>&lt;p class=&#39;red&#39;&gt;小哥哥&lt;/p&gt;</code>       p.red {css属性}<br><strong>注意</strong>：交集选择器中如果有标签选择器，标签选择器必须写在最前面<br><code>5. hover伪类选择器</code>：选择器:hover{css属性}<br>在鼠标悬停在元素上时触发<br><code>6.emmet语法</code> ：内部文本    ul&gt;li{我是li的内容}，能够快速生成结构，需要的自己查一下文档。</p><h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>1.<code>父盒子 子盒子:first-child &#123;&#125;</code><br>2.<code>父盒子 子盒子:last-child &#123;&#125;</code><br>3.<code>父盒子 子盒子:nth-child(n) &#123;&#125;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">偶数  2n  even</span><br><span class="line">奇数 2n-1 odd</span><br><span class="line">前5个  -n+5</span><br><span class="line">后五个 n+5</span><br></pre></td></tr></table></figure><p>4.<code>父盒子 子盒子:nth-last-child(n) &#123;&#125;</code><br>5.<code>父盒子 子盒子:nth-of-type(n) &#123;&#125;</code><br><strong>区别：</strong><br>:nth-child → 直接在所有孩子中数个数<br>:nth-of-type → 先通过该 类型 找到符合的一堆子元素，然后在这一堆子元素中数个数</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p>伪元素：通过css模拟出来的html标签<br>::before   ::after<br><strong>注意：</strong><br>1.必须设置content属性才能生效<br>2.伪元素默认是行内元素<br>3.只有双标签才可以使用伪元素</p><h2 id="三-字体和文本样式"><a href="#三-字体和文本样式" class="headerlink" title="三.字体和文本样式"></a>三.字体和文本样式</h2><h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">font-size        字体大小</span><br><span class="line">font-weight      文本粗细    400为正常</span><br><span class="line">font-family      文本字体</span><br><span class="line">font-style       文本风格    normal  正常    italic  斜体</span><br><span class="line">font连写方式    font:文本风格   文本粗细   字体大小/行高   字体</span><br><span class="line">注意：1.必须保留font-size和font-family属性，否则font属性不起作用</span><br><span class="line"> 2.要把单独的样式写在连写的下面，不然会被覆盖</span><br></pre></td></tr></table></figure><h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">color  文字颜色</span><br><span class="line">text-align  文本水平居中 只能给大盒子使用</span><br><span class="line">text-decoration 下划线样式   </span><br><span class="line">            1.none  默认，用于a标签的取消下划线</span><br><span class="line">2.underline  下划线</span><br><span class="line">text-indent属性  首行缩进      单位em</span><br><span class="line">line-height  行高</span><br></pre></td></tr></table></figure><h2 id="四-背景属性"><a href="#四-背景属性" class="headerlink" title="四.背景属性"></a>四.背景属性</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">背景颜色  background-color</span><br><span class="line">背景图片  background-img:url()</span><br><span class="line">盒子比图片大，会出现平铺的效果</span><br><span class="line">背景平铺  background-repeat</span><br><span class="line">1.no-repeat  不平铺</span><br><span class="line">2.repeat-x  水平方向平铺</span><br><span class="line">3.repeat-y  垂直方向平铺</span><br><span class="line">背景位置   background-position:水平方向  垂直方向</span><br><span class="line">向右走为正值</span><br><span class="line">向下走为正值</span><br><span class="line">背景属性的复合写法：background:color url() no-repeat position</span><br></pre></td></tr></table></figure><h2 id="五-元素的显示模式"><a href="#五-元素的显示模式" class="headerlink" title="五.元素的显示模式"></a>五.元素的显示模式</h2><h3 id="1-块级元素"><a href="#1-块级元素" class="headerlink" title="1.块级元素"></a>1.块级元素</h3><p><strong>特点：</strong><br>1.独占一行<br>2.如果不设置宽高，那么他的宽度由父元素决定，高度由内容撑开<br>3.可以设置宽高<br><strong>如何转换？</strong>转换块级元素   display:block;<br><strong>哪些是块级元素：</strong>div,p h系列，列表， 表格，form…</p><h3 id="2-行内元素"><a href="#2-行内元素" class="headerlink" title="2.行内元素"></a>2.行内元素</h3><p><strong>特点：</strong><br>1.不独占一行,可放多个<br>2.不能设置宽高<br>3.宽高由内容决定<br><strong>如何转换？</strong>转换为行内块元素  display:inline;<br><strong>哪些是行内元素</strong>：a,span,b,i,u…..</p><h3 id="3-行内块元素"><a href="#3-行内块元素" class="headerlink" title="3.行内块元素"></a>3.行内块元素</h3><p><strong>特点：</strong><br>1.一行显示多个<br>2.可以设置宽高<br><strong>如何转换？</strong>转换为行内块元素  display：inline-block<br><strong>哪些是行内块元素</strong>img，input等所有表单元素</p><h2 id="六-CSS特性"><a href="#六-CSS特性" class="headerlink" title="六.CSS特性"></a>六.CSS特性</h2><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>1.字体系列，文本系列控制的属性都能继承<br>2.width，height不能被继承<br>3.a标签无法继承color<br>4.h系列标签无法继承font-size</p><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>1.给同一个标签设置不同的样式 → 此时样式会层叠叠加 → 会共同作用在标签上</p><p>2.给同一个标签设置相同的样式 → 此时样式会层叠覆盖 → 最终写在最后的样式会生效<br>    注意：当样式冲突时，只有当选择器优先级相同时，才能通过层叠性判断结果</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>1.当同一个元素指定多个选择器，就会有优先级<br>2.！important&gt;行类样式&gt;id选择器&gt;类选择器，伪类选择器&gt;基础选择器&gt;通配符&gt;继承<br>3.!important放在声明后面，声明会变成最大优先级<br>4.选择器 {属性名:属性值 !important;}</p><h2 id="七-盒子模型"><a href="#七-盒子模型" class="headerlink" title="七.盒子模型"></a>七.盒子模型</h2><p><strong>组成：内容+内边距+边框+外边距</strong><br><strong>内边距 padding</strong><br>            1.padding一般都会撑大盒子<br>            2.不会撑大的情况<br>                1.不给子元素设置宽，默认是父盒子的宽<br>                2.给子元素设置padding和border都不会撑大盒子<br><strong>边框 border</strong><br><strong>外边距 margin</strong><br><strong>自动内减 box-sizing: border-box;</strong> 怪异盒子</p><h4 id="1-外边距折叠现象"><a href="#1-外边距折叠现象" class="headerlink" title="1.外边距折叠现象"></a>1.外边距折叠现象</h4><p><strong>① 合并现象</strong><br>1.场景：垂直布局 的 块级元素，上下的margin会合并<br>2.结果：最终两者距离为margin的最大值<br>3.解决方法：只给其中一个盒子设置margin即可<br><strong>② 塌陷现象</strong><br>1.场景：互相嵌套 的 块级元素，子元素的 margin-top 会作用在父元素上<br>2.结果：导致父元素一起往下移动<br>3.解决办法：<br>3.1：给父元素设置border-top 或者 padding-top（分隔父子元素的margin-top）<br>3.2：给父元素设置overflow：hidden<br>3.3：给父元素转换成行内块元素<br>3.4：给父元素设置浮动</p><h4 id="2-行内元素的margin和padding无效情况"><a href="#2-行内元素的margin和padding无效情况" class="headerlink" title="2.行内元素的margin和padding无效情况"></a>2.行内元素的margin和padding无效情况</h4><p>1.场景：给行内元素设置margin和padding时<br>2.结果：<br>2.1：水平方向的margin和padding布局中有效！<br>2.2：垂直方向的margin和padding布局中无效！</p><h2 id="八-标准流"><a href="#八-标准流" class="headerlink" title="八.标准流"></a>八.标准流</h2><p>1.块级元素：从上往下，垂直布局，独占一行</p><p>2.行内元素 或 行内块元素：从左往右，水平布局，空间不够自动折行</p><h2 id="九浮动"><a href="#九浮动" class="headerlink" title="九浮动"></a>九浮动</h2><p><strong>浮动的作用：</strong>1.图文环绕 ，2.网页布局<br><strong>语法：</strong>float:left&#x2F;right;<br><strong>特点：</strong><br>1.浮动元素会脱标，在标准流中不占位置<br>2.浮动元素比标准流高出半个级别，可以覆盖标准流中的元素<br>3.浮动找浮动，下一个浮动元素会在上一个浮动元素后面左右浮动<br>4.浮动元素有特殊的显示效果：① 一行可以显示多个 ② 可以设置宽高</p><p><strong>注意:浮动的元素不能通过text-align:center或者margin:0 auto</strong></p><h3 id="如何清除浮动？"><a href="#如何清除浮动？" class="headerlink" title="如何清除浮动？"></a>如何清除浮动？</h3><p><strong>1.单伪元素清除浮动</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2.双伪元素清除法</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="attribute">display</span>: table;</span><br><span class="line"> &#125; </span><br><span class="line"> <span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">     <span class="attribute">clear</span>: both;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>3.给父盒子设置一个高</strong><br><strong>4.给父元素设置overflow:hidden;</strong><br><strong>5.额外标签法</strong><br>5.1：在父元素内容的最后添加一个块级元素<br>5.2：给添加的块级元素设置 clear:both</p><h2 id="十-定位"><a href="#十-定位" class="headerlink" title="十.定位"></a>十.定位</h2><p>定位场景：1.盒子层叠，2.固定盒子位置</p><h3 id="第一步：设置position"><a href="#第一步：设置position" class="headerlink" title="第一步：设置position"></a>第一步：设置position</h3><p><strong>relative  相对定位</strong>：相对于自己之前的位置移动<br>特点：1.占位置，未脱标。2.配合边偏移使用。3.子绝父相</p><p><strong>absolute  绝对定位</strong>：默认浏览器可视区进行移动<br>如果其祖先元素有定位的属性，就相对于最近的祖先定位元素来移动，祖先定位可以是（绝对，相对，固定）<br>特点：1.不占位置，脱标。2.配合边偏移使用。3.子绝父相<br><strong>水平垂直居中</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">left</span>:<span class="number">50%</span> ;</span><br><span class="line"><span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line"><span class="attribute">transform</span>:<span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br></pre></td></tr></table></figure><p><strong>fixed 固定定位</strong>：相对于浏览器可视区进行移动<br>特点：1.不占位置，脱标。2.配合边偏移使用。3.让盒子固定在屏幕中的某个位置</p><p><strong>z-index</strong>：z-index：1；数值越大，越在上面。要结合定位使用，不能单独使用</p><h3 id="第二步：设置边偏移"><a href="#第二步：设置边偏移" class="headerlink" title="第二步：设置边偏移"></a>第二步：设置边偏移</h3><p>left  right  top  bottom</p><h2 id="十一-装饰"><a href="#十一-装饰" class="headerlink" title="十一.装饰"></a>十一.装饰</h2><h3 id="1-垂直对齐方式"><a href="#1-垂直对齐方式" class="headerlink" title="1.垂直对齐方式"></a>1.垂直对齐方式</h3><p><strong>语法：vertical-align:top&#x2F;middle&#x2F;bottom</strong><br><strong>只能设置给行内&#x2F;行内块元素，设置给图片</strong><br><strong>注意：</strong><br>1.行内&#x2F;行内块的元素都有基线对齐的问题<br>2.不推荐使用行内块让div一行显示，因为可能出现基线对齐的问题<br><strong>解决：</strong>方法1:使用vertical-align<br>           方法2：将行内&#x2F;行内块元素转换为块级元素</p><h3 id="2-cursor-鼠标光标"><a href="#2-cursor-鼠标光标" class="headerlink" title="2.cursor  鼠标光标"></a>2.cursor  鼠标光标</h3><p>这个自己查文档去</p><h3 id="3-圆角边框"><a href="#3-圆角边框" class="headerlink" title="3.圆角边框"></a>3.圆角边框</h3><p>1.border-radius:10px;  数值越大，就越圆<br>2.圆形   50%<br>3.胶囊按钮  设置盒子高度的一半</p><h3 id="4-overflow"><a href="#4-overflow" class="headerlink" title="4.overflow"></a>4.overflow</h3><p>处理溢出的部分</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hidden  隐藏</span><br><span class="line">visible  默认值  溢出的部分显示</span><br><span class="line">scroll  将溢出的部分设置为滚动条，不管内容是否溢出，都会出现</span><br><span class="line">auto  根据内容多少来决定，如果内容溢出才触发滚动条</span><br></pre></td></tr></table></figure><h3 id="5-显示与隐藏"><a href="#5-显示与隐藏" class="headerlink" title="5.显示与隐藏"></a>5.显示与隐藏</h3><p><strong>display属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">block 显示</span><br><span class="line">none   隐藏</span><br><span class="line">注意：隐藏以后不占位置</span><br></pre></td></tr></table></figure><p><strong>visibility属性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hidden  隐藏</span><br><span class="line">visible 显示</span><br><span class="line">占位置</span><br></pre></td></tr></table></figure><p><strong>opacity元素透明度</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opacity：0.5；</span><br><span class="line">属性值在0-1之间</span><br><span class="line">注意：opacity会让元素整体透明，包括里面的内容</span><br></pre></td></tr></table></figure><p><strong>transparent  透明度</strong></p><h2 id="十二-链接伪类"><a href="#十二-链接伪类" class="headerlink" title="十二.链接伪类"></a>十二.链接伪类</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:link a链接未访问过的状态</span><br><span class="line">a:visited  a链接访问以后的状态</span><br><span class="line">a:active  选中鼠标按下</span><br><span class="line">a:hover</span><br></pre></td></tr></table></figure><h2 id="十三-焦点伪类"><a href="#十三-焦点伪类" class="headerlink" title="十三.焦点伪类"></a>十三.焦点伪类</h2><p>input:focus</p><h2 id="十四-精灵图"><a href="#十四-精灵图" class="headerlink" title="十四.精灵图"></a>十四.精灵图</h2><p>1.设置背景图片<br>2.设置背景位置值，负值</p><h2 id="十五-过渡"><a href="#十五-过渡" class="headerlink" title="十五.过渡"></a>十五.过渡</h2><p>语法：transition:all  2s;<br><strong>注意：</strong><br>1.过渡需要：默认状态 和 hover状态样式不同，才能有过渡效果<br>2.transition属性给需要过渡的元素本身加<br>3.transition属性设置在不同状态中，效果不同的<br>① 给默认状态设置，鼠标移入移出都有过渡效果<br>② 给hover状态设置，鼠标移入有过渡效果，移出没有过渡效果</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/star/2023/0720undefined.html"/>
      <url>/star/2023/0720undefined.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
